package com.wanmi.sbc.returnorder.trade.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alipay.api.AlipayApiException;
import com.alipay.api.internal.util.AlipaySignature;
import com.codingapi.txlcn.tc.annotation.LcnTransaction;
import com.codingapi.txlcn.tc.annotation.TccTransaction;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder;
import com.thoughtworks.xstream.io.xml.XppDriver;
import com.wanmi.sbc.account.api.provider.finance.record.AccountRecordProvider;
import com.wanmi.sbc.account.api.provider.offline.OfflineQueryProvider;
import com.wanmi.sbc.account.api.provider.wallet.VirtualGoodsQueryProvider;
import com.wanmi.sbc.account.api.request.finance.record.AccountRecordAddRequest;
import com.wanmi.sbc.account.api.request.finance.record.AccountRecordDeleteByOrderCodeAndTypeRequest;
import com.wanmi.sbc.account.api.request.offline.OfflineAccountGetByIdRequest;
import com.wanmi.sbc.account.api.response.offline.OfflineAccountGetByIdResponse;
import com.wanmi.sbc.account.bean.enums.*;
import com.wanmi.sbc.account.bean.vo.VirtualGoodsVO;
import com.wanmi.sbc.common.base.*;
import com.wanmi.sbc.common.config.wms.WmsApiProperties;
import com.wanmi.sbc.common.constant.AbstractXYYConstant;
import com.wanmi.sbc.common.enums.CompanyType;
import com.wanmi.sbc.common.enums.*;
import com.wanmi.sbc.common.enums.node.DistributionType;
import com.wanmi.sbc.common.enums.node.OrderProcessType;
import com.wanmi.sbc.common.exception.SbcRuntimeException;
import com.wanmi.sbc.common.util.*;
import com.wanmi.sbc.customer.api.provider.address.CustomerDeliveryAddressQueryProvider;
import com.wanmi.sbc.customer.api.provider.company.CompanyInfoQueryProvider;
import com.wanmi.sbc.customer.api.provider.company.CompanyIntoPlatformQueryProvider;
import com.wanmi.sbc.customer.api.provider.customer.CustomerQueryProvider;
import com.wanmi.sbc.customer.api.provider.distribution.DistributionCustomerQueryProvider;
import com.wanmi.sbc.customer.api.provider.email.CustomerEmailQueryProvider;
import com.wanmi.sbc.customer.api.provider.employee.EmployeeQueryProvider;
import com.wanmi.sbc.customer.api.provider.employeecontract.EmployeeContractProvider;
import com.wanmi.sbc.customer.api.provider.invitationstatistics.InvitationStatisticsProvider;
import com.wanmi.sbc.customer.api.provider.level.CustomerLevelQueryProvider;
import com.wanmi.sbc.customer.api.provider.points.CustomerPointsDetailSaveProvider;
import com.wanmi.sbc.customer.api.provider.store.StoreQueryProvider;
import com.wanmi.sbc.customer.api.request.address.CustomerDeliveryAddressByIdRequest;
import com.wanmi.sbc.customer.api.request.company.*;
import com.wanmi.sbc.customer.api.request.customer.CustomerGetByIdRequest;
import com.wanmi.sbc.customer.api.request.detail.CustomerDetailListByConditionRequest;
import com.wanmi.sbc.customer.api.request.distribution.DistributionCustomerListForOrderCommitRequest;
import com.wanmi.sbc.customer.api.request.email.NoDeleteCustomerEmailListByCustomerIdRequest;
import com.wanmi.sbc.customer.api.request.employee.EmployeeByIdRequest;
import com.wanmi.sbc.customer.api.request.invitationstatistics.InvitationTradeStatisticsRequest;
import com.wanmi.sbc.customer.api.request.invoice.CustomerInvoiceByIdAndDelFlagRequest;
import com.wanmi.sbc.customer.api.request.level.CustomerLevelByCustomerIdAndStoreIdRequest;
import com.wanmi.sbc.customer.api.request.level.CustomerLevelMapByCustomerIdAndStoreIdsRequest;
import com.wanmi.sbc.customer.api.request.points.CustomerPointsDetailAddRequest;
import com.wanmi.sbc.customer.api.request.store.ListNoDeleteStoreByIdsRequest;
import com.wanmi.sbc.customer.api.response.address.CustomerDeliveryAddressByIdResponse;
import com.wanmi.sbc.customer.api.response.company.*;
import com.wanmi.sbc.customer.api.response.customer.CustomerGetByIdResponse;
import com.wanmi.sbc.customer.api.response.detail.CustomerDetailGetCustomerIdResponse;
import com.wanmi.sbc.customer.api.response.employee.EmployeeByIdResponse;
import com.wanmi.sbc.customer.api.response.employeecontract.EmployeeContractResponese;
import com.wanmi.sbc.customer.api.response.invoice.CustomerInvoiceByIdAndDelFlagResponse;
import com.wanmi.sbc.customer.api.response.store.ListNoDeleteStoreByIdsResponse;
import com.wanmi.sbc.customer.api.response.store.StoreInfoResponse;
import com.wanmi.sbc.customer.bean.dto.CustomerDTO;
import com.wanmi.sbc.customer.bean.enums.CheckState;
import com.wanmi.sbc.customer.bean.enums.CommissionPriorityType;
import com.wanmi.sbc.customer.bean.enums.CommissionUnhookType;
import com.wanmi.sbc.customer.bean.enums.*;
import com.wanmi.sbc.customer.bean.vo.CompanyInfoVO;
import com.wanmi.sbc.customer.bean.vo.*;
import com.wanmi.sbc.goods.api.provider.customerarelimitdetail.CustomerAreaLimitDetailProvider;
import com.wanmi.sbc.goods.api.provider.devanninggoodsinfo.DevanningGoodsInfoProvider;
import com.wanmi.sbc.goods.api.provider.devanninggoodsinfo.DevanningGoodsInfoQueryProvider;
import com.wanmi.sbc.goods.api.provider.flashsalegoods.FlashSaleGoodsQueryProvider;
import com.wanmi.sbc.goods.api.provider.freight.FreightTemplateDeliveryAreaQueryProvider;
import com.wanmi.sbc.goods.api.provider.freight.FreightTemplateStoreQueryProvider;
import com.wanmi.sbc.goods.api.provider.goods.GoodsQueryProvider;
import com.wanmi.sbc.goods.api.provider.goodswarestock.GoodsWareStockProvider;
import com.wanmi.sbc.goods.api.provider.goodswarestock.GoodsWareStockQueryProvider;
import com.wanmi.sbc.goods.api.provider.info.BulkGoodsInfoQueryProvider;
import com.wanmi.sbc.goods.api.provider.info.GoodsInfoProvider;
import com.wanmi.sbc.goods.api.provider.info.GoodsInfoQueryProvider;
import com.wanmi.sbc.goods.api.provider.info.RetailGoodsInfoQueryProvider;
import com.wanmi.sbc.goods.api.provider.pointsgoods.PointsGoodsSaveProvider;
import com.wanmi.sbc.goods.api.provider.price.GoodsIntervalPriceProvider;
import com.wanmi.sbc.goods.api.provider.storecate.StoreCateQueryProvider;
import com.wanmi.sbc.goods.api.provider.warehouse.WareHouseQueryProvider;
import com.wanmi.sbc.goods.api.request.customerarealimitdetail.CustomerAreaLimitDetailAddRequest;
import com.wanmi.sbc.goods.api.request.devanningGoodsInfo.DevanningGoodsInfoListByConditionRequest;
import com.wanmi.sbc.goods.api.request.devanningGoodsInfo.DevanningGoodsInfoRequest;
import com.wanmi.sbc.goods.api.request.flashsalegoods.FlashSaleGoodsByIdRequest;
import com.wanmi.sbc.goods.api.request.freight.FreightTemplateDeliveryAreaListRequest;
import com.wanmi.sbc.goods.api.request.freight.FreightTemplateStoreListByStoreIdAndDeleteFlagRequest;
import com.wanmi.sbc.goods.api.request.goods.GoodsLackStockRequest;
import com.wanmi.sbc.goods.api.request.goods.GoodsListByIdsRequest;
import com.wanmi.sbc.goods.api.request.goodswarestock.GoodsWareStockByGoodsForIdsRequest;
import com.wanmi.sbc.goods.api.request.goodswarestock.GoodsWareStockByGoodsForNoRequest;
import com.wanmi.sbc.goods.api.request.goodswarestock.GoodsWareStockUpdateListRequest;
import com.wanmi.sbc.goods.api.request.goodswarestock.GoodsWareStockUpdateRequest;
import com.wanmi.sbc.goods.api.request.info.*;
import com.wanmi.sbc.goods.api.request.pointsgoods.PointsGoodsMinusStockRequest;
import com.wanmi.sbc.goods.api.request.price.GoodsIntervalPriceByCustomerIdRequest;
import com.wanmi.sbc.goods.api.request.storecate.StoreCateListByGoodsRequest;
import com.wanmi.sbc.goods.api.request.warehouse.WareHouseListRequest;
import com.wanmi.sbc.goods.api.response.devanninggoodsinfo.DevanningGoodsInfoByInfoIdAndStepResponse;
import com.wanmi.sbc.goods.api.response.devanninggoodsinfo.DevanningGoodsInfoListResponse;
import com.wanmi.sbc.goods.api.response.freight.FreightTemplateDeliveryAreaByStoreIdResponse;
import com.wanmi.sbc.goods.api.response.goods.GoodsListByIdsResponse;
import com.wanmi.sbc.goods.api.response.goodswarestock.GoodsWareStockListResponse;
import com.wanmi.sbc.goods.api.response.info.GoodsInfoListByIdsResponse;
import com.wanmi.sbc.goods.api.response.info.GoodsInfoViewByIdsResponse;
import com.wanmi.sbc.goods.api.response.price.GoodsIntervalPriceByCustomerIdResponse;
import com.wanmi.sbc.goods.bean.dto.GoodsInfoDTO;
import com.wanmi.sbc.goods.bean.dto.GoodsInfoPlusStockDTO;
import com.wanmi.sbc.goods.bean.dto.GoodsInfoUnlockStockDTO;
import com.wanmi.sbc.goods.bean.enums.*;
import com.wanmi.sbc.goods.bean.vo.*;
import com.wanmi.sbc.marketing.api.provider.coupon.CouponActivityProvider;
import com.wanmi.sbc.marketing.api.provider.coupon.CouponCodeProvider;
import com.wanmi.sbc.marketing.api.provider.distribution.DistributionCacheQueryProvider;
import com.wanmi.sbc.marketing.api.provider.grouponactivity.GrouponActivityQueryProvider;
import com.wanmi.sbc.marketing.api.provider.grouponrecord.GrouponRecordProvider;
import com.wanmi.sbc.marketing.api.provider.market.MarketingProvider;
import com.wanmi.sbc.marketing.api.provider.market.MarketingQueryProvider;
import com.wanmi.sbc.marketing.api.provider.market.MarketingScopeProvider;
import com.wanmi.sbc.marketing.api.provider.market.MarketingScopeQueryProvider;
import com.wanmi.sbc.marketing.api.provider.marketingpurchaselimit.MarketingPurchaseLimitProvider;
import com.wanmi.sbc.marketing.api.provider.plugin.MarketingCouponPluginProvider;
import com.wanmi.sbc.marketing.api.provider.plugin.MarketingPluginProvider;
import com.wanmi.sbc.marketing.api.provider.plugin.MarketingTradePluginProvider;
import com.wanmi.sbc.marketing.api.request.coupon.CouponCodeBatchModifyRequest;
import com.wanmi.sbc.marketing.api.request.coupon.CouponCodeReturnByIdRequest;
import com.wanmi.sbc.marketing.api.request.coupon.SendCouponRechargeRequest;
import com.wanmi.sbc.marketing.api.request.grouponactivity.GrouponActivityByIdRequest;
import com.wanmi.sbc.marketing.api.request.grouponrecord.GrouponRecordIncrBuyNumRequest;
import com.wanmi.sbc.marketing.api.request.market.*;
import com.wanmi.sbc.marketing.api.request.market.latest.MarketingEffectiveRequest;
import com.wanmi.sbc.marketing.api.request.plugin.MarketingCouponWrapperRequest;
import com.wanmi.sbc.marketing.api.request.plugin.MarketingPluginGoodsListFilterRequest;
import com.wanmi.sbc.marketing.api.request.plugin.MarketingTradeBatchWrapperRequest;
import com.wanmi.sbc.marketing.api.response.coupon.GetCouponGroupResponse;
import com.wanmi.sbc.marketing.api.response.distribution.MultistageSettingGetResponse;
import com.wanmi.sbc.marketing.api.response.market.MarketingEffectiveRespose;
import com.wanmi.sbc.marketing.api.response.market.MarketingScopeByMarketingIdResponse;
import com.wanmi.sbc.marketing.api.response.plugin.MarketingCouponWrapperResponse;
import com.wanmi.sbc.marketing.bean.constant.Constant;
import com.wanmi.sbc.marketing.bean.constant.CouponErrorCode;
import com.wanmi.sbc.marketing.bean.dto.CouponCodeBatchModifyDTO;
import com.wanmi.sbc.marketing.bean.dto.TradeItemInfoDTO;
import com.wanmi.sbc.marketing.bean.dto.TradeMarketingDTO;
import com.wanmi.sbc.marketing.bean.dto.TradeMarketingWrapperDTO;
import com.wanmi.sbc.marketing.bean.enums.MarketingType;
import com.wanmi.sbc.marketing.bean.enums.*;
import com.wanmi.sbc.marketing.bean.vo.*;
import com.wanmi.sbc.mongo.MongoTccHelper;
import com.wanmi.sbc.mongo.annotation.MongoRollback;
import com.wanmi.sbc.mongo.core.Operation;
import com.wanmi.sbc.pay.api.provider.*;
import com.wanmi.sbc.pay.api.request.*;
import com.wanmi.sbc.pay.api.response.*;
import com.wanmi.sbc.pay.bean.enums.PayGatewayEnum;
import com.wanmi.sbc.pay.bean.vo.PayChannelItemVO;
import com.wanmi.sbc.pay.weixinpaysdk.WXPayConstants;
import com.wanmi.sbc.pay.weixinpaysdk.WXPayUtil;
import com.wanmi.sbc.returnorder.api.provider.InventoryDetailSamount.InventoryDetailSamountProvider;
import com.wanmi.sbc.returnorder.api.provider.InventoryDetailSamountTrade.InventoryDetailSamountTradeProvider;
import com.wanmi.sbc.returnorder.api.provider.purchase.PurchaseQueryProvider;
import com.wanmi.sbc.returnorder.api.provider.shopcart.ShopCartQueryProvider;
import com.wanmi.sbc.returnorder.api.provider.trade.TradeQueryProvider;
import com.wanmi.sbc.returnorder.api.request.InventoryDetailSamount.InventoryDetailSamountRequest;
import com.wanmi.sbc.returnorder.api.request.InventoryDetailSamountTrade.InventoryDetailSamountTradeRequest;
import com.wanmi.sbc.returnorder.api.request.paycallbackresult.PayCallBackResultQueryRequest;
import com.wanmi.sbc.returnorder.api.request.purchase.PurchaseOrderMarketingRequest;
import com.wanmi.sbc.returnorder.api.request.purchase.StockAndPureChainNodeRequeest;
import com.wanmi.sbc.returnorder.api.request.trade.*;
import com.wanmi.sbc.returnorder.api.response.historylogisticscompany.HistoryLogisticsCompanyByCustomerIdResponse;
import com.wanmi.sbc.returnorder.api.response.inventorydetailsamount.InventoryDetailSamountResponse;
import com.wanmi.sbc.returnorder.api.response.purchase.PurchaseOrderMarketingResponse;
import com.wanmi.sbc.returnorder.api.response.purchase.StockAndPureChainNodeRsponse;
import com.wanmi.sbc.returnorder.api.response.trade.*;
import com.wanmi.sbc.returnorder.ares.service.OrderAresService;
import com.wanmi.sbc.returnorder.bean.dto.*;
import com.wanmi.sbc.returnorder.bean.enums.*;
import com.wanmi.sbc.returnorder.bean.vo.*;
import com.wanmi.sbc.returnorder.common.OperationLogMq;
import com.wanmi.sbc.returnorder.common.OrderCommonService;
import com.wanmi.sbc.returnorder.constant.AbstractOrderConstant;
import com.wanmi.sbc.returnorder.constant.OrderErrorCode;
import com.wanmi.sbc.returnorder.customer.service.CustomerCommonService;
import com.wanmi.sbc.returnorder.enums.PushKingdeeOrderStatusEnum;
import com.wanmi.sbc.returnorder.enums.PushKingdeeStatusEnum;
import com.wanmi.sbc.returnorder.groupon.service.GrouponOrderService;
import com.wanmi.sbc.returnorder.historylogisticscompany.service.HistoryLogisticsCompanyService;
import com.wanmi.sbc.returnorder.historytownshiporder.model.root.HistoryTownShipOrder;
import com.wanmi.sbc.returnorder.historytownshiporder.repository.HistoryTownShipOrderRepository;
import com.wanmi.sbc.returnorder.historytownshiporder.response.TrueStock;
import com.wanmi.sbc.returnorder.historytownshiporder.service.HistoryTownShipOrderService;
import com.wanmi.sbc.returnorder.mq.OrderProducerService;
import com.wanmi.sbc.returnorder.orderinvoice.model.root.OrderInvoice;
import com.wanmi.sbc.returnorder.orderinvoice.request.OrderInvoiceSaveRequest;
import com.wanmi.sbc.returnorder.orderinvoice.service.OrderInvoiceService;
import com.wanmi.sbc.returnorder.orderpicking.model.root.OrderPicking;
import com.wanmi.sbc.returnorder.orderpicking.repository.OrderPickingRepository;
import com.wanmi.sbc.returnorder.paycallbackresult.model.root.PayCallBackResult;
import com.wanmi.sbc.returnorder.paycallbackresult.service.PayCallBackResultService;
import com.wanmi.sbc.returnorder.payorder.model.root.PayOrder;
import com.wanmi.sbc.returnorder.payorder.repository.PayOrderRepository;
import com.wanmi.sbc.returnorder.payorder.request.PayOrderGenerateRequest;
import com.wanmi.sbc.returnorder.payorder.response.PayOrderResponse;
import com.wanmi.sbc.returnorder.payorder.service.PayOrderService;
import com.wanmi.sbc.returnorder.pickuprecord.model.root.PickUpRecord;
import com.wanmi.sbc.returnorder.pickuprecord.service.PickUpRecordService;
import com.wanmi.sbc.returnorder.pilepurchase.PilePurchase;
import com.wanmi.sbc.returnorder.pilepurchase.PilePurchaseRepository;
import com.wanmi.sbc.returnorder.purchase.PurchaseService;
import com.wanmi.sbc.returnorder.purchase.request.PurchaseRequest;
import com.wanmi.sbc.returnorder.receivables.model.root.Receivable;
import com.wanmi.sbc.returnorder.receivables.repository.ReceivableRepository;
import com.wanmi.sbc.returnorder.receivables.request.ReceivableAddRequest;
import com.wanmi.sbc.returnorder.receivables.service.ReceivableService;
import com.wanmi.sbc.returnorder.redis.RedisCache;
import com.wanmi.sbc.returnorder.redis.RedisKeyConstants;
import com.wanmi.sbc.returnorder.redis.RedisService;
import com.wanmi.sbc.returnorder.refund.service.RefundFactory;
import com.wanmi.sbc.returnorder.returnorder.model.root.ReturnOrder;
import com.wanmi.sbc.returnorder.returnorder.repository.ReturnOrderRepository;
import com.wanmi.sbc.returnorder.returnorder.service.ReturnOrderService;
import com.wanmi.sbc.returnorder.shopcart.BulkShopCartService;
import com.wanmi.sbc.returnorder.shopcart.ChainHandle.StockAndPureChainNode;
import com.wanmi.sbc.returnorder.shopcart.RetailShopCartService;
import com.wanmi.sbc.returnorder.shopcart.ShopCartService;
import com.wanmi.sbc.returnorder.shopcart.cache.BulkShopCartCacheSupport;
import com.wanmi.sbc.returnorder.shopcart.request.BulkShopCartRequest;
import com.wanmi.sbc.returnorder.shopcart.request.RetailShopCartRequest;
import com.wanmi.sbc.returnorder.shopcart.request.ShopCartRequest;
import com.wanmi.sbc.returnorder.suit.SuitOrderTemp;
import com.wanmi.sbc.returnorder.suit.SuitOrderTempService;
import com.wanmi.sbc.returnorder.suit.request.SuitOrderTempAddRequest;
import com.wanmi.sbc.returnorder.suit.request.SuitOrderTempEditRequest;
import com.wanmi.sbc.returnorder.suit.request.SuitOrderTempQueryRequest;
import com.wanmi.sbc.returnorder.trade.fsm.TradeFSMService;
import com.wanmi.sbc.returnorder.trade.fsm.event.TradeEvent;
import com.wanmi.sbc.returnorder.trade.fsm.params.StateRequest;
import com.wanmi.sbc.returnorder.trade.model.entity.*;
import com.wanmi.sbc.returnorder.trade.model.entity.value.*;
import com.wanmi.sbc.returnorder.trade.model.newPileTrade.NewPileTrade;
import com.wanmi.sbc.returnorder.trade.model.root.*;
import com.wanmi.sbc.returnorder.trade.reponse.TradeFreightResponse;
import com.wanmi.sbc.returnorder.trade.reponse.TradeItemPrice;
import com.wanmi.sbc.returnorder.trade.reponse.TradeRemedyDetails;
import com.wanmi.sbc.returnorder.trade.repository.*;
import com.wanmi.sbc.returnorder.trade.repository.newPileTrade.GoodsPickStockRepository;
import com.wanmi.sbc.returnorder.trade.request.TradeDeliverRequest;
import com.wanmi.sbc.returnorder.trade.request.*;
import com.wanmi.sbc.returnorder.trade.service.newPileTrade.NewPileTradeService;
import com.wanmi.sbc.returnorder.util.EmailOrderUtil;
import com.wanmi.sbc.returnorder.util.KingdeeLoginUtils;
import com.wanmi.sbc.returnorder.util.TradeExportUtil;
import com.wanmi.sbc.setting.api.provider.AuditQueryProvider;
import com.wanmi.sbc.setting.api.provider.EmailConfigProvider;
import com.wanmi.sbc.setting.api.provider.SystemPointsConfigQueryProvider;
import com.wanmi.sbc.setting.api.provider.doorpick.DoorPickConfigProvider;
import com.wanmi.sbc.setting.api.provider.gatherboxset.GatherBoxSetProvider;
import com.wanmi.sbc.setting.api.provider.logisticscompany.LogisticsCompanyQueryProvider;
import com.wanmi.sbc.setting.api.provider.packingconfig.PackingConfigQueryProvider;
import com.wanmi.sbc.setting.api.provider.region.RegionQueryProvider;
import com.wanmi.sbc.setting.api.provider.systemconfig.SystemConfigQueryProvider;
import com.wanmi.sbc.setting.api.request.TradeConfigGetByTypeRequest;
import com.wanmi.sbc.setting.api.request.logisticscompany.LogisticsCompanyByIdRequest;
import com.wanmi.sbc.setting.api.request.logisticscompany.LogisticsCompanyListRequest;
import com.wanmi.sbc.setting.api.request.systemconfig.SystemConfigQueryRequest;
import com.wanmi.sbc.setting.api.response.EmailConfigQueryResponse;
import com.wanmi.sbc.setting.api.response.SystemPointsConfigQueryResponse;
import com.wanmi.sbc.setting.api.response.gatherboxset.GatherBoxSetInfoResponse;
import com.wanmi.sbc.setting.api.response.logisticscompany.LogisticsCompanyByIdResponse;
import com.wanmi.sbc.setting.api.response.logisticscompany.LogisticsCompanyListResponse;
import com.wanmi.sbc.setting.api.response.region.RegionQueryResponse;
import com.wanmi.sbc.setting.bean.enums.ConfigType;
import com.wanmi.sbc.setting.bean.enums.EmailStatus;
import com.wanmi.sbc.setting.bean.enums.LogisticsType;
import com.wanmi.sbc.setting.bean.vo.*;
import com.wanmi.sbc.tms.api.domain.dto.TmsOrderThirdDeliveryDTO;
import com.wanmi.sbc.tms.api.domain.vo.TmsOrderSaveResponseVO;
import com.wanmi.sbc.wallet.api.provider.wallet.CustomerWalletProvider;
import com.wanmi.sbc.wallet.api.provider.wallet.CustomerWalletQueryProvider;
import com.wanmi.sbc.wallet.api.provider.wallet.TicketsFormProvider;
import com.wanmi.sbc.wallet.api.provider.wallet.WalletRecordProvider;
import com.wanmi.sbc.wallet.api.request.wallet.*;
import com.wanmi.sbc.wallet.api.response.wallet.WalletRecordResponse;
import com.wanmi.sbc.wallet.bean.enums.WalletDetailsType;
import com.wanmi.sbc.wallet.bean.enums.WalletRecordTradeType;
import com.wanmi.sbc.wallet.bean.vo.CusWalletVO;
import com.wanmi.sbc.wallet.bean.vo.WalletRecordVO;
import com.wanmi.sbc.wms.api.provider.wms.RequestWMSInventoryProvider;
import com.wanmi.sbc.wms.api.provider.wms.RequestWMSOrderProvider;
import com.wanmi.sbc.wms.api.request.wms.BatchInventoryQueryRequest;
import com.wanmi.sbc.wms.api.request.wms.WMSOrderCancelRequest;
import com.wanmi.sbc.wms.api.request.wms.WMSPushOrderDetailsRequest;
import com.wanmi.sbc.wms.api.request.wms.WMSPushOrderRequest;
import com.wanmi.sbc.wms.api.response.wms.InventoryQueryResponse;
import com.wanmi.sbc.wms.api.response.wms.ResponseWMSReturnResponse;
import com.wanmi.sbc.wms.bean.vo.ERPWMSConstants;
import com.wanmi.sbc.wms.bean.vo.InventoryQueryReturnVO;
import com.wanmi.sbc.wms.bean.vo.WmsErpIdConstants;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.CharUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.bson.Document;
import org.redisson.api.RLock;
import org.redisson.api.RedissonClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.util.StopWatch;

import javax.annotation.Resource;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * 订单service
 * Created by jinwei on 27/3/2017.
 */
@Service
@Slf4j
public class TradeService {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Value("${send.order.last.month}")
    private String sendOrderLastMonth;

    @Autowired
    private OrderAresService orderAresService;

    @Autowired
    private TradeFSMService tradeFSMService;

    @Autowired
    private TradeRepository tradeRepository;

    @Autowired
    private VerifyService verifyService;

    @Autowired
    private HistoryTownShipOrderService historyTownShipOrderService;

    @Autowired
    @Lazy
    private GoodsQueryProvider goodsQueryProvider;

    @Autowired
    @Lazy
    private GoodsWareStockProvider goodsWareStockProvider;

    @Autowired
    private HistoryTownShipOrderRepository historyTownShipOrderRepository;

    @Autowired
    @Lazy
    private GoodsWareStockQueryProvider goodsWareStockQueryProvider;

    @Autowired
    private GeneratorService generatorService;

    @Autowired
    private GoodsInfoProvider goodsInfoProvider;

    @Autowired
    private GoodsInfoQueryProvider goodsInfoQueryProvider;

    @Autowired
    private RetailGoodsInfoQueryProvider retailGoodsInfoQueryProvider;

    @Autowired
    private PayOrderService payOrderService;

    @Autowired
    private OrderInvoiceService orderInvoiceService;

    @Autowired
    private ReturnOrderRepository returnOrderRepository;

    @Autowired
    private CustomerQueryProvider customerQueryProvider;

    @Autowired
    private PayOrderRepository payOrderRepository;

    @Autowired
    private ReceivableRepository receivableRepository;

    @Autowired
    private PayQueryProvider payQueryProvider;

    @Autowired
    private OsUtil osUtil;

    @Autowired
    private GoodsIntervalPriceProvider goodsIntervalPriceProvider;

    @Autowired
    private MarketingPluginProvider marketingPluginProvider;

    @Autowired
    private TradeItemService tradeItemService;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Autowired
    private AuditQueryProvider auditQueryProvider;

    @Autowired
    private AccountRecordProvider accountRecordProvider;

    @Autowired
    private ReceivableService receivableService;

    @Autowired
    private MarketingTradePluginProvider marketingTradePluginProvider;

    @Autowired
    private MarketingCouponPluginProvider marketingCouponPluginProvider;

    @Autowired
    private CustomerDeliveryAddressQueryProvider customerDeliveryAddressQueryProvider;

    @Autowired
    private CustomerLevelQueryProvider customerLevelQueryProvider;

    @Autowired
    private CustomerCommonService customerCommonService;

    @Autowired
    private FreightTemplateStoreQueryProvider freightTemplateStoreQueryProvider;

    @Autowired
    private CouponCodeProvider couponCodeProvider;

    @Autowired
    private StoreCateQueryProvider storeCateQueryProvider;

    @Autowired
    private StoreQueryProvider storeQueryProvider;

    @Autowired
    private CompanyIntoPlatformQueryProvider companyIntoPlatformQueryProvider;

    @Autowired
    private TradeGroupRepository tradeGroupRepository;

    @Autowired
    private TradeGroupService tradeGroupService;

    @Autowired
    private EmailConfigProvider emailConfigProvider;

    @Autowired
    private CustomerEmailQueryProvider customerEmailQueryProvider;

    @Autowired
    private SystemPointsConfigQueryProvider systemPointsConfigQueryProvider;

    @Autowired
    private TradeEmailService tradeEmailService;

    @Autowired
    private PurchaseService purchaseService;

    @Autowired
    private ShopCartService shopCartService;

    @Autowired
    private RetailShopCartService retailShopCartService;

    @Autowired
    private BulkShopCartService bulkShopCartService;

    @Autowired
    private OperationLogMq operationLogMq;

    @Autowired
    private CustomerPointsDetailSaveProvider customerPointsDetailSaveProvider;

    @Autowired
    private TradeService tradeService;

    @Autowired
    private DistributionCustomerQueryProvider distributionCustomerQueryProvider;

    @Autowired
    private DistributionCacheQueryProvider distributionCacheQueryProvider;

    @Autowired
    private GrouponActivityQueryProvider grouponActivityQueryProvider;
    @Autowired
    private ProviderTradeService providerTradeService;

    @Autowired
    private GrouponInstanceRepository grouponInstanceRepository;
    /**
     * 注入消费记录生产者service
     */
    @Autowired
    public OrderProducerService orderProducerService;

    @Autowired
    public PointsGoodsSaveProvider pointsGoodsSaveProvider;

    @Autowired
    private GrouponOrderService grouponOrderService;

    @Autowired
    private GrouponRecordProvider grouponRecordProvider;

    @Autowired
    private FlashSaleGoodsQueryProvider flashSaleGoodsQueryProvider;

    @Resource
    private MongoTccHelper mongoTccHelper;

    @Autowired
    private TradeCacheService tradeCacheService;

    @Autowired
    private RequestWMSOrderProvider requestWMSOrderProvider;

    @Autowired
    @Lazy
    private RequestWMSInventoryProvider requestWMSInventoryProvider;

    @Autowired
    private PickUpRecordService pickUpRecordService;


    @Autowired
    private EmployeeQueryProvider employeeQueryProvider;

    @Autowired
    private LogisticsCompanyQueryProvider logisticsCompanyQueryProvider;

    @Autowired
    private HistoryLogisticsCompanyService historyLogisticsCompanyService;

    @Value("${wms.api.flag}")
    private Boolean wmsAPIFlag;

    @Autowired
    private PayCallBackResultService payCallBackResultService;

    @Autowired
    private RedissonClient redissonClient;

    @Autowired
    private WxPayProvider wxPayProvider;

    @Autowired
    private AliPayProvider aliPayProvider;

    @Autowired
    private PayProvider payProvider;

    @Autowired
    private InvitationStatisticsProvider invitationStatisticsProvider;

    @Autowired
    private PurchaseQueryProvider purchaseQueryProvider;

    @Autowired
    private ShopCartQueryProvider shopCartQueryProvider;

    @Autowired
    private MarketingQueryProvider marketingQueryProvider;

    @Resource
    private EmailOrderUtil emailOrderUtil;

    @Autowired
    private KingdeeLoginUtils kingdeeLoginUtils;

    @Autowired
    private TradePushKingdeeOrderRepository tradePushKingdeeOrderRepository;

    @Autowired
    private TradePushKingdeePayRepository tradePushKingdeePayRepository;

    @Autowired
    private TradeCachePushKingdeeOrderRepository tradeCachePushKingdeeOrderRepository;

    @Autowired
    private MarketingProvider marketingProvider;

    @Autowired
    private OfflineQueryProvider offlineQueryProvider;

    @Autowired
    private RedisService redisService;


    @Autowired
    private RedisCache redisCache;


    @Autowired
    private MarketingPurchaseLimitProvider marketingPurchaseLimitProvider;


    @Autowired
    private MarketingScopeQueryProvider marketingScopeQueryProvider;

    @Autowired
    private CmbPayProvider cmbPayProvider;

    @Autowired
    CupsPayProvider cupsPayProvider;

    @Value("${kingdee.login.url}")
    private String loginUrl;

    @Value("${kingdee.pay.url}")
    private String payUrl;

    @Value("${kingdee.orderInvalid.url}")
    private String orderInvalidUrl;

    @Value("${kingdee.user}")
    private String kingdeeUser;

    @Value("${kingdee.pwd}")
    private String kingdeePwd;

    @Value("${kingdee.organization}")
    private String kingdeeOrganization;

    @Value("${kingdee.alipay}")
    private String kingdeeAlipay;

    @Value("${kingdee.wechat}")
    private String kingdeeWechat;

    @Value("${kingdee.unionpay}")
    private String kingdeeUnionpay;

    @Value("${kingdee.ccb}")
    private String kingdeeCcbpay;

    @Value("${kingdee.bocom}")
    private String kingdeeBocomPay;

    /**
     * 订单最大打印次数
     */
    @Value("${print.count.max}")
    private Integer printCountMax;

    /**
     * 是否开启新金蝶
     */
    @Value("${kingdee.open.state}")
    private Boolean kingdeeOpenState;

    @Autowired
    private TradeQueryProvider tradeQueryProvider;

    @Autowired
    private TradeExportUtil tradeExportUtil;
    @Autowired
    private VirtualGoodsQueryProvider virtualGoodsQueryProvider;

    @Autowired
    private WalletRecordProvider walletRecordProvider;

    @Autowired
    private CustomerWalletQueryProvider customerWalletQueryProvider;

    @Autowired
    private CustomerWalletProvider customerWalletProvider;

    @Autowired
    private TicketsFormProvider ticketsFormProvider;

    @Autowired
    private CouponActivityProvider couponActivityProvider;

    @Autowired
    private MarketingScopeProvider marketingScopeProvider;
    @Autowired
    private FreightTemplateDeliveryAreaQueryProvider freightTemplateDeliveryAreaQueryProvider;

    @Autowired
    private PilePurchaseRepository pilePurchaseRepository;

    @Autowired
    private GatherBoxSetProvider gatherBoxSetProvider;


    @Autowired
    private PileStockRecordRepository pileStockRecordRepository;

    @Autowired
    private PileStockRecordTradeItemRepository pileStockRecordTradeItemRepository;

    @Autowired
    private PileStockRecordAttachmentRepostory pileStockRecordAttachmentRepostory;

    @Autowired
    private RegionQueryProvider regionQueryProvider;

    @Autowired
    private SuitOrderTempService suitOrderTempService;

    @Autowired
    private PackingConfigQueryProvider packingConfigQueryProvider;

    @Autowired
    private WareHouseQueryProvider wareHouseQueryProvider;

    @Autowired
    private DevanningGoodsInfoProvider devanningGoodsInfoProvider;

    @Autowired
    private DevanningGoodsInfoQueryProvider devanningGoodsInfoQueryProvider;

    @Autowired
    private BulkGoodsInfoQueryProvider bulkGoodsInfoQueryProvider;

    @Autowired
    private GoodsPickStockRepository goodsPickStockRepository;

    @Autowired
    private InventoryDetailSamountProvider inventoryDetailSamountProvider;

    @Autowired
    private InventoryDetailSamountTradeProvider inventoryDetailSamountTradeProvider;

    @Autowired
    @Lazy
    private NewPileTradeService newPileTradeService;

    @Autowired
    private CustomerAreaLimitDetailProvider customerAreaLimitDetailProvider;

    @Autowired
    private CustomerWalletQueryProvider walletQueryProvider;

    @Autowired
    private ReturnOrderService returnOrderService;

    @Autowired
    private SystemConfigQueryProvider systemConfigQueryProvider;

    /**
     * 通过 service-Order-app >> resource >> spring-plugin.xml 文件注入
     */
    @Resource(name = "stockAndAreaNodeList")
    private List<StockAndPureChainNode> stockAndAreaNodeList;


    @Resource(name = "areaNodeList")
    private List<StockAndPureChainNode> areaNodeList;

    @Autowired
    private OrderPickingRepository orderPickingRepository;

    @Autowired
    private WmsApiProperties wmsApiProperties;

    @Autowired
    private CcbPayProvider ccbPayProvider;

    @Autowired
    private OrderCommonService orderCommonService;

    @Autowired
    private CompanyInfoQueryProvider companyInfoQueryProvider;

    @Autowired
    private EmployeeContractProvider employeeContractProvider;

    @Autowired
    private DoorPickConfigProvider doorPickConfigProvider;

    @Autowired
    private LocalTmsOrderService localTmsOrderService;

    /*@Autowired
    private LocalExpressOrderService localExpressOrderService;*/

    @Autowired
    private LocalTmsCarrierService localTmsCarrierService;



    /**
     * 新增文档
     * 专门用于数据新增服务,不允许数据修改的时候调用
     *
     * @param trade
     */
    @MongoRollback(persistence = Trade.class, operation = Operation.ADD)
    public void addTrade(Trade trade) {
        logger.info("TradeService.addTrade trade:{}", trade);
        tradeRepository.save(trade);
    }

    /**
     * 修改文档
     * 专门用于数据修改服务,不允许数据新增的时候调用
     *
     * @param trade
     */
    @MongoRollback(persistence = Trade.class, operation = Operation.UPDATE)
    public void updateTrade(Trade trade) {
        tradeRepository.save(trade);
    }

    /**
     * 删除文档
     *
     * @param tid
     */
    @MongoRollback(persistence = Trade.class, idExpress = "tid", operation = Operation.UPDATE)
    public void deleteTrade(String tid) {
        tradeRepository.deleteById(tid);
    }


    /**
     * 订单分页
     *
     * @param whereCriteria 条件
     * @param request       参数
     * @return
     */
    public Page<Trade> page(Criteria whereCriteria, TradeQueryRequest request) {
        long totalSize = this.countNum(whereCriteria, request);
        if (totalSize < 1) {
            return new PageImpl<>(new ArrayList<>(), request.getPageRequest(), totalSize);
        }
        request.putSort(request.getSortColumn(), request.getSortRole());
        Query query = new Query(whereCriteria);
        return new PageImpl<>(mongoTemplate.find(query.with(request.getPageRequest()), Trade.class), request
                .getPageable(), totalSize);
    }

    /**
     * @description  修改订单的打款凭证状态
     * @author  shiy
     * @date    2023/3/16 17:32
     * @params  [java.lang.String, java.lang.String]
     * @return  void
    */
    public void updateVoucherImagesFlagById(String tradeId, String refundVoucherImagesFlag) {
        mongoTemplate.updateFirst(new Query(Criteria.where("id").is(tradeId)), new Update().set("refundVoucherImagesFlag", refundVoucherImagesFlag), Trade.class);
    }

    public void updateVoucherImagesFlagByIdList(List<String> tradeIdList) {
        mongoTemplate.updateMulti(new Query(Criteria.where("id").in(tradeIdList)), new Update().set("refundVoucherImagesFlag", AbstractOrderConstant.YES_INT), Trade.class);
    }

    /**
     * 统计数量
     *
     * @param whereCriteria
     * @param request
     * @return
     */
    public long countNum(Criteria whereCriteria, TradeQueryRequest request) {
        request.putSort(request.getSortColumn(), request.getSortRole());
        Query query = new Query(whereCriteria);
        long totalSize = mongoTemplate.count(query, Trade.class);
        return totalSize;
    }


    /**
     * 根据流程状态时间查询订单
     *
     * @param endDate   endDate
     * @param flowState flowState
     * @return List<Trade>
     */
    public List<Trade> queryTradeByDate(LocalDateTime endDate, FlowState flowState, int PageNum, int pageSize) {
        Criteria criteria = new Criteria();

        criteria.andOperator(Criteria.where("tradeState.flowState").is(flowState.toValue())
                , Criteria.where("tradeState.deliverTime").lt(endDate)
                , Criteria.where("orderType").is(OrderType.NORMAL_ORDER.getOrderTypeId())
        );

        return mongoTemplate.find(
                new Query(criteria).skip(PageNum * pageSize).limit(pageSize)
                , Trade.class);
    }

    /**
     * 查询客户首笔完成的交易号
     *
     * @param customreId
     * @return
     */
    public String queryFirstCompleteTrade(String customreId) {
        Criteria criteria = new Criteria();

        criteria.andOperator(Criteria.where("tradeState.flowState").is(FlowState.COMPLETED.toValue()),
                Criteria.where("buyer.id").is(customreId));
        Query query = new Query(criteria);

        query.with(Sort.by(new Sort.Order(Sort.Direction.ASC, "tradeState.endTime"))).limit(1);

        List<Trade> tradeList = mongoTemplate.find((query), Trade.class);
        if (CollectionUtils.isNotEmpty(tradeList)) {
            return tradeList.get(0).getId();
        }

        return StringUtils.EMPTY;
    }

    /**
     * 根据流程状态时间查询总条数
     *
     * @param endDate
     * @param flowState
     * @return
     */
    public long countTradeByDate(LocalDateTime endDate, FlowState flowState) {
        Criteria criteria = new Criteria();

        criteria.andOperator(Criteria.where("tradeState.flowState").is(flowState.toValue())
                , Criteria.where("tradeState.deliverTime").lt(endDate)
                , Criteria.where("orderType").is(OrderType.NORMAL_ORDER.getOrderTypeId())
        );
        return mongoTemplate.count(new Query(criteria), Trade.class);
    }


    /**
     * C端下单
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> commit(TradeCommitRequest tradeCommitRequest) {
        // 验证用户
        CustomerVO customer = verifyService.verifyCustomer(tradeCommitRequest.getOperator().getUserId());
        tradeCommitRequest.setCustomer(customer);
        //验证并填充物流公司信息
        this.checkLogsitcCompanyInfo(tradeCommitRequest.getStoreCommitInfoList());

        Operator operator = tradeCommitRequest.getOperator();
        //查询mongo
        List<TradeItemGroup> tradeItemGroups = tradeItemService.find(customer.getCustomerId());
        // 如果为PC商城下单，将分销商品变为普通商品
        if (ChannelType.PC_MALL.equals(tradeCommitRequest.getDistributeChannel().getChannelType())) {
            tradeItemGroups.forEach(tradeItemGroup ->
                    tradeItemGroup.getTradeItems().forEach(tradeItem -> {
                        tradeItem.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
                    })
            );
        }
//todo 【暂时去掉拼团验证，后续有需要再放开】
        // 拼团订单--验证
        TradeGrouponCommitForm grouponForm = tradeItemGroups.get(NumberUtils.INTEGER_ZERO).getGrouponForm();
//        if (Objects.nonNull(grouponForm)) {
//            validGroupon(tradeCommitRequest, tradeItemGroups);
//        }


        // 1.验证失效的营销信息(目前包括失效的赠品、满系活动、优惠券)
        verifyService.verifyInvalidMarketings(tradeCommitRequest, tradeItemGroups, customer);

        // 2.按店铺包装多个订单信息、订单组信息
        List<Trade> trades = this.wrapperTradeList(tradeCommitRequest, tradeItemGroups);
        TradeGroup tradeGroup = this.wrapperTradeGroup(trades, tradeCommitRequest, grouponForm);

        //满订单优惠
        this.orderMarketing(trades);

        //  重新计算订单运费
        this.computers(trades, grouponForm);

        // 处理积分抵扣
        this.dealPoints(trades, tradeCommitRequest);

        //组合支付金额计算
//        combinationOfPay(trades,customer.getCustomerId());

        // 3.批量提交订单
        List<TradeCommitResult> successResults;
        if (tradeGroup != null) {
            successResults = this.createBatchWithGroup(trades, tradeGroup, operator);
        } else {
            successResults = this.createBatch(trades, operator);
        }

        try {
            // 4.订单提交成功，删除关联的采购单商品
            trades.forEach(
                    trade -> {
                        List<String> tradeSkuIds =
                                trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
                        deleteShopCartOrder(customer.getCustomerId(), tradeSkuIds,
                                tradeCommitRequest.getDistributeChannel(), tradeCommitRequest.getWareId());

                        //设置为套装订单
                        if (Objects.nonNull(trade.getTradeMarketings()) && CollectionUtils.isNotEmpty(trade.getTradeMarketings())) {
                            List<Long> marketingIds = trade.getTradeMarketings().stream().map(m -> m.getMarketingId()).collect(Collectors.toList());

                            MarketingQueryByIdsRequest marketingQueryByIdsRequest = new MarketingQueryByIdsRequest();
                            marketingQueryByIdsRequest.setMarketingIds(marketingIds);
                            List<MarketingVO> marketingVOList = marketingQueryProvider.getSuitByMarketingIds(marketingQueryByIdsRequest).getContext();
                            if (CollectionUtils.isNotEmpty(marketingVOList)
                                    && Objects.nonNull(trade.getSuitBuyCount())
                                    && trade.getSuitBuyCount() > 0) {
                                //套装订单
                                suitOrderTempService.addSuitOrderTemp(SuitOrderTempAddRequest.builder()
                                        .orderCode(trade.getId())
                                        .customerId(trade.getBuyer().getId())
                                        .suitBuyNum(trade.getSuitBuyCount())
                                        .marketingId(trade.getMarketingId())
                                        .build());
                            }
                        } else if (Objects.nonNull(trade.getSuitBuyCount()) && trade.getSuitBuyCount() > 0) {
                            suitOrderTempService.addSuitOrderTemp(SuitOrderTempAddRequest.builder()
                                    .orderCode(trade.getId())
                                    .customerId(trade.getBuyer().getId())
                                    .suitBuyNum(trade.getSuitBuyCount())
                                    .marketingId(trade.getMarketingId())
                                    .build());
                        }
                    }
            );
            // 5.订单提交成功，删除订单商品快照
            tradeItemService.remove(customer.getCustomerId());
        } catch (Exception e) {
            log.error("Delete the trade sku list snapshot or the purchase order exception," +
                            "trades={}," +
                            "customer={}",
                    JSONObject.toJSONString(trades),
                    customer,
                    e
            );
        }
        return successResults;
    }


    /**
     * C端下单 拆箱
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> devanningCommit(TradeCommitRequest tradeCommitRequest) {
        // 验证用户
        CustomerVO customer = verifyService.verifyCustomer(tradeCommitRequest.getOperator().getUserId());
        tradeCommitRequest.setCustomer(customer);
        //验证并填充物流公司信息
        this.checkLogsitcCompanyInfo(tradeCommitRequest.getStoreCommitInfoList());

        Operator operator = tradeCommitRequest.getOperator();
        //查询mongo
        List<TradeItemGroup> tradeItemGroups = tradeItemService.find(customer.getCustomerId());
        // 如果为PC商城下单，将分销商品变为普通商品
        if (ChannelType.PC_MALL.equals(tradeCommitRequest.getDistributeChannel().getChannelType())) {
            tradeItemGroups.forEach(tradeItemGroup ->
                    tradeItemGroup.getTradeItems().forEach(tradeItem -> {
                        tradeItem.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
                    })
            );
        }
//todo 【暂时去掉拼团验证，后续有需要再放开】
        // 拼团订单--验证
        TradeGrouponCommitForm grouponForm = tradeItemGroups.get(NumberUtils.INTEGER_ZERO).getGrouponForm();
//        if (Objects.nonNull(grouponForm)) {
//            validGroupon(tradeCommitRequest, tradeItemGroups);
//        }


        // 1.验证失效的营销信息(目前包括失效的赠品、满系活动、优惠券)
        verifyService.verifyInvalidMarketings(tradeCommitRequest, tradeItemGroups, customer);

        // 2.按店铺包装多个订单信息、订单组信息
        List<Trade> trades = this.wrapperTradeListDevanning(tradeCommitRequest, tradeItemGroups);
        TradeGroup tradeGroup = this.wrapperTradeGroup(trades, tradeCommitRequest, grouponForm);

        //满订单优惠
        this.orderMarketing(trades);

        //  重新计算订单运费
        this.computers(trades, grouponForm);

        // 处理积分抵扣
        this.dealPoints(trades, tradeCommitRequest);

        //组合支付金额计算
//        combinationOfPay(trades,customer.getCustomerId());

        // 3.批量提交订单
        List<TradeCommitResult> successResults;
        if (tradeGroup != null) {
            successResults = this.createBatchWithGroup(trades, tradeGroup, operator);
        } else {
            successResults = this.createBatch(trades, operator);
        }

        try {
            // 4.订单提交成功，删除关联的采购单商品
            trades.forEach(
                    trade -> {
                        List<String> tradeSkuIds =
                                trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
                        deleteShopCartOrder(customer.getCustomerId(), tradeSkuIds,
                                tradeCommitRequest.getDistributeChannel(), tradeCommitRequest.getWareId());

                        //设置为套装订单
                        if (Objects.nonNull(trade.getTradeMarketings()) && CollectionUtils.isNotEmpty(trade.getTradeMarketings())) {
                            List<Long> marketingIds = trade.getTradeMarketings().stream().map(m -> m.getMarketingId()).collect(Collectors.toList());

                            MarketingQueryByIdsRequest marketingQueryByIdsRequest = new MarketingQueryByIdsRequest();
                            marketingQueryByIdsRequest.setMarketingIds(marketingIds);
                            List<MarketingVO> marketingVOList = marketingQueryProvider.getSuitByMarketingIds(marketingQueryByIdsRequest).getContext();
                            if (CollectionUtils.isNotEmpty(marketingVOList)
                                    && Objects.nonNull(trade.getSuitBuyCount())
                                    && trade.getSuitBuyCount() > 0) {
                                //套装订单
                                suitOrderTempService.addSuitOrderTemp(SuitOrderTempAddRequest.builder()
                                        .orderCode(trade.getId())
                                        .customerId(trade.getBuyer().getId())
                                        .suitBuyNum(trade.getSuitBuyCount())
                                        .marketingId(trade.getMarketingId())
                                        .build());
                            }
                        } else if (Objects.nonNull(trade.getSuitBuyCount()) && trade.getSuitBuyCount() > 0) {
                            suitOrderTempService.addSuitOrderTemp(SuitOrderTempAddRequest.builder()
                                    .orderCode(trade.getId())
                                    .customerId(trade.getBuyer().getId())
                                    .suitBuyNum(trade.getSuitBuyCount())
                                    .marketingId(trade.getMarketingId())
                                    .build());
                        }
                    }
            );
            // 5.订单提交成功，删除订单商品快照
            tradeItemService.remove(customer.getCustomerId());
        } catch (Exception e) {
            log.error("Delete the trade sku list snapshot or the purchase order exception," +
                            "trades={}," +
                            "customer={}",
                    JSONObject.toJSONString(trades),
                    customer,
                    e
            );
        }
        return successResults;
    }

    /**
     * C端下单（批发+零售）
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> commitAll(TradeCommitRequest tradeCommitRequest) {
        // 验证用户
        CustomerVO customer = verifyService.verifyCustomer(tradeCommitRequest.getOperator().getUserId());
        tradeCommitRequest.setCustomer(customer);
        //验证并填充物流公司信息
        this.checkLogsitcCompanyInfo(tradeCommitRequest.getStoreCommitInfoList());

        Operator operator = tradeCommitRequest.getOperator();
        //查询mongo
        List<TradeItemGroup> tradeItemGroups = tradeItemService.findAll(customer.getCustomerId());
        // 如果为PC商城下单，将分销商品变为普通商品
        if (ChannelType.PC_MALL.equals(tradeCommitRequest.getDistributeChannel().getChannelType())) {
            tradeItemGroups.forEach(tradeItemGroup ->
                    tradeItemGroup.getTradeItems().forEach(tradeItem -> {
                        tradeItem.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
                    })
            );
        }

        // 拼团订单--验证
        TradeGrouponCommitForm grouponForm = tradeItemGroups.get(NumberUtils.INTEGER_ZERO).getGrouponForm();
        if (Objects.nonNull(grouponForm)) {
            this.validGroupon(tradeCommitRequest, tradeItemGroups);
        }


        // 1.验证失效的营销信息(目前包括失效的赠品、满系活动、优惠券)
        verifyService.verifyInvalidMarketings(tradeCommitRequest, tradeItemGroups, customer);

        // 2.按店铺包装多个订单信息、订单组信息
        List<Trade> trades = this.wrapperTradeList(tradeCommitRequest, tradeItemGroups);
        TradeGroup tradeGroup = this.wrapperTradeGroup(trades, tradeCommitRequest, grouponForm);

        //满订单优惠
        this.orderMarketing(trades);

        //  重新计算订单运费
        this.computers(trades, grouponForm);

        // 处理积分抵扣
        this.dealPoints(trades, tradeCommitRequest);

        //计算包装费
        this.calPacking(trades);

        //组合支付金额计算
//        combinationOfPay(trades,customer.getCustomerId());

        // 3.批量提交订单
        List<TradeCommitResult> successResults;
        if (tradeGroup != null) {
            successResults = this.createBatchWithGroup(trades, tradeGroup, operator);
        } else {
            successResults = this.createBatch(trades, operator);
        }

        try {
            // 4.订单提交成功，删除关联的采购单商品
            trades.forEach(
                    trade -> {
                        List<String> tradeSkuIds =
                                trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
                        if (SaleType.RETAIL.equals(trade.getSaleType())) { //零售
                            deleteRetailShopCartOrder(customer.getCustomerId(), tradeSkuIds,
                                    tradeCommitRequest.getDistributeChannel(), tradeCommitRequest.getWareId());
                        } else { //批发
                            deleteShopCartOrder(customer.getCustomerId(), tradeSkuIds,
                                    tradeCommitRequest.getDistributeChannel(), tradeCommitRequest.getWareId());
                        }

                        //设置为套装订单
                        if (Objects.nonNull(trade.getTradeMarketings()) && CollectionUtils.isNotEmpty(trade.getTradeMarketings())) {
                            List<Long> marketingIds = trade.getTradeMarketings().stream().map(m -> m.getMarketingId()).collect(Collectors.toList());

                            MarketingQueryByIdsRequest marketingQueryByIdsRequest = new MarketingQueryByIdsRequest();
                            marketingQueryByIdsRequest.setMarketingIds(marketingIds);
                            List<MarketingVO> marketingVOList = marketingQueryProvider.getSuitByMarketingIds(marketingQueryByIdsRequest).getContext();
                            if (CollectionUtils.isNotEmpty(marketingVOList)
                                    && Objects.nonNull(trade.getSuitBuyCount())
                                    && trade.getSuitBuyCount() > 0) {
                                //套装订单
                                suitOrderTempService.addSuitOrderTemp(SuitOrderTempAddRequest.builder()
                                        .orderCode(trade.getId())
                                        .customerId(trade.getBuyer().getId())
                                        .suitBuyNum(trade.getSuitBuyCount())
                                        .marketingId(trade.getMarketingId())
                                        .build());
                            }
                        } else if (Objects.nonNull(trade.getSuitBuyCount()) && trade.getSuitBuyCount() > 0) {
                            suitOrderTempService.addSuitOrderTemp(SuitOrderTempAddRequest.builder()
                                    .orderCode(trade.getId())
                                    .customerId(trade.getBuyer().getId())
                                    .suitBuyNum(trade.getSuitBuyCount())
                                    .marketingId(trade.getMarketingId())
                                    .build());
                        }
                    }
            );
            // 5.订单提交成功，删除订单商品快照
            tradeItemService.remove(customer.getCustomerId());
        } catch (Exception e) {
            log.error("Delete the trade sku list snapshot or the purchase order exception," +
                            "trades={}," +
                            "customer={}",
                    JSONObject.toJSONString(trades),
                    customer,
                    e
            );
        }
        return successResults;
    }


    /**
     * C端下单（批发+零售+拆箱）
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> devanningcommitAll(TradeCommitRequest tradeCommitRequest) {
        StopWatch stopWatch = new StopWatch();
        // 验证用户
        stopWatch.start("验证用户占比");
        CustomerVO customer = verifyService.verifyCustomer(tradeCommitRequest.getOperator().getUserId());
        stopWatch.stop();
        tradeCommitRequest.setCustomer(customer);
        stopWatch.start("验证用户钱包占比");
        CusWalletVO cusWalletVO = checkoutWallet(tradeCommitRequest, customer);
        stopWatch.stop();
        //验证并填充物流公司信息
        stopWatch.start("填充物流公司信息时间占比");
        this.checkLogsitcCompanyInfo(tradeCommitRequest.getStoreCommitInfoList());
        stopWatch.stop();
        Long wareId = tradeCommitRequest.getWareId();

        Operator operator = tradeCommitRequest.getOperator();
        //查询mongo
        stopWatch.start("查询mogo数据");
        List<TradeItemGroup> tradeItemGroups = tradeItemService.findAll(customer.getCustomerId());
        // 如果为PC商城下单，将分销商品变为普通商品
        if (ChannelType.PC_MALL.equals(tradeCommitRequest.getDistributeChannel().getChannelType())) {
            tradeItemGroups.forEach(tradeItemGroup ->
                    tradeItemGroup.getTradeItems().forEach(tradeItem -> {
                        tradeItem.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
                    })
            );
        }
        stopWatch.stop();
        stopWatch.start("检查库存和区域限购");
        checkStockAndPure(tradeCommitRequest, tradeItemGroups);
        stopWatch.stop();

        // 拼团订单--验证
        TradeGrouponCommitForm grouponForm = tradeItemGroups.get(NumberUtils.INTEGER_ZERO).getGrouponForm();
        if (Objects.nonNull(grouponForm)) {
            this.validGroupon(tradeCommitRequest, tradeItemGroups);
        }

        stopWatch.start("检查营销活动");
        // 1.验证失效的营销信息(目前包括失效的赠品、满系活动、优惠券)
        verifyService.verifyInvalidMarketings(tradeCommitRequest, tradeItemGroups, customer);
        stopWatch.stop();
        // 2.按店铺包装多个订单信息、订单组信息
        stopWatch.start("封装订单");
        List<Trade> trades = this.wrapperTradeListDevanning(tradeCommitRequest, tradeItemGroups);
        stopWatch.stop();
        stopWatch.start("构建优惠券信息");
        //TODO 这里的代码可以去除
        TradeGroup tradeGroup = this.wrapperTradeGroup(trades, tradeCommitRequest, grouponForm);
        stopWatch.stop();
        //满订单优惠
        stopWatch.start("计算营销");
        //TODO 这里的代码可以去除
        this.orderMarketing(trades);
        stopWatch.stop();
        stopWatch.start("赠品限数判断以及库存判断");
        //赠品限数判断以及库存判断
        trades.forEach(v -> {
            this.verifyGiftLimitedAndStock(v.getGifts(), tradeItemGroups);
        });
        stopWatch.stop();
        stopWatch.start("计算订单运费");
        //  重新计算订单运费 //TODO 在查询快照接口其实算了运费这里可以考虑去除
        this.computers(trades, grouponForm);
        stopWatch.stop();
        // 处理积分抵扣 TODO 这里可以去除
//        this.dealPoints(trades, tradeCommitRequest);

        //计算包装费
        this.calPacking(trades);

        //组合支付金额计算
//        combinationOfPay(trades,customer.getCustomerId());

        //使用余额, 重新计算应付金额
        useWalletSecondEdition(trades, tradeCommitRequest, cusWalletVO);
        stopWatch.start("生成订单");
        // 3.批量提交订单
        List<TradeCommitResult> successResults;
        if (tradeGroup != null) {
            successResults = this.createBatchWithGroup(trades, tradeGroup, operator);
        } else {
            successResults = this.createBatch(trades, operator);
        }
        stopWatch.stop();

        stopWatch.start("删除购物车删除快照");
        deleteShopCart(tradeCommitRequest, customer, wareId, trades);
        stopWatch.stop();
        log.info(stopWatch.prettyPrint());
        return successResults;
    }

    public CusWalletVO checkoutWallet(TradeCommitRequest tradeCommitRequest, CustomerVO customer) {
        BigDecimal walletBalance = Optional.ofNullable(tradeCommitRequest).map(TradeCommitRequest::getWalletBalance).orElse(BigDecimal.ZERO);
        //校验
        if (!(walletBalance.compareTo(BigDecimal.ZERO) > 0)) {
            return null;
        }
        //用户余额信息
        CusWalletVO cusWalletVO = walletQueryProvider.getBalanceByCustomerId(WalletByCustomerIdQueryRequest.builder().customerId(customer.getCustomerId()).build())
                .getContext().getCusWalletVO();
        if (cusWalletVO == null || !(cusWalletVO.getBalance().compareTo(BigDecimal.ZERO) > 0) || tradeCommitRequest.getWalletBalance().compareTo(cusWalletVO.getBalance()) > 0) {
            throw new SbcRuntimeException("没有可用余额, 请重新检查");
        }
        return cusWalletVO;
    }

    /**
     * 使用余额扣减订单
     *
     * @param trades
     * @param tradeCommitRequest
     * @param customer
     * @param cusWalletVO
     */
    public void useWallet(List<Trade> trades, TradeCommitRequest tradeCommitRequest, CustomerVO customer, CusWalletVO cusWalletVO) {
        //校验
        if (tradeCommitRequest.getWalletBalance() == null || !(tradeCommitRequest.getWalletBalance().compareTo(BigDecimal.ZERO) > 0)) {
            return;
        }
        //可用余额
        BigDecimal balance = cusWalletVO.getBalance();

        //运费问题: 如果有运费, 则商品应付金额可以用余额全部抵扣, 如果没有运费, 则商品应付金额应该保留1元, 其他用余额抵扣均摊
        //订单是否存在运费
        boolean booleanBeliveryPrice = trades.stream().anyMatch(trade -> trade.getTradePrice().getDeliveryPrice().compareTo(BigDecimal.ZERO) == 1);

        //===============================先抵扣商品总价
        //1 需要余额扣减的订单商品
        List<TradeItem> collect = trades.stream().flatMap(trade -> trade.getTradeItems().stream()).collect(Collectors.toList());
        log.info("================ trades ================:{}", JSONObject.toJSONString(trades));

        //最低商品支付金额(使用bNum)
        //Long totalNum = collect.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
        BigDecimal reduce = collect.stream().map(TradeItem::getBNum).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal bottomPrice = new BigDecimal("0.02").multiply(reduce);

        //2 订单商品总价
        BigDecimal total = tradeItemService.calcSkusTotalPrice(collect);
        //2.1 新 订单商品总价 (没有加运费)
        BigDecimal newTotal = total.subtract(bottomPrice).compareTo(balance) > 0 ? total.subtract(balance) : bottomPrice;
        //此次扣减的余额
        BigDecimal deductionTotal = total.subtract(newTotal);
        //剩余余额
        BigDecimal residueBalance = balance.subtract(deductionTotal);
        log.info("================ total:{}   newTotal:{}   deductionTotal:{}"
                , JSONObject.toJSONString(total), JSONObject.toJSONString(newTotal), JSONObject.toJSONString(deductionTotal));

        //设置余额结算信息
        setWalletSettlement(trades, collect, total, newTotal);


        /*//3 设置关联商品的结算信息
        for (TradeItem tradeItem : collect) {
            tradeItem.getWalletSettlements().add(
                    TradeItem.WalletSettlement.builder().reduceWalletPrice(BigDecimal.ZERO).splitPrice(tradeItem.getSplitPrice()).build()
            );
        }

        //4 设置关联商品的均摊价格 (已修改均摊价格)
        tradeItemService.calcSplitPrice(collect, newTotal, total);

        //5 刷新关联商品的结算信息
        for (TradeItem tradeItem : collect) {
            TradeItem.WalletSettlement walletSettlement = tradeItem.getWalletSettlements().get(tradeItem.getWalletSettlements().size() - 1);
            walletSettlement.setReduceWalletPrice(walletSettlement.getSplitPrice().subtract(tradeItem.getSplitPrice()));
            walletSettlement.setSplitPrice(tradeItem.getSplitPrice());
        }

        //===============================再抵扣包装费用(不可以抵扣包装费用)
        //addBalancePackingPrice(trades, residueBalance);

        //6 按照店铺分组被均摊的商品, 刷新相应的订单的价格信息
        Map<Long, List<TradeItem>> itemsMap = collect.stream().collect(Collectors.groupingBy(TradeItem::getStoreId));

        for (Long storeIdKey : itemsMap.keySet()) {
            //找到店铺对应订单的价格信息
            Trade trade = trades.stream().filter(t -> t.getSupplier().getStoreId().equals(storeIdKey)).findFirst().orElse(null);
            List<TradeItem> tradeItems = itemsMap.get(storeIdKey);
            //订单金额, (余额暂未修改)
            TradePrice tradePrice = trade.getTradePrice();

            //设置余额扣减金额
            //tradePrice.setBalancePrice(deductionTotal);
            BigDecimal sumReduceWalletPrice = tradeItems
                    .stream().flatMap(tradeItem -> tradeItem.getWalletSettlements().stream()).collect(Collectors.toList())
                    .stream().map(TradeItem.WalletSettlement::getReduceWalletPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
            tradePrice.setBalancePrice(sumReduceWalletPrice);

            //商品集合的均摊总价
            BigDecimal couponTotalPrice = tradeItemService.calcSkusTotalPrice(itemsMap.get(storeIdKey));
            //重设订单总价(并追加配送费用)(并追加包装费用)
            //tradePrice.setTotalPrice(couponTotalPrice);
            //tradePrice.setOriginPrice(tradePrice.getGoodsPrice());
            tradePrice.setTotalPrice(couponTotalPrice.add(tradePrice.getDeliveryPrice()).add(tradePrice.getPackingPrice()));

            trade.getTradeItems().forEach(tradeItem -> {
                TradeItem matchItem = collect.stream().filter(item -> item.getSkuId().equals(tradeItem.getSkuId())).findFirst().orElse(null);
                if (Objects.nonNull(tradeItem.getDevanningId())) {
                    matchItem = collect.stream().filter(item -> item.getDevanningId().equals(tradeItem.getDevanningId())).findFirst().orElse(null);
                }
                if (matchItem != null) {
                    tradeItem.setSplitPrice(matchItem.getSplitPrice());
                }
            });
        }
        log.info("================ trades ================:{}", JSONObject.toJSONString(trades));*/
    }

    /**
     * 使用余额扣减订单-第二版
     *
     * @param trades
     * @param tradeCommitRequest
     * @param cusWalletVO
     */
    public List<Trade> useWalletSecondEdition(List<Trade> trades, TradeCommitRequest tradeCommitRequest, CusWalletVO cusWalletVO) {
        //校验
//        if (tradeCommitRequest.getWalletBalance() == null || !(tradeCommitRequest.getWalletBalance().compareTo(BigDecimal.ZERO) > 0)) {
//            return;
//        }
        if (tradeCommitRequest.getWalletBalance() == null || !(tradeCommitRequest.getWalletBalance().compareTo(BigDecimal.ZERO) > 0)) {
            return trades;
        }
//        if (tradeCommitRequest.getWalletBalance().compareTo(BigDecimal.ZERO) > 0) {
//            throw new SbcRuntimeException("K-000099", "鲸币暂停使用，请关闭使用鲸币选项，请联系客服！！！");
//        }

        //可用余额
        BigDecimal balance = cusWalletVO.getBalance();

        //运费问题: 如果有运费, 则商品应付金额可以用余额全部抵扣, 如果没有运费, 则商品应付金额应该保留1元, 其他用余额抵扣均摊
        //订单是否存在运费
        boolean booleanBeliveryPrice = trades.stream().anyMatch(trade -> trade.getTradePrice().getDeliveryPrice().compareTo(BigDecimal.ZERO) == 1);

        //===============================先抵扣商品总价
        //1 需要余额扣减的订单商品
        List<TradeItem> allTradeItems = trades.stream().flatMap(trade -> trade.getTradeItems().stream()).collect(Collectors.toList());
        log.info("================ trades ================:{}", JSONObject.toJSONString(trades));

        //最低商品支付金额(使用bNum)
        //Long totalNum = collect.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
        BigDecimal totalBNum = allTradeItems.stream().map(TradeItem::getBNum).reduce(BigDecimal.ZERO, BigDecimal::add);
        //最小应付金额
        BigDecimal bottomPrice = new BigDecimal("0.02").multiply(totalBNum).setScale(2, BigDecimal.ROUND_DOWN);

        //2 订单商品总价
        BigDecimal allTradePrice = tradeItemService.calcSkusTotalPrice(allTradeItems);
        //2.1 新 订单商品总价 (没有加运费)
        BigDecimal afterDeductAllTradePrice = allTradePrice.subtract(bottomPrice).compareTo(balance) > 0 ? allTradePrice.subtract(balance) : bottomPrice;
        //此次扣减的余额
        BigDecimal allTradeDeductPrice = allTradePrice.subtract(afterDeductAllTradePrice);
        //剩余余额
        BigDecimal residueBalance = balance.subtract(allTradeDeductPrice);
        log.info("================ total:{}   newTotal:{}   deductionTotal:{}"
                , JSONObject.toJSONString(allTradePrice), JSONObject.toJSONString(afterDeductAllTradePrice), JSONObject.toJSONString(allTradeDeductPrice));

        //未抵扣鲸贴, 直接返回
        if (allTradeDeductPrice.compareTo(BigDecimal.ZERO) <= 0) {
            return trades;
        }

        // 排序
        trades = trades.stream()
                .sorted(Comparator.comparing(trade -> trade.getTradePrice().getGoodsPrice()))
                .collect(Collectors.toList());

        BigDecimal splitPriceTotal = BigDecimal.ZERO;//累积现金平摊价，将剩余扣给最后一个元素
        for (int i = 0; i < trades.size(); i++) {
            //A.1需要扣减的订单
            Trade trade = trades.get(i);
            List<TradeItem> tradeItems = trade.getTradeItems();

            //A.2 此订单商品总价
            BigDecimal totalPrice = tradeItemService.calcSkusTotalPrice(tradeItems);

            //A.3新 此订单商品总价
            BigDecimal afterDeductTradePrice = totalPrice.divide(allTradePrice, 10, BigDecimal.ROUND_DOWN).multiply(afterDeductAllTradePrice).setScale(2, BigDecimal.ROUND_DOWN);
            //A.4此 最低商品支付金额(使用bNum)
            //Long totalNum = collect.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            BigDecimal tradeBNum = tradeItems.stream().map(TradeItem::getBNum).reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal tradeBottomPrice = new BigDecimal("0.02").multiply(tradeBNum).setScale(2, BigDecimal.ROUND_DOWN);
            //A.5需要满足此订单商品最小金额准则(商品数量*0.02)
            afterDeductTradePrice = (afterDeductTradePrice.compareTo(tradeBottomPrice) < 0) ? tradeBottomPrice : afterDeductTradePrice;

            if (i == trades.size() - 1) {
                afterDeductTradePrice = afterDeductAllTradePrice.subtract(splitPriceTotal);
            } else {
                splitPriceTotal = splitPriceTotal.add(afterDeductTradePrice);
            }

            setWalletSettlement(Stream.of(trade).collect(Collectors.toList()), tradeItems, totalPrice, afterDeductTradePrice);
        }
        return trades;
    }

    /**
     * 设置余额结算信息
     *
     * @param trades
     * @param tradeItems
     * @param total 商品总价
     * @param afterDeductTradePrice 抵扣鲸币后价格
     */
    private void setWalletSettlement(List<Trade> trades, List<TradeItem> tradeItems, BigDecimal total, BigDecimal afterDeductTradePrice) {
        //FOR UNIT TEST
//        trades.forEach(trade -> trade.getTradeItems()
//                .forEach(item -> item.setWalletSettlements(new ArrayList<>()))
//        );

        //3 设置关联商品的结算信息
        for (TradeItem tradeItem : tradeItems) {
            tradeItem.getWalletSettlements().add(
                    TradeItem.WalletSettlement.builder().reduceWalletPrice(BigDecimal.ZERO).splitPrice(tradeItem.getSplitPrice()).build()
            );
        }

        //4 设置关联商品的均摊价格 (已修改均摊价格)
        tradeItemService.calcSplitPriceMinimumAmount(tradeItems, afterDeductTradePrice, total);
        //5 刷新关联商品的结算信息
        for (TradeItem tradeItem : tradeItems) {
            TradeItem.WalletSettlement walletSettlement = tradeItem.getWalletSettlements().get(tradeItem.getWalletSettlements().size() - 1);
            walletSettlement.setReduceWalletPrice(walletSettlement.getSplitPrice().subtract(tradeItem.getSplitPrice()));
            walletSettlement.setSplitPrice(tradeItem.getSplitPrice());
        }

        //===============================再抵扣包装费用(不可以抵扣包装费用)
        //addBalancePackingPrice(trades, residueBalance);

        //6 按照店铺分组被均摊的商品, 刷新相应的订单的价格信息
        Map<Long, List<TradeItem>> itemsMap = tradeItems.stream().collect(Collectors.groupingBy(TradeItem::getStoreId));

        for (Long storeIdKey : itemsMap.keySet()) {
            //找到店铺对应订单的价格信息
            Trade trade = trades.stream().filter(t -> t.getSupplier().getStoreId().equals(storeIdKey)).findFirst().orElse(null);
            List<TradeItem> tradeItemsTem = itemsMap.get(storeIdKey);
            //订单金额, (余额暂未修改)
            TradePrice tradePrice = trade.getTradePrice();

            //设置余额扣减金额
            //tradePrice.setBalancePrice(deductionTotal);
            BigDecimal sumReduceWalletPrice = tradeItemsTem
                    .stream().flatMap(tradeItem -> tradeItem.getWalletSettlements().stream()).collect(Collectors.toList())
                    .stream().map(TradeItem.WalletSettlement::getReduceWalletPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
            tradePrice.setBalancePrice(sumReduceWalletPrice);

            //商品集合的均摊总价
            BigDecimal couponTotalPrice = tradeItemService.calcSkusTotalPrice(itemsMap.get(storeIdKey));
            //重设订单总价(并追加配送费用)(追加包装费用)
            //tradePrice.setTotalPrice(couponTotalPrice);
            //tradePrice.setOriginPrice(tradePrice.getGoodsPrice());
            tradePrice.setTotalPrice(couponTotalPrice.add(tradePrice.getDeliveryPrice()).add(tradePrice.getPackingPrice()));

            trade.getTradeItems().forEach(tradeItem -> {
                TradeItem matchItem = tradeItems.stream().filter(item -> item.getSkuId().equals(tradeItem.getSkuId())).findFirst().orElse(null);
                if (Objects.nonNull(tradeItem.getDevanningId())) {
                    matchItem = tradeItems.stream().filter(item -> item.getDevanningId().equals(tradeItem.getDevanningId())).findFirst().orElse(null);
                }
                if (matchItem != null) {
                    tradeItem.setSplitPrice(matchItem.getSplitPrice());
                }
            });
        }
        log.info("================ trades ================:{}", JSONObject.toJSONString(trades));
    }

    /**
     * 添加被抵扣的包装费用(只有散批存在包装费用)
     *
     * @param trades
     * @param residueBalance
     */
    private void addBalancePackingPrice(List<Trade> trades, BigDecimal residueBalance) {
        List<Trade> tradeContainPackingPriceCollect = trades.stream().filter(trade -> Objects.nonNull(trade.getSaleType()) && SaleType.RETAIL.equals(trade.getSaleType())).collect(Collectors.toList());

        if (CollectionUtils.isNotEmpty(tradeContainPackingPriceCollect)) {
            //包装费用总价
            BigDecimal packingPrice = tradeContainPackingPriceCollect.stream().map(Trade::getTradePrice).collect(Collectors.toList()).stream().map(TradePrice::getPackingPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
            //能够抵扣的商品包装费用总价
            packingPrice = residueBalance.compareTo(packingPrice) >= 0 ? packingPrice : residueBalance;
            if (packingPrice.compareTo(BigDecimal.ZERO) <= 0) {
                return;
            }

            //均摊包装费用
            BigDecimal divide1 = BigDecimal.ONE.divide(new BigDecimal(tradeContainPackingPriceCollect.size()), 10, BigDecimal.ROUND_DOWN);
            BigDecimal splitPricePackingPrice = divide1.multiply(packingPrice).setScale(2, BigDecimal.ROUND_HALF_UP);
            BigDecimal splitPricePackingPriceLast = packingPrice.subtract(splitPricePackingPrice.multiply(new BigDecimal(tradeContainPackingPriceCollect.size() - 1)));

            for (int i = 0; i < tradeContainPackingPriceCollect.size(); i++) {
                Trade trade = tradeContainPackingPriceCollect.get(i);
                //包装费用
                BigDecimal splitPricePackingPriceTem = (i == tradeContainPackingPriceCollect.size() - 1) ? splitPricePackingPriceLast : splitPricePackingPrice;

                //此次需要鲸贴抵扣包装费用的订单商品
                List<TradeItem> tradeItems = trade.getTradeItems();
                Long totalNum = tradeItems.stream().map(tradeItem -> tradeItem.getNum()).reduce(0L, Long::sum);
                //累积平摊价，将剩余扣给最后一个元素
                BigDecimal splitPriceTotal = BigDecimal.ZERO;

                //抵扣鲸贴添加包装费用
                for (int j = 0; j < tradeItems.size(); j++) {
                    TradeItem tradeItem = tradeItems.get(j);
                    TradeItem.WalletSettlement walletSettlement = tradeItem.getWalletSettlements().get(0);

                    if (j == tradeItems.size() - 1) {
                        walletSettlement.setReduceWalletPrice(walletSettlement.getReduceWalletPrice().add(splitPricePackingPriceTem.subtract(splitPriceTotal)));
                    } else {
                        BigDecimal divide = (new BigDecimal(tradeItem.getNum())).divide(new BigDecimal(totalNum), 10, BigDecimal.ROUND_DOWN);
                        BigDecimal splitPricePackingPriceTradeItem = splitPricePackingPriceTem.multiply(divide).setScale(2, BigDecimal.ROUND_HALF_UP);

                        walletSettlement.setReduceWalletPrice(walletSettlement.getReduceWalletPrice().add(splitPricePackingPriceTradeItem));
                        splitPriceTotal = splitPriceTotal.add(splitPricePackingPriceTradeItem);
                    }
                }
            }

        }
    }

    private void checkStockAndPure(TradeCommitRequest tradeCommitRequest, List<TradeItemGroup> tradeItemGroups) {
        List<String> skuslist = new LinkedList<>();
        //校验库存有效性
        tradeItemGroups.forEach(v -> {
            skuslist.addAll(v.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList()));
        });

        GoodsWareStockListResponse context = goodsWareStockQueryProvider.getGoodsWareStockByGoodsInfoIds(GoodsWareStockByGoodsForIdsRequest
                .builder().goodsForIdList(skuslist).build()).getContext();
        List<GoodsWareStockVO> stockVOList = context.getGoodsWareStockVOList();
        Map<String, List<GoodsWareStockVO>> groupVoListMap = IteratorUtils.groupBy(stockVOList, GoodsWareStockVO::getGoodsInfoId);
        //新库存
        Map<String, BigDecimal> collect2 = stockVOList.stream().collect(Collectors.toMap(GoodsWareStockVO::getGoodsInfoId, GoodsWareStockVO::getStock, (a, b) -> a));
        //原库存
        Map<String, BigDecimal> collect2_selfStock = stockVOList.stream().collect(Collectors.toMap(GoodsWareStockVO::getGoodsInfoId, GoodsWareStockVO::getSelfStock, (a, b) -> a));
        //汇总整箱SKU数量
        Map<String, BigDecimal> collectWholeSale = stockVOList.stream().filter(m->SaleType.WHOLESALE.equals(m.getSaleType()))
                .collect(Collectors.toMap(GoodsWareStockVO::getGoodsInfoId, GoodsWareStockVO::getStock, (a, b) -> a));

//        Map<String, BigDecimal> collect = historyTownShipOrderService.getskusstock(skuslist).stream()
//                .collect(Collectors.toMap(TrueStock::getSkuid, TrueStock::getStock, (a, b) -> a));
//        Map<String, BigDecimal> collectlingshou = historyTownShipOrderService.getskusstocklingshou(skuslist)
//                .stream().collect(Collectors.toMap(TrueStock::getSkuid, TrueStock::getStock, (a, b) -> a));
//        Map<String, BigDecimal> collectForBulk= historyTownShipOrderService.getskusstockbybulk(skuslist)
//                .stream().collect(Collectors.toMap(TrueStock::getSkuid, TrueStock::getStock, (a, b) -> a));


        tradeItemGroups.forEach(c -> {
            if (c.getSaleType().equals(SaleType.RETAIL)) {
                c.getTradeItems().forEach(q -> {
                    if (BigDecimal.valueOf(q.getNum())
                            .multiply(Objects.isNull(q.getDivisorFlag()) ? BigDecimal.ONE : q.getDivisorFlag())
                            .compareTo(collect2.getOrDefault(q.getSkuId(), BigDecimal.ZERO)) > 0) {
                        throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
                    }
                });
            } else if (c.getSaleType().equals(SaleType.BULK)){
                c.getTradeItems().forEach(q -> {
                    checkBulkSkuStock(tradeItemGroups, groupVoListMap, collect2, collect2_selfStock, collectWholeSale, q);
                });
            } else {
                c.getTradeItems().forEach(q -> {
                    if (BigDecimal.valueOf(q.getNum())
                            .multiply(Objects.isNull(q.getDivisorFlag()) ? BigDecimal.ONE : q.getDivisorFlag())
                            .compareTo(collect2.getOrDefault(q.getSkuId(), BigDecimal.ZERO)) > 0) {
                        throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
                    }
                });
            }
        });
        //去wms核实库存 年货节特意加的  平时量不大可注释这段代码 如果影响速度的话
        List<TradeItemGroup> collect = tradeItemGroups.stream().filter(v -> {
            if (v.getSaleType().equals(SaleType.WHOLESALE) && v.getSupplier().getIsSelf()) {
                return true;
            }
            return false;
        }).collect(Collectors.toList());
        log.info("需要去wms查询的商品集合"+collect);

        if (CollectionUtils.isNotEmpty(collect)){
            Long wareId = tradeCommitRequest.getWareId();
            String WareCode= "WH01";
            String selfErpId = "001";
            if (wareId.compareTo(1L)==0){
                WareCode="WH01";
                selfErpId="001";
            }else if (wareId.compareTo(46L)==0){
                WareCode="WH02";
                selfErpId="002";
            }else if (wareId.compareTo(47L)==0){
                WareCode="WH03";
                selfErpId="003";
            }
            List<TradeItem> tradeItems = collect.get(0).getTradeItems();
            //获取goodsinfo的信息
            GoodsInfoListByIdsResponse context1 = goodsInfoQueryProvider.listByIds(GoodsInfoListByIdsRequest.builder()
                    .goodsInfoIds(tradeItems.stream().map(TradeItem::getSkuId).collect(Collectors.toList()))
                    .build()).getContext();
            Map<String, GoodsInfoVO> collect1 = context1.getGoodsInfos().stream().collect(Collectors.toMap(GoodsInfoVO::getGoodsInfoId, Function.identity()));

            String prefix = Constants.ERP_NO_PREFIX.get(wareId);
            tradeItems.forEach(g->{
                GoodsInfoVO goodsInfoVO = collect1.get(g.getSkuId());
                g.setAddStep(goodsInfoVO.getAddStep());
                g.setErpSkuNo(g.getErpSkuNo().replace(prefix, ""));
                g.setSkuNo(goodsInfoVO.getGoodsInfoNo());
            });


            if (wmsAPIFlag && wmsApiProperties.getInventoryFlag()) {
                InventoryQueryResponse inventoryQueryResponse = requestWMSInventoryProvider.batchQueryInventory(BatchInventoryQueryRequest.builder()
                        .WarehouseID(WareCode)
                        .CustomerID(AbstractXYYConstant.CUSTOMER_ID)
                        .skuIds(tradeItems.stream().map(TradeItem::getErpSkuNo).collect(Collectors.toList()))
                        .Lotatt04(selfErpId)
                        .build()).getContext();
    //                    logger.info("查询erp商品信息：{}", JSON.toJSONString(inventoryQueryResponse));
                //处理一下库存(除以步长)

                if(CollectionUtils.isNotEmpty(inventoryQueryResponse.getInventoryQueryReturnVO())){
                    inventoryQueryResponse.getInventoryQueryReturnVO().parallelStream().forEach(inventoryQueryReturnVO -> {
                        Optional<TradeItem> optionalGoodsInfoVO = tradeItems.stream().filter(g->g.getErpSkuNo()
                                .equals(inventoryQueryReturnVO.getSku())).findFirst();
                        if(optionalGoodsInfoVO.isPresent()){
                            BigDecimal addStep = optionalGoodsInfoVO.get().getAddStep().setScale(2,BigDecimal.ROUND_HALF_UP);
                            if(Objects.nonNull(addStep) && addStep.compareTo(BigDecimal.ZERO)==1 ){
                                BigDecimal stock = inventoryQueryReturnVO.getStockNum().divide(addStep,
                                        2,BigDecimal.ROUND_DOWN);
                                inventoryQueryReturnVO.setStockNum(stock);
                            }
                        }
                    });
                    List<InventoryQueryReturnVO> inventoryQueryReturnVO = inventoryQueryResponse.getInventoryQueryReturnVO();
                    for (TradeItem tradeItem : tradeItems){
                        Optional<InventoryQueryReturnVO> optional = inventoryQueryReturnVO.stream().filter(i -> i.getSku()
                                .equals(tradeItem.getErpSkuNo())).findFirst();
                        if (optional.isPresent()){
                            BigDecimal stock = optional.get().getStockNum().setScale(2, BigDecimal.ROUND_DOWN);
                            if (BigDecimal.valueOf(tradeItem.getNum())
                                    .multiply(Objects.isNull(tradeItem.getDivisorFlag()) ? BigDecimal.ONE : tradeItem.getDivisorFlag())
                                    .compareTo(stock) > 0) {
                                AsyncUpdateStock(inventoryQueryReturnVO,tradeItems,wareId);
                                throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
                            }
                        }else {
                            //没有说明wms那边库存为0 抛异常 且加异步修改库存 todo
                            AsyncUpdateStock(inventoryQueryReturnVO,tradeItems,wareId);
                            throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
                        }
                    }
                }
                else {
                    AsyncUpdateStock(Collections.EMPTY_LIST,tradeItems,wareId);
                    throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
                }
            }
        }



        //营销限购 todo 下单bug 营销会出现不跨单品的情况
//        Map<Long, List<String>> collect1 = tradeItemGroups.stream().flatMap(v -> v.getTradeMarketingList().stream())
//                .collect(Collectors.toMap(TradeMarketingDTO::getMarketingId, TradeMarketingDTO::getSkuIds));
        //商品对应的营销
        Map<String, Long> skuMarketing = new HashMap<>();
//        for(Map.Entry<Long, List<String>> i : collect1.entrySet()){
//            for (String s : i.getValue()) {
//                if (Objects.isNull(skuMarketing.get(s))){
//                    skuMarketing.put(s,i.getKey());
//                }else {
//                    throw new SbcRuntimeException("k-250006","商品参加多个营销请核实");
//                }
//            }
//        }
        List<TradeMarketingDTO> collect3 = tradeItemGroups.stream().flatMap(v -> {
            if (CollectionUtils.isNotEmpty(v.getTradeMarketingList())){
                return   v.getTradeMarketingList().stream();
            }
            return null;
                }


        ).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(collect3)) {
            collect3.forEach(v -> {
                v.getSkuIds().forEach(param -> {
                    skuMarketing.put(param, v.getMarketingId());
                });
            });
        }


        List<DevanningGoodsInfoMarketingVO> checkPure = new LinkedList<>();

        Map<SaleType, List<TradeItemGroup>> collect1 = tradeItemGroups.stream().collect(Collectors.groupingBy(TradeItemGroup::getSaleType));
        for (Map.Entry<SaleType, List<TradeItemGroup>> a : collect1.entrySet()){
            a.getValue().stream().flatMap(v -> v.getTradeItems().stream()).forEach(tradeItem->{
                DevanningGoodsInfoMarketingVO devanningGoodsInfoMarketingVO = new DevanningGoodsInfoMarketingVO();
                if (Objects.nonNull(skuMarketing.get(tradeItem.getSkuId()))) {
                    devanningGoodsInfoMarketingVO.setMarketingId(skuMarketing.get(tradeItem.getSkuId()));
                }
//                if (Objects.nonNull(tradeItem.getDevanningId())) {
//                    devanningGoodsInfoMarketingVO.setDevanningId(tradeItem.getDevanningId());
//                    devanningGoodsInfoMarketingVO.setSaleType(0);
//                } else {
//                    devanningGoodsInfoMarketingVO.setSaleType(1);
//                }

                if (a.getKey().equals(SaleType.WHOLESALE)){
                    devanningGoodsInfoMarketingVO.setSaleType(0);
                }else if (a.getKey().equals(SaleType.RETAIL)){
                    devanningGoodsInfoMarketingVO.setSaleType(1);
                }else if (a.getKey().equals(SaleType.BULK)){
                    devanningGoodsInfoMarketingVO.setSaleType(2);
                }

                devanningGoodsInfoMarketingVO.setGoodsInfoId(tradeItem.getSkuId());
                devanningGoodsInfoMarketingVO.setBuyCount(tradeItem.getNum());
                if (Objects.nonNull(tradeItem.getDivisorFlag())) {
                    devanningGoodsInfoMarketingVO.setDivisorFlag(tradeItem.getDivisorFlag());
                }
                checkPure.add(devanningGoodsInfoMarketingVO);
            });


        }

//        List<TradeItem> collect2 = tradeItemGroups.stream().flatMap(v -> v.getTradeItems().stream()).collect(Collectors.toList());
//        for (TradeItem tradeItem : collect2) {
//            DevanningGoodsInfoMarketingVO devanningGoodsInfoMarketingVO = new DevanningGoodsInfoMarketingVO();
//            if (Objects.nonNull(skuMarketing.get(tradeItem.getSkuId()))) {
//                devanningGoodsInfoMarketingVO.setMarketingId(skuMarketing.get(tradeItem.getSkuId()));
//            }
//            if (Objects.nonNull(tradeItem.getDevanningId())) {
//                devanningGoodsInfoMarketingVO.setDevanningId(tradeItem.getDevanningId());
//                devanningGoodsInfoMarketingVO.setSaleType(0);
//            } else {
//                devanningGoodsInfoMarketingVO.setSaleType(1);
//            }
//            devanningGoodsInfoMarketingVO.setGoodsInfoId(tradeItem.getSkuId());
//            devanningGoodsInfoMarketingVO.setBuyCount(tradeItem.getNum());
//            if (Objects.nonNull(tradeItem.getDivisorFlag())) {
//                devanningGoodsInfoMarketingVO.setDivisorFlag(tradeItem.getDivisorFlag());
//            }
//            checkPure.add(devanningGoodsInfoMarketingVO);
//        }
        if (CollectionUtils.isEmpty(areaNodeList)) {
            throw new SbcRuntimeException("调用链为null");
        }


        for (StockAndPureChainNode checkNode : areaNodeList) {
            StockAndPureChainNodeRequeest requeest = StockAndPureChainNodeRequeest.builder().cityId(tradeCommitRequest.getCityId())
                    .provinceId(tradeCommitRequest.getProvinceId()).wareId(tradeCommitRequest.getWareId())
                    .customerId(tradeCommitRequest.getCustomer().getCustomerId()).checkPure(checkPure).build();
            StockAndPureChainNodeRsponse result = checkNode.checkStockPure(requeest);
            if (CollectionUtils.isNotEmpty(result.getCheckPure())) {
                DevanningGoodsInfoPureVO devanningGoodsInfoPureVO = result.getCheckPure().stream().findAny().orElse(null);
                if (Objects.nonNull(devanningGoodsInfoPureVO)) {
                    if (Objects.nonNull(devanningGoodsInfoPureVO.getType())) {
                        switch (devanningGoodsInfoPureVO.getType()) {
                            case 0:
                                throw new SbcRuntimeException("k-250001");
                            case 1:
                                throw new SbcRuntimeException("k-250002");
                            case 2:
                                throw new SbcRuntimeException("k-250003");
                            case 3:
                                throw new SbcRuntimeException("k-250004");
                            case -1:
                                throw new SbcRuntimeException("k-250005");
                        }
                    }
                }
            }
        }
    }

    private static void checkBulkSkuStock(List<TradeItemGroup> tradeItemGroups, Map<String, List<GoodsWareStockVO>> groupVoListMap, Map<String, BigDecimal> collect2, Map<String, BigDecimal> collect2_selfStock, Map<String, BigDecimal> collectWholeSale, TradeItem q) {
        boolean selfStockMatched = !(BigDecimal.valueOf(q.getNum()).compareTo(collect2_selfStock.getOrDefault(q.getSkuId(), BigDecimal.ZERO)) > 0);
        boolean exchangedStockMatched = !(BigDecimal.valueOf(q.getNum()).compareTo(collect2.getOrDefault(q.getSkuId(), BigDecimal.ZERO)) > 0);
        BigDecimal orderItemNum = BigDecimal.valueOf(q.getNum());
        //本身物料不不够，需要转主物料
        if (!selfStockMatched && exchangedStockMatched) {
            List<GoodsWareStockVO> tmpStockVoList = groupVoListMap.get(q.getSkuId());
            TradeItemGroup tmpTradeItemGroup = tradeItemGroups.stream().filter(w -> SaleType.WHOLESALE.equals(w.getSaleType())).findFirst().orElse(null);
            if (null != tmpTradeItemGroup) {
                for (GoodsWareStockVO stockVO : tmpStockVoList) {
                    if (stockVO.getMainSkuId() == null) {
                        continue;
                    }
                    //订单中父物料的下单总量
                    Long orderWholeNum = tmpTradeItemGroup.getTradeItems().stream().filter(t -> stockVO.getMainSkuId().equals(t.getSkuId())).mapToLong(TradeItem::getNum).sum();
                    BigDecimal stockWholeNum = collectWholeSale.get(stockVO.getMainSkuId());
                    BigDecimal selfDiffStock = orderItemNum.subtract(collect2_selfStock.getOrDefault(q.getSkuId(), BigDecimal.ZERO));
                    BigDecimal wholeDiff = selfDiffStock.divide(stockVO.getMainAddStep(), 0, BigDecimal.ROUND_CEILING);
                    boolean isMatchAmount = (stockWholeNum.subtract(BigDecimal.valueOf(orderWholeNum)).subtract(wholeDiff)).compareTo(BigDecimal.ZERO) >= 0;
                    if (!isMatchAmount) {
                        throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
                    }
                }
            }
        }
        if (!exchangedStockMatched) {
            throw new SbcRuntimeException("k-030301", "系统库存校验失败请重新到购物车页面选择数量");
        }
    }

    /**
     * 异步修改库存
     * @param inventory   wms查询的库存
     * @param tradeItems 要更新库存的    skuid
     */
//    @Async("updateStock")
    public void AsyncUpdateStock ( List<InventoryQueryReturnVO> inventory,List<TradeItem> tradeItems,Long wareId){
        List<GoodsWareStockVO> goodsWareStockVOList = new ArrayList<>();
        goodsWareStockVOList = goodsWareStockQueryProvider.getGoodsWareStockByGoodsInfoNos(GoodsWareStockByGoodsForNoRequest.builder()
                .goodsForIdList(tradeItems.stream().map(g->g.getSkuNo()).collect(Collectors.toList()))
                .wareId(wareId)
                .build()).getContext().getGoodsWareStockVOList();
        List<GoodsWareStockUpdateRequest> oldRequest =  KsBeanUtil.convertList(goodsWareStockVOList,GoodsWareStockUpdateRequest.class);

        /**查询锁定库存*/
        GoodsListByIdsResponse goodsListByIdsResponse = goodsQueryProvider.listByGoodsIdsNoValid(GoodsListByIdsRequest.builder()
                        .goodsIds(goodsWareStockVOList.stream().map(gs -> gs.getGoodsId()).collect(Collectors.toList()))
                        .build())
                .getContext();

        //设置erpNo零时转换
        Map<String,TradeItem> infoVOMap = tradeItems.stream().collect(Collectors.toMap(TradeItem::getSkuId,g->g));
        goodsWareStockVOList.forEach(g->{
            if (Objects.nonNull(infoVOMap.get(g.getGoodsInfoId()))){
                g.setErpNo(infoVOMap.get(g.getGoodsInfoId()).getErpSkuNo());
            }
        });


        //新增记录
        for (GoodsWareStockVO inner : goodsWareStockVOList) {
            Optional<InventoryQueryReturnVO> optional = inventory.stream().filter(i -> i.getSku().equals(inner.getErpNo())).findFirst();
            if (optional.isPresent()) {
                BigDecimal stock = optional.get().getStockNum().setScale(2, BigDecimal.ROUND_DOWN);
                if(Objects.nonNull(goodsListByIdsResponse) && CollectionUtils.isNotEmpty(goodsListByIdsResponse.getGoodsVOList())){
                    GoodsVO goodsVO = goodsListByIdsResponse.getGoodsVOList().stream().filter(g -> g.getGoodsId().equals(inner.getGoodsId())).findFirst().orElse(null);
                    if(Objects.nonNull(goodsVO) && Objects.nonNull(goodsVO.getLockStock()) && goodsVO.getLockStock() > 0){
                        stock = stock.subtract(BigDecimal.valueOf(goodsVO.getLockStock()));
                    }
                }
                if (stock.compareTo(BigDecimal.ZERO) > 0) {
                    inner.setStock(stock);
                } else {
                    inner.setStock(BigDecimal.ZERO);
                }
            } else {
                inner.setStock(BigDecimal.ZERO);
            }
        }
        //更新库存中间表
        List<GoodsWareStockUpdateRequest> goodsWareStockAddListRequests = KsBeanUtil.convertList(goodsWareStockVOList, GoodsWareStockUpdateRequest.class);
        goodsWareStockProvider.updateList(GoodsWareStockUpdateListRequest.builder()
                .goodsWareStockAddRequestList(goodsWareStockAddListRequests)
                .goodsWareStockOldRequestList(oldRequest).build());
    }


    //校验赠品库存和赠品限购
    private void verifyGiftLimitedAndStock(List<TradeItem> gifts, List<TradeItemGroup> tradeItemGroups) {
        if (CollectionUtils.isNotEmpty(gifts)) {
            AtomicReference<String> validInfo = new AtomicReference<>("");
            List<TradeMarketingDTO> tradeMarketings = tradeItemGroups.stream()
                    .flatMap(group -> group.getTradeMarketingList().stream()).collect(Collectors.toList());
            Map<String, TradeItem> collect = gifts.stream().collect(Collectors.toMap(TradeItem::getSkuId, Function.identity(), (a, b) -> a));
            tradeMarketings.forEach(marketing -> {
                Long marketingId = marketing.getMarketingId();
                Long marketingLevelId = marketing.getMarketingLevelId();
                if (CollectionUtils.isNotEmpty(marketing.getGiftSkuIds())) {
                    marketing.getGiftSkuIds().forEach(v -> {
                        String key = marketingId.toString() + marketingLevelId.toString() + v;
                        String o = redisService.getString(key);
                        if (Objects.nonNull(o)) {
                            Long num = Long.parseLong(o);
                            if (Objects.nonNull(collect.get(v))) {
                                if (num.compareTo(collect.get(v).getNum()) < 0) {
                                    gifts.forEach(q -> {
                                        if (q.getSkuId().equalsIgnoreCase(v)) {
                                            q.setNum(num);
                                        }
                                    });
                                }
                                if (num.compareTo(0l) <= 0) {
                                    validInfo.set(validInfo.get() + collect.get(v).getSkuName());
                                }
                            }
                        }
                    });
                }
            });
            List<String> skuslist = gifts.stream().map(TradeItem::getSkuId).collect(Collectors.toList());
            if (Objects.nonNull(skuslist)) {
                Map<String, BigDecimal> collect1 = historyTownShipOrderService.getskusstock(skuslist).stream().collect(Collectors.toMap(TrueStock::getSkuid, TrueStock::getStock, (a, b) -> a));
                gifts.forEach(q -> {
                    if (BigDecimal.valueOf(q.getNum()).multiply(Objects.isNull(q.getDivisorFlag()) ? BigDecimal.ONE : q.getDivisorFlag()).compareTo(collect1.getOrDefault(q.getSkuId(), BigDecimal.ZERO)) > 0) {
                        validInfo.set(validInfo.get() + q.getSkuName());
                    }
                });
            }
            if (StringUtils.isNotEmpty(validInfo.get())) {
                validInfo.set(validInfo.get() + "赠品以及赠完或者已无库存请在购物车重新选择新的赠品");
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "很抱歉，" + validInfo);
            }

        }

    }

    /**
     * 减去营销商品限购数量信息
     *
     * @param tradeItems
     * @param isAddFlag
     */
    public void calMarketGoodsNum(List<TradeItem> tradeItems, Boolean isAddFlag) {
        //遍历订单商品信息  刘草注释  现在营销限购无需修改数量
//        tradeItems.forEach(item -> {
//            log.info("calMarketGoodsNum...tradeItem:::{}", item);
//            if (CollectionUtils.isNotEmpty(item.getMarketingIds())) {
//                log.info("create trade ... reduce or add marketing goods nums:::item.getMarketingIds()={}", item.getMarketingIds());
//                //遍历商品使用到的营销信息
//                item.getMarketingIds().forEach(marketId -> {
//                    MarketingScopeByMarketingIdRequest request = new MarketingScopeByMarketingIdRequest();
//                    request.setMarketingId(marketId);
//                    request.setSkuId(item.getSkuId());
//                    //通过营销ID和商品ID查询 营销关联商品scope信息
//                    MarketingScopeByMarketingIdResponse response;
//                    if (isAddFlag) {
//                        //包含终止的营销商品
//                        response = marketingScopeQueryProvider.findByMarketingIdAndScopeIdNotTermination(request).getContext();
//                    } else {
//                        response = marketingScopeQueryProvider.listByMarketingIdAndSkuId(request).getContext();
//                    }
//                    //如果营销关联商品信息不为空
//                    if (CollectionUtils.isNotEmpty(response.getMarketingScopeVOList())) {
//                        Map<String, MarketingScopeVO> purchaseNumMap = response.getMarketingScopeVOList().stream().collect(Collectors.toMap(MarketingScopeVO::getScopeId, g -> g));
//                        MarketingScopeVO marketingScopeVO = purchaseNumMap.getOrDefault(item.getSkuId(), null);
//                        //如果营销关联商品信息 设置了限购数量
//                        if (Objects.nonNull(marketingScopeVO.getPurchaseNum()) && marketingScopeVO.getPurchaseNum() >= 0) {
//                            log.info("计算营销商品限制数量:::isAddFlag={},marketingScopeVO = {}", isAddFlag, marketingScopeVO);
//                            //取消订单
//                            if (isAddFlag) {
//                                //营销商品表
//                                marketingScopeVO.setPurchaseNum(marketingScopeVO.getPurchaseNum() + item.getNum());
//                                if (BoolFlag.YES.equals(marketingScopeVO.getTerminationFlag())) {
//                                    marketingScopeVO.setTerminationFlag(BoolFlag.NO);
//                                }
//                            } else {//创建订单
//                                //限购数量大于购买数量
//                                if (marketingScopeVO.getPurchaseNum() > item.getNum()) {
//                                    //赋值限购数量=限购数量-购买数量
//                                    marketingScopeVO.setPurchaseNum(marketingScopeVO.getPurchaseNum() - item.getNum());
//                                } else {
//                                    //限购数量小于或等于购买数量，允许用户购买并设置限购数量为0
//                                    marketingScopeVO.setPurchaseNum(0L);
//                                    marketingScopeVO.setTerminationFlag(BoolFlag.YES);
//                                }
//                            }
//                            marketingScopeProvider.saveMarketingScope(marketingScopeVO);
//                        }
//                        ;
//                    }
//                });
//            }
//        });
    }

    /**
     * C端提货
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> takeGood(TradeCommitRequest tradeCommitRequest) {

        // 验证用户
        CustomerVO customer = verifyService.verifyCustomer(tradeCommitRequest.getOperator().getUserId());
        tradeCommitRequest.setCustomer(customer);
        //验证并填充物流公司信息
        this.checkLogsitcCompanyInfo(tradeCommitRequest.getStoreCommitInfoList());

        Operator operator = tradeCommitRequest.getOperator();
        //查询mongo
        List<TradeItemGroup> tradeItemGroups = tradeItemService.find(customer.getCustomerId());

        // 如果为PC商城下单，将分销商品变为普通商品

        // 拼团订单--验证
        TradeGrouponCommitForm grouponForm = tradeItemGroups.get(NumberUtils.INTEGER_ZERO).getGrouponForm();
        if (Objects.nonNull(grouponForm)) {
            this.validGroupon(tradeCommitRequest, tradeItemGroups);
        }
        // 2.按店铺包装多个订单信息、订单组信息
        List<Trade> trades = this.takeGoodWrapperTradeList(tradeCommitRequest, tradeItemGroups);
        TradeGroup tradeGroup = this.wrapperTradeGroup(trades, tradeCommitRequest, grouponForm);
        //  重新计算订单运费
        this.computers(trades, grouponForm);
        // 3.批量提交订单
        List<TradeCommitResult> successResults;
        //订单添加囤货类型
        trades.stream().forEach(trade -> {
            trade.setActivityType(TradeActivityTypeEnum.STOCKUP.toActivityType());
        });
        logger.info("TradeService.takeGood pile trades:{}", JSONObject.toJSONString(trades));
        if (tradeGroup != null) {
            successResults = this.createBatchWithGroup(trades, tradeGroup, operator);
        } else {
            successResults = this.createBatch(trades, operator);
        }

        //提交订单成功减囤货数量
//        trades.stream().forEach(trade -> {
//            String customerId = trade.getBuyer().getId();
//            List<TradeItem> tradeItems = trade.getTradeItems();
//            tradeItems.stream().forEach(tradeItem -> {
//                String spuId = tradeItem.getSpuId();
//                String skuId = tradeItem.getSkuId();
//                //购买数量
//                Long num = tradeItem.getNum();
//                //通过spuId+skuId+用户id查询囤货表的数据看看是不是有多个，有多个就根据时间减他妈的
//                List<PilePurchase> pilePurchases = pilePurchaseRepository.queryPilePurchase(customerId, spuId, skuId);
//                if(CollectionUtils.isNotEmpty(pilePurchases)){
//                    long sum = pilePurchases.stream().mapToLong(PilePurchase::getGoodsNum).sum();
//                    if(num > sum){
//                        throw new SbcRuntimeException("K-030301");
//                    }
//                    //第一笔
//                    PilePurchase pilePurchase = pilePurchases.stream().findFirst().get();
//                    if(num > pilePurchase.getGoodsNum()){
//                        throw new SbcRuntimeException("K-030301");
//                    }
//                    pilePurchase.setGoodsNum(pilePurchase.getGoodsNum() - num);
//                    pilePurchaseRepository.save(pilePurchase);
//                }
//            });
//        });

        try {
            // 4.订单提交成功，减去囤货库存/删除囤货库存
            trades.forEach(
                    trade -> {
                        List<TradeItem> tradeItems = trade.getTradeItems();
                    }
            );
            // 5.订单提交成功，删除订单商品快照
            tradeItemService.remove(customer.getCustomerId());
        } catch (Exception e) {
            log.error("Delete the trade sku list snapshot or the purchase order exception," +
                            "trades={}," +
                            "customer={}",
                    JSONObject.toJSONString(trades),
                    customer,
                    e
            );
            e.printStackTrace();
        }
        return successResults;
    }

    /**
     * 提货订单提交成功，减囤货数量
     * 1.囤货数量=提货数量 删除囤货商品信息
     * 2.囤货数量>提货数量 更新囤货商品数量信息  =====》 囤货数量减提货数量
     *
     * @param customerId
     * @param tradeItems
     */
    private void reduceOrDeletePilePurchase(String customerId, List<TradeItem> tradeItems) {
        tradeItems.forEach(item -> {
            String skuId = item.getSkuId();
            Long buyCount = item.getNum();
            Long goodsNum = pilePurchaseRepository.getGoodsNumByCustomerIdAndGoodsInfoId(customerId, skuId);
            if (Objects.nonNull(goodsNum) || goodsNum.equals(0L)) {
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商品：" + skuId + "，已被提完，请检查后请重新囤货！");
            }
            if (goodsNum < buyCount) {
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商品：" + skuId + "，提货数量不足，请检查后请重新提货！");
            }
            if (buyCount.equals(goodsNum)) {
                pilePurchaseRepository.deleteByCustomerIdAndGoodsInfoId(customerId, skuId);
            }
            if (goodsNum > buyCount) {
                pilePurchaseRepository.updateGoodsNum(customerId, skuId, buyCount);
            }
        });
    }

    private void orderMarketing(List<Trade> trades) {
        trades.forEach(trade -> {
            if (SaleType.WHOLESALE.equals(trade.getSaleType())) {
                BigDecimal tradePrice = trade.getTradePrice().getTotalPrice();//满订单优惠前价格
                //8.2.1 计算满订单优惠
                PurchaseOrderMarketingResponse context;
                if (trade.getActivityType().equals(TradeActivityTypeEnum.TRADE.toActivityType())) {
                    /**正常购物车*/
                    context = shopCartQueryProvider.getOrderMarketings(PurchaseOrderMarketingRequest.builder()
                            .goodsTotalNum(trade.getTradeItems().stream().map(TradeItem::getNum).reduce((sum, item) -> {
                                sum = sum + item;
                                return sum;
                            }).orElse(0l)).totalPrice(trade.getTradePrice().getTotalPrice()).build()).getContext();
                } else {
                    /**囤货购物车*/
                    context = purchaseQueryProvider.getOrderMarketings(PurchaseOrderMarketingRequest.builder().goodsTotalNum(trade.getTradeItems().stream().map(TradeItem::getNum).reduce((sum, item) -> {
                        sum = sum + item;
                        return sum;
                    }).orElse(0l)).totalPrice(trade.getTradePrice().getTotalPrice()).build()).getContext();
                }

                if (Objects.nonNull(context)) {
                    BigDecimal newTradePrice = context.getTotalPrice();
                    trade.getTradePrice().setTotalPrice(newTradePrice);
                    List<String> goodsInfoIds = new ArrayList<>();
                    goodsInfoIds.add(Constant.FULL_GIT_ORDER_GOODS);
                    Map<String, List<MarketingVO>> listMap = marketingQueryProvider.getOrderMarketingMap(MarketingMapGetByGoodsIdRequest.builder()
                            .goodsInfoIdList(goodsInfoIds)
                            .deleteFlag(DeleteFlag.NO)
                            .cascadeLevel(true)
                            .marketingStatus(MarketingStatus.STARTED)
                            .build()).getContext().getListMap();
                    if (Objects.nonNull(listMap)) {
                        List<MarketingVO> marketingViewVOS = listMap.get(Constant.FULL_GIT_ORDER_GOODS);
                        if (!CollectionUtils.isEmpty(marketingViewVOS)) {
                            MarketingVO orderByMarketingVO = marketingViewVOS.stream().findFirst().orElse(null);
                            trade.getTradeMarketings().add(TradeMarketingVO.builder()
                                    .marketingId(orderByMarketingVO.getMarketingId())
                                    .marketingName(orderByMarketingVO.getMarketingName())
                                    .marketingType(orderByMarketingVO.getMarketingType())
                                    .subType(orderByMarketingVO.getSubType())
                                    .discountsAmount(context.getDiscountsTotalOrderPrice())
                                    //.realPayAmount()
                                    .isOverlap(orderByMarketingVO.getIsOverlap())
                                    .build());
                        }
                    }
                    //计算平摊价格
                    tradeItemService.calcSplitPrice(trade.getTradeItems(), newTradePrice, tradePrice);
                }
            }
        });
    }

    /**
     * 功能描述: 代客下单运费计算
     */
    public List<Trade> tradeManagerCommit(List<Trade> trades) {
        List<Trade> bossFreight = new ArrayList<>(20);
        List<Trade> storeFreight = new ArrayList<>(20);
        //平台
        boolean platformFlag = false;
        //统仓统配
        boolean unifiedFlag = false;
        //三方卖家
        boolean supplierFlag = false;

        for (Trade inner : trades) {
            if (!DeliverWay.logisticFeeBeginPaid(inner.getDeliverWay())) {
                inner.getTradePrice().setDeliveryPrice(BigDecimal.ZERO);
            } else {
                if (inner.getSupplier().getCompanyType().equals(CompanyType.PLATFORM)) {
                    bossFreight.add(inner);
                    platformFlag = true;
                } else if (inner.getSupplier().getCompanyType().equals(CompanyType.UNIFIED)) {
                    bossFreight.add(inner);
                    unifiedFlag = true;
                } else {
                    supplierFlag = true;
                    storeFreight.add(inner);
                }
//                //平台
//                platformFlag = true;
//                //统仓统配
//                unifiedFlag = true;
//                //三方卖家
//                supplierFlag = true;
//                storeFreight.add(inner);
            }
        }
        if (false && platformFlag && unifiedFlag && supplierFlag) {
            //平台模板
            if (CollectionUtils.isNotEmpty(bossFreight)) {
                BigDecimal totalPrice = bossFreight.stream().map(
                        trade -> trade.getTradePrice().getGoodsPrice()).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
                Trade trade = bossFreight.stream().findFirst().get();
                trade.getSupplier().setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
                //1返回当前订单 全部商品  运费总金额
                BigDecimal decimal = this.calcBossTradeFreight(trade.getConsignee(), trade.getSupplier(), totalPrice);

                bossFreight.stream().forEach(trade1 -> {
                    BigDecimal goodsPrice = trade1.getTradePrice().getGoodsPrice();

                    TradePrice tradePrice = trade1.getTradePrice();
                    BigDecimal deliveryPrice = BigDecimal.ZERO;
                    //商品订单总金额
                    if (totalPrice.compareTo(BigDecimal.ZERO) == Constants.no) {
                        // decimal 订单运费不为0
                        if (decimal.compareTo(BigDecimal.ZERO) == Constants.yes) {
                            deliveryPrice = decimal.divide(new BigDecimal(bossFreight.size()), 2, BigDecimal.ROUND_HALF_UP);
                        }
                    } else {
                        deliveryPrice = goodsPrice.compareTo(BigDecimal.ZERO) ==
                                Constants.no ? BigDecimal.ZERO : decimal.compareTo(BigDecimal.ZERO) == Constants.no ? BigDecimal.ZERO :
                                goodsPrice.divide(totalPrice.divide(decimal, 4, BigDecimal.ROUND_HALF_UP),
                                        4, BigDecimal.ROUND_HALF_UP).setScale(1, BigDecimal.ROUND_HALF_UP);
                    }

                    tradePrice.setDeliveryPrice(deliveryPrice);
                    // 2.计算订单总价(追加运费)
                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
                    // 3订单总价、原始金额追加运费
                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
                });
            }
            //商家模板
            if (CollectionUtils.isNotEmpty(storeFreight)) {
                for (Trade inner : storeFreight) {
                    TradePrice tradePrice = inner.getTradePrice();
                    // 8.4.计算运费
                    BigDecimal deliveryPrice = this.calcTradeFreight(inner.getConsignee(), inner.getSupplier(),
                            inner.getDeliverWay(),
                            tradePrice.getTotalPrice(), inner.getTradeItems(), inner.getGifts());
                    tradePrice.setDeliveryPrice(deliveryPrice);

                    // 8.5.订单总价、原始金额追加运费
                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
                }
//                BigDecimal totalPrice = storeFreight.stream().map(
//                        trade -> trade.getTradePrice().getGoodsPrice()).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
//                Trade trade = storeFreight.stream().findFirst().get();
//                /**合并所有订单商品*/
//                List<List<TradeItem>> totalTradeItemList = storeFreight.stream().map(s -> s.getTradeItems()).collect(Collectors.toList());
//                List<TradeItem> totalTradeItem = Lists.newArrayList();
//                totalTradeItemList.forEach(c->{
//                    totalTradeItem.addAll(c);
//                });
//                /**合并所有订单赠品*/
//                List<List<TradeItem>> totalGiftsList = storeFreight.stream().map(s -> s.getGifts()).collect(Collectors.toList());
//                List<TradeItem> totalGifts = Lists.newArrayList();
//                totalGiftsList.forEach(c->{
//                    totalGifts.addAll(c);
//                });
//                //商家固定为超级大白鲸
//                Supplier supplier = new Supplier();
//                StoreVO store = storeQueryProvider.getValidStoreById(new ValidStoreByIdRequest(123457927L)).getContext().getStoreVO();
//                supplier.setStoreId(store.getStoreId());
//                supplier.setFreightTemplateType(store.getFreightTemplateType());
//
//                //1返回当前订单 全部商品  运费总金额
//                BigDecimal decimal = this.calcTradeFreight(trade.getConsignee(), supplier,
//                        trade.getDeliverWay(),
//                        totalPrice, totalTradeItem, totalGifts);
//                storeFreight.stream().forEach(trade1 -> {
//                    BigDecimal goodsPrice = trade1.getTradePrice().getGoodsPrice();
//
//                    TradePrice tradePrice = trade1.getTradePrice();
//                    BigDecimal deliveryPrice = BigDecimal.ZERO;
//                    //商品订单总金额
//                    if (totalPrice.compareTo(BigDecimal.ZERO) == Constants.no) {
//                        // decimal 订单运费不为0
//                        if (decimal.compareTo(BigDecimal.ZERO) == Constants.yes) {
//                            deliveryPrice = decimal.divide(new BigDecimal(storeFreight.size()), 2, BigDecimal.ROUND_HALF_UP);
//                        }
//                    } else {
//                        deliveryPrice = goodsPrice.compareTo(BigDecimal.ZERO) ==
//                                Constants.no ? BigDecimal.ZERO : decimal.compareTo(BigDecimal.ZERO) == Constants.no ? BigDecimal.ZERO :
//                                goodsPrice.divide(totalPrice.divide(decimal, 4, BigDecimal.ROUND_HALF_UP),
//                                        4, BigDecimal.ROUND_HALF_UP).setScale(1, BigDecimal.ROUND_HALF_UP);
//                    }
//                    //判断是否为秒杀抢购订单
//                    if (Objects.nonNull(trade1.getIsFlashSaleGoods()) && trade1.getIsFlashSaleGoods()) {
//                        //秒杀商品是否包邮
//                        //获取秒杀抢购活动详情
//                        FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
//                                .id(trade1.getTradeItems().get(0).getFlashSaleGoodsId())
//                                .build())
//                                .getContext().getFlashSaleGoodsVO();
//                        if (flashSaleGoodsVO.getPostage().equals(1)) {
//                            deliveryPrice = new BigDecimal(0);
//                        }
//                    }
//
//                    tradePrice.setDeliveryPrice(deliveryPrice);
//                    // 2.计算订单总价(追加运费)
//                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
//                    // 3订单总价、原始金额追加运费
//                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
//                });
            }
        } else {
            //商家模板
            if (CollectionUtils.isNotEmpty(storeFreight) || CollectionUtils.isNotEmpty(bossFreight)) {
                for (Trade inner : storeFreight) {
                    TradePrice tradePrice = inner.getTradePrice();
                    // 8.4.计算运费
                    BigDecimal deliveryPrice = this.calcTradeFreight(inner.getConsignee(), inner.getSupplier(),
                            inner.getDeliverWay(),
                            tradePrice.getTotalPrice(), inner.getTradeItems(), inner.getGifts());
                    tradePrice.setDeliveryPrice(deliveryPrice);

                    // 8.5.订单总价、原始金额追加运费
                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
                }
                for (Trade inner : bossFreight) {
                    TradePrice tradePrice = inner.getTradePrice();
                    // 8.4.计算运费
                    BigDecimal deliveryPrice = this.calcTradeFreight(inner.getConsignee(), inner.getSupplier(),
                            inner.getDeliverWay(),
                            tradePrice.getTotalPrice(), inner.getTradeItems(), inner.getGifts());
                    tradePrice.setDeliveryPrice(deliveryPrice);

                    // 8.5.订单总价、原始金额追加运费
                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
                }
            }
        }
        return trades;
    }

    /**
     * 运费模板重新计算，以平台运费模板为标准
     *
     * @param trades
     */
    public void computers(List<Trade> trades, TradeGrouponCommitForm grouponForm) {
        log.info("Trade Service computers:{}", JSON.toJSONString(trades));

        //分类汇总=》三方卖家走店铺模板，其他走平台模板
        List<Trade> bossFreight = new ArrayList<>(10);
        List<Trade> bulkFreight = new ArrayList<>(10);
        List<Trade> storeFreight = new ArrayList<>(10);
        //零售订单走特殊运费
//        List<Trade> retailFreight = new ArrayList<>(10);
        //平台
        boolean platformFlag = false;
        //统仓统配
        boolean unifiedFlag = false;
        //三方卖家
        boolean supplierFlag = false;

        //散批商家
        boolean bulkFlag = false;

        List<Trade> tradesExpress = new ArrayList<>(trades.size());
        List<Trade> tradesDeliveryToStore = new ArrayList<>(trades.size());
        List<Trade> tradesExpressSelfPaid= new ArrayList<>(trades.size());
        for (Trade inner : trades) {
            if (!(DeliverWay.logisticFeeBeginPaid(inner.getDeliverWay()))
                    || (Objects.nonNull(grouponForm) && grouponForm.isFreeDelivery())) {
                //非快递或拼团活动包邮
                inner.getTradePrice().setDeliveryPrice(BigDecimal.ZERO);
            } else {
                if (inner.getSupplier().getCompanyType().equals(CompanyType.PLATFORM)) {
                    bossFreight.add(inner);
                    platformFlag = true;
                }else if (inner.getSupplier().getCompanyType().equals(CompanyType.BULK)){
                    bulkFreight.add(inner);
                    bulkFlag = true;
                }

                else if (inner.getSupplier().getCompanyType().equals(CompanyType.UNIFIED)) {
                    bossFreight.add(inner);
                    unifiedFlag = true;
                } /*else if (inner.getSupplier().getCompanyType().equals(com.wanmi.sbc.common.enums.CompanyType.RETAIL)) {
                    retailFreight.add(inner);
                }*/ else {
                    storeFreight.add(inner);
                    supplierFlag = true;
                }
                if(DeliverWay.logisticFeeBeginPaid(inner.getDeliverWay())){
                    if(DeliverWay.isDeliveryToStore(inner.getDeliverWay())){
                        if(null==inner.getSupplier().getMarketId()) {
                            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商家["+inner.getSupplier().getStoreName()+"]缺少批发市场信息");
                        }
                        tradesDeliveryToStore.add(inner);
                    }else if(DeliverWay.isExpressSelfPaid(inner.getDeliverWay())){
                        if(null==inner.getSupplier().getMarketId()) {
                            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商家["+inner.getSupplier().getStoreName()+"]缺少批发市场信息");
                        }
                        tradesExpressSelfPaid.add(inner);
                    }
                    else{
                        tradesExpress.add(inner);
                    }
                }
            }
        }
        // todo log
        log.info("TradeService bulkFlag===:{}",bulkFlag);
        log.info("TradeService platformFlag===:{}",platformFlag);
        log.info("TradeService unifiedFlag===:{}",unifiedFlag);
        log.info("TradeService supplierFlag===:{}",supplierFlag);
        //存在三种店铺时，走以下计算方式否则还是走店铺运费计算 现在没有统仓统配故不会进入判断2022 10-25 LC
        if (false && platformFlag && unifiedFlag && supplierFlag) {
            //平台模板
            if (CollectionUtils.isNotEmpty(bossFreight)) {
                BigDecimal totalPrice = bossFreight.stream().map(
                        trade -> trade.getTradePrice().getGoodsPrice()).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
                Trade trade = bossFreight.stream().findFirst().get();
                trade.getSupplier().setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
                //1返回当前订单 全部商品  运费总金额
                BigDecimal decimal = this.calcBossTradeFreight(trade.getConsignee(), trade.getSupplier(), totalPrice);

                bossFreight.stream().forEach(trade1 -> {
                    BigDecimal goodsPrice = trade1.getTradePrice().getGoodsPrice();

                    TradePrice tradePrice = trade1.getTradePrice();
                    BigDecimal deliveryPrice = BigDecimal.ZERO;
                    //商品订单总金额
                    if (totalPrice.compareTo(BigDecimal.ZERO) == Constants.no) {
                        // decimal 订单运费不为0
                        if (decimal.compareTo(BigDecimal.ZERO) == Constants.yes) {
                            deliveryPrice = decimal.divide(new BigDecimal(bossFreight.size()), 2, BigDecimal.ROUND_HALF_UP);
                        }
                    } else {
                        deliveryPrice = goodsPrice.compareTo(BigDecimal.ZERO) ==
                                Constants.no ? BigDecimal.ZERO : decimal.compareTo(BigDecimal.ZERO) == Constants.no ? BigDecimal.ZERO :
                                goodsPrice.divide(totalPrice.divide(decimal, 4, BigDecimal.ROUND_HALF_UP),
                                        4, BigDecimal.ROUND_HALF_UP).setScale(1, BigDecimal.ROUND_HALF_UP);
                    }
                    //判断是否为秒杀抢购订单
                    if (Objects.nonNull(trade1.getIsFlashSaleGoods()) && trade1.getIsFlashSaleGoods()) {
                        //秒杀商品是否包邮
                        //获取秒杀抢购活动详情
                        FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
                                .id(trade1.getTradeItems().get(0).getFlashSaleGoodsId())
                                .build())
                                .getContext().getFlashSaleGoodsVO();
                        if (flashSaleGoodsVO.getPostage().equals(1)) {
                            deliveryPrice = new BigDecimal(0);
                        }
                    }

                    tradePrice.setDeliveryPrice(deliveryPrice);
                    // 2.计算订单总价(追加运费)
                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
                    // 3订单总价、原始金额追加运费
                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
                });
            }
            //商家模板
            if (CollectionUtils.isNotEmpty(storeFreight)) {
                for (Trade inner : storeFreight) {
                    computerTradeDeliveryPrice(inner);
                }

//                BigDecimal totalPrice = storeFreight.stream().map(
//                        trade -> trade.getTradePrice().getGoodsPrice()).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
//                Trade trade = storeFreight.stream().findFirst().get();
//                /**合并所有订单商品*/
//                List<List<TradeItem>> totalTradeItemList = storeFreight.stream().map(s -> s.getTradeItems()).collect(Collectors.toList());
//                List<TradeItem> totalTradeItem = Lists.newArrayList();
//                totalTradeItemList.forEach(c->{
//                    totalTradeItem.addAll(c);
//                });
//                /**合并所有订单赠品*/
//                List<List<TradeItem>> totalGiftsList = storeFreight.stream().map(s -> s.getGifts()).collect(Collectors.toList());
//                List<TradeItem> totalGifts = Lists.newArrayList();
//                totalGiftsList.forEach(c->{
//                    totalGifts.addAll(c);
//                });
//                //1返回当前订单 全部商品  运费总金额
//                //商家固定为超级大白鲸
//                //商家固定为超级大白鲸
//                Supplier supplier = new Supplier();
//                StoreVO store = storeQueryProvider.getValidStoreById(new ValidStoreByIdRequest(123457927L)).getContext().getStoreVO();
//                supplier.setStoreId(store.getStoreId());
//                supplier.setFreightTemplateType(store.getFreightTemplateType());
//
//                BigDecimal decimal = this.calcTradeFreight(trade.getConsignee(), supplier,
//                        trade.getDeliverWay(),
//                        totalPrice, totalTradeItem, totalGifts);
//                storeFreight.stream().forEach(trade1 -> {
//                    BigDecimal goodsPrice = trade1.getTradePrice().getGoodsPrice();
//
//                    TradePrice tradePrice = trade1.getTradePrice();
//                    BigDecimal deliveryPrice = BigDecimal.ZERO;
//                    //商品订单总金额
//                    if (totalPrice.compareTo(BigDecimal.ZERO) == Constants.no) {
//                        // decimal 订单运费不为0
//                        if (decimal.compareTo(BigDecimal.ZERO) == Constants.yes) {
//                            deliveryPrice = decimal.divide(new BigDecimal(storeFreight.size()), 2, BigDecimal.ROUND_HALF_UP);
//                        }
//                    } else {
//                        deliveryPrice = goodsPrice.compareTo(BigDecimal.ZERO) ==
//                                Constants.no ? BigDecimal.ZERO : decimal.compareTo(BigDecimal.ZERO) == Constants.no ? BigDecimal.ZERO :
//                                goodsPrice.divide(totalPrice.divide(decimal, 4, BigDecimal.ROUND_HALF_UP),
//                                        4, BigDecimal.ROUND_HALF_UP).setScale(1, BigDecimal.ROUND_HALF_UP);
//                    }
//                    //判断是否为秒杀抢购订单
//                    if (Objects.nonNull(trade1.getIsFlashSaleGoods()) && trade1.getIsFlashSaleGoods()) {
//                        //秒杀商品是否包邮
//                        //获取秒杀抢购活动详情
//                        FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
//                                .id(trade1.getTradeItems().get(0).getFlashSaleGoodsId())
//                                .build())
//                                .getContext().getFlashSaleGoodsVO();
//                        if (flashSaleGoodsVO.getPostage().equals(1)) {
//                            deliveryPrice = new BigDecimal(0);
//                        }
//                    }
//
//                    tradePrice.setDeliveryPrice(deliveryPrice);
//                    // 2.计算订单总价(追加运费)
//                    tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
//                    // 3订单总价、原始金额追加运费
//                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
//                });
            }
        }
        else if (bulkFlag && platformFlag){
            //存在批发 和散批共存的情况 那么需要把商品合并一起算运费到最后在平摊运费
            caclBulkAndPlatform(trades, bossFreight, bulkFreight, storeFreight);

        }
        else if (bulkFlag && !platformFlag){
            caclOnlyBulk(trades, bulkFreight, storeFreight);
        }
        else {
            //商家模板
            if (CollectionUtils.isNotEmpty(tradesExpress)) {
                for (Trade inner : tradesExpress) {
                    computerTradeDeliveryPrice(inner);
                }
            }
            if (CollectionUtils.isNotEmpty(tradesDeliveryToStore)) {
                localTmsOrderService.computerTradeDeliveryPrice(tradesDeliveryToStore);
            }
            if (CollectionUtils.isNotEmpty(tradesExpressSelfPaid)) {
                //localExpressOrderService.computerTradeDeliveryPrice(tradesDeliveryToStore);
            }
        }
    }

    private void caclOnlyBulk(List<Trade> trades, List<Trade> bulkFreight, List<Trade> storeFreight) {
        //存在批发 和散批共存的情况 那么需要把商品合并一起算运费到最后在平摊运费
        if( bulkFreight.size()>1){
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"当前系统分单只允许出现一个");
        }
        Optional<Trade> firstBulkTrade = bulkFreight.stream().findFirst();
        if ( !firstBulkTrade.isPresent()){
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"无订单操作失败");
        }

        Trade bulkTrade = firstBulkTrade.get();

        TradePrice bulkTradePrice = bulkTrade.getTradePrice();
        //批发订单和散批订单所有商品的集合

        //批发订单和散批订单所有赠送商品的集合
        List<TradeItem> giftItemsList = new LinkedList<>();

        giftItemsList.addAll(bulkTrade.getGifts());

        //散批所有商品的集合（包含赠品）
        List<TradeItem> bulktradeAllItems = new LinkedList<>();
        bulktradeAllItems.addAll(bulkTrade.getTradeItems());
        bulktradeAllItems.addAll(bulkTrade.getGifts());

        log.info("算取运费入参"+bulkTrade.getTradeItems());
        // 计算运费 根据批发商户来设置用户模版
        BigDecimal deliveryPrice = this.calcTradeFreightAndBluk(bulkTrade.getConsignee(), bulkTrade.getSupplier(),
                bulkTrade.getDeliverWay(),
                bulkTradePrice.getTotalPrice(), null, bulkTrade.getTradeItems(),giftItemsList);
        log.info("deliveryPrice===:{}", deliveryPrice);
        bulkTradePrice.setDeliveryPrice(deliveryPrice);
        bulkTradePrice.setOriginPrice(bulkTradePrice.getOriginPrice().add(deliveryPrice));
        bulkTradePrice.setTotalPrice(bulkTradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运
        bulkFreight.get(0).setTradePrice(bulkTradePrice);

        log.info("最终trade:{}", trades);
        log.info("bulkFreight运费:{}",JSON.toJSONString(bulkFreight));

        if (CollectionUtils.isNotEmpty(storeFreight)){
            for (Trade inner : storeFreight) {
                computerTradeDeliveryPrice(inner);
            }
        }
    }

    private void caclBulkAndPlatform(List<Trade> trades, List<Trade> bossFreight, List<Trade> bulkFreight, List<Trade> storeFreight) {
        if(bossFreight.size()>1 || bulkFreight.size()>1){
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"当前系统分单只允许出现一个");
        }
        Optional<Trade> firstBossTrade = bossFreight.stream().findFirst();
        Optional<Trade> firstBulkTrade = bulkFreight.stream().findFirst();
        if (!firstBossTrade.isPresent() || !firstBulkTrade.isPresent()){
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"无订单操作失败");
        }
        Trade bossTrade = firstBossTrade.get();
        Trade bulkTrade = firstBulkTrade.get();
        TradePrice bosstradePrice = bossTrade.getTradePrice();
        TradePrice bulkTradePrice = bulkTrade.getTradePrice();
        //批发订单和散批订单所有商品的集合

        //批发订单和散批订单所有赠送商品的集合
        List<TradeItem> giftItemsList = new LinkedList<>();
        giftItemsList.addAll(bossTrade.getGifts());
        giftItemsList.addAll(bulkTrade.getGifts());
        //批发所有商品的集合(包含赠品)
        List<TradeItem> bosstradeAllItems = new LinkedList<>();
        bosstradeAllItems.addAll(bossTrade.getGifts());
        bosstradeAllItems.addAll(bossTrade.getTradeItems());
        //散批所有商品的集合（包含赠品）
        List<TradeItem> bulktradeAllItems = new LinkedList<>();
        bulktradeAllItems.addAll(bulkTrade.getTradeItems());
        bulktradeAllItems.addAll(bulkTrade.getGifts());
        log.info("算取运费入参"+bossTrade.getTradeItems());
        log.info("算取运费入参"+bulkTrade.getTradeItems());
        // 计算运费 根据批发商户来设置用户模版
        BigDecimal deliveryPrice = this.calcTradeFreightAndBluk(bossTrade.getConsignee(), bossTrade.getSupplier(),
                bossTrade.getDeliverWay(),
                bosstradePrice.getTotalPrice().add(bulkTradePrice.getTotalPrice()), bossTrade.getTradeItems(), bulkTrade.getTradeItems(),giftItemsList);
        log.info("deliveryPrice===:{}", deliveryPrice);
        //当前系统没有秒杀故不考虑
        //设置订单原价 和总价 运费目前需求根据总量分摊（那就代表着批发的运费模版只能根据总量进行设置）
        BigDecimal bossItemsWeight = BigDecimal.ZERO;
        BigDecimal bulkItemsWeight = BigDecimal.ZERO;
        for (TradeItem tradeItem : bosstradeAllItems){
            bossItemsWeight= bossItemsWeight.add(tradeItem.getGoodsWeight());
        }
        for (TradeItem tradeItem : bulktradeAllItems){
            bulkItemsWeight= bulkItemsWeight.add(tradeItem.getGoodsWeight());
        }
        //分摊
        BigDecimal bossDeliveryPrice = BigDecimal.ZERO; //批发订单平摊价格
        BigDecimal bulkDeliveryPrice = BigDecimal.ZERO; //散批订单平摊价格
        if (deliveryPrice.compareTo(BigDecimal.ZERO)>0){
            if (bossItemsWeight.compareTo(BigDecimal.ZERO)>0){
                //  （运费/（boos总量+散批重量））* boos总量 = boss的运费
                  bossDeliveryPrice = (deliveryPrice.divide(
                        (bossItemsWeight.add(bulkItemsWeight)), 6,BigDecimal.ROUND_UP))
                        .multiply(bossItemsWeight).setScale(2,BigDecimal.ROUND_UP);
                bulkDeliveryPrice=deliveryPrice.subtract(bossDeliveryPrice);
            }else {
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"商品无重量");
            }
        }
        bosstradePrice.setDeliveryPrice(bossDeliveryPrice);
        bosstradePrice.setOriginPrice(bosstradePrice.getOriginPrice().add(bossDeliveryPrice));
        bosstradePrice.setTotalPrice(bosstradePrice.getTotalPrice().add(bossDeliveryPrice));//应付金额 = 应付+运费
        bossFreight.get(0).setTradePrice(bosstradePrice);

        bulkTradePrice.setDeliveryPrice(bulkDeliveryPrice);
        bulkTradePrice.setOriginPrice(bulkTradePrice.getOriginPrice().add(bulkDeliveryPrice));
        bulkTradePrice.setTotalPrice(bulkTradePrice.getTotalPrice().add(bulkDeliveryPrice));//应付金额 = 应付+运
        bulkFreight.get(0).setTradePrice(bulkTradePrice);

        log.info("最终trade:{}", trades);
        log.info("bossFreight运费:{}", JSON.toJSONString(bossFreight));
        log.info("bulkFreight运费:{}",JSON.toJSONString(bulkFreight));

        if (CollectionUtils.isNotEmpty(storeFreight)){
            for (Trade inner : storeFreight) {
                computerTradeDeliveryPrice(inner);
            }
        }
    }

    private void computerTradeDeliveryPrice(Trade inner) {
        TradePrice tradePrice = inner.getTradePrice();
        BigDecimal deliveryPrice = BigDecimal.ZERO ;
        if(isTmsDelivery(inner.getDeliverWay())) {
            //TmsOrderAmountDTO tmsOrderAmountDTO = this.getTmsOrderAmountDTOByTradeInfo(inner);
            //deliveryPrice =BigDecimal.valueOf(tmsOrderAmountDTO.getAmount());
        }else {
            // 8.4.计算运费
            deliveryPrice = this.calcTradeFreight(inner.getConsignee(), inner.getSupplier(),
                    inner.getDeliverWay(),
                    tradePrice.getTotalPrice(), inner.getTradeItems(), inner.getGifts());
        }
        tradePrice.setDeliveryPrice(deliveryPrice);
        //判断是否为秒杀抢购订单
        if (Objects.nonNull(inner.getIsFlashSaleGoods()) && inner.getIsFlashSaleGoods()) {
            //秒杀商品是否包邮
            //获取秒杀抢购活动详情
            FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
                    .id(inner.getTradeItems().get(0).getFlashSaleGoodsId())
                    .build())
                    .getContext().getFlashSaleGoodsVO();
            if (flashSaleGoodsVO.getPostage().equals(1)) {
                deliveryPrice = BigDecimal.ZERO;
                tradePrice.setDeliveryPrice(BigDecimal.ZERO);
            }
        }

        // 8.5.订单总价、原始金额追加运费
        tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
        tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
    }



    /**
     * 移动端积分商品下单
     */
    @Transactional
    @LcnTransaction
    public PointsTradeCommitResult pointsCommit(PointsTradeCommitRequest commitRequest) {
        // 1.验证用户
        CustomerVO customer = verifyService.verifyCustomer(commitRequest.getOperator().getUserId());
        commitRequest.setCustomer(customer);

        // 2.包装积分订单信息
        Trade trade = this.wrapperPointsTrade(commitRequest);

        // 3.提交积分订单
        return this.createPointsTrade(trade, commitRequest.getOperator());
    }

    /**
     * 拼团订单--验证
     */
    private void validGroupon(TradeCommitRequest request, List<TradeItemGroup> tradeItemGroups) {

        if (tradeItemGroups.size() != NumberUtils.INTEGER_ONE) {
            // 拼团订单只能有一个订单
            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
        }

        TradeItemGroup tradeItemGroup = tradeItemGroups.get(NumberUtils.INTEGER_ZERO);
        if (tradeItemGroup.getTradeItems().size() != NumberUtils.INTEGER_ONE) {
            // 拼团订单只能有一个商品
            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
        }

        TradeItem tradeItem = tradeItemGroup.getTradeItems().get(NumberUtils.INTEGER_ZERO);
        if (CollectionUtils.isNotEmpty(tradeItemGroup.getTradeMarketingList())
                || DefaultFlag.YES.equals(tradeItemGroup.getStoreBagsFlag())
                || DistributionGoodsAudit.CHECKED.equals(tradeItem.getDistributionGoodsAudit())) {
            // 拼团单不应该具有营销活动、非开店礼包、不是分销商品
            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
        }

        // 验证拼团主体信息
        TradeGrouponCommitForm grouponForm = tradeItemGroup.getGrouponForm();
        GrouponTradeValid validInfo = GrouponTradeValid.builder()
                .buyCount(tradeItem.getNum().intValue())
                .customerId(request.getCustomer().getCustomerId())
                .goodsId(tradeItem.getSpuId())
                .goodsInfoId(tradeItem.getSkuId())
                .grouponNo(grouponForm.getGrouponNo())
                .openGroupon(grouponForm.getOpenGroupon())
                .build();
        GrouponGoodsInfoVO grouponGoodsInfo = grouponOrderService.validGrouponOrderBeforeCommit(validInfo);

        grouponForm.setGrouponActivityId(grouponGoodsInfo.getGrouponActivityId());
        grouponForm.setLimitSellingNum(grouponGoodsInfo.getLimitSellingNum());
        grouponForm.setGrouponPrice(grouponGoodsInfo.getGrouponPrice());
    }

    /**
     * 拼团订单--处理
     */
    private void dealGroupon(Trade trade, TradeParams tradeParams) {
        TradeGrouponCommitForm grouponForm = tradeParams.getGrouponForm();
        // 1.将价格设回拼团价
        trade.getTradeItems().forEach(item -> {
            item.setSplitPrice(grouponForm.getGrouponPrice().multiply(new BigDecimal(item.getNum())));
            item.setPrice(grouponForm.getGrouponPrice());
            item.setLevelPrice(grouponForm.getGrouponPrice());
        });

        TradeItem tradeItem = trade.getTradeItems().get(NumberUtils.INTEGER_ZERO);
        GrouponActivityVO grouponActivity = grouponActivityQueryProvider.getById(
                new GrouponActivityByIdRequest(grouponForm.getGrouponActivityId())).getContext().getGrouponActivity();
        grouponForm.setFreeDelivery(grouponActivity.isFreeDelivery());

        // 2.设置订单拼团信息
        TradeGroupon tradeGroupon = TradeGroupon.builder()
                .grouponNo(grouponForm.getGrouponNo())
                .grouponActivityId(grouponActivity.getGrouponActivityId())
                .goodInfoId(tradeItem.getSkuId())
                .goodId(tradeItem.getSpuId())
                .returnNum(NumberUtils.INTEGER_ZERO)
                .returnPrice(BigDecimal.ZERO)
                .grouponOrderStatus(GrouponOrderStatus.WAIT)
                .leader(grouponForm.getOpenGroupon())
                .payState(PayState.NOT_PAID).build();
        trade.setGrouponFlag(Boolean.TRUE);
        trade.setTradeGroupon(tradeGroupon);
        trade.setOrderTimeOut(LocalDateTime.now().plusMinutes(5L));

        // 3.如果是开团，设置团实例
        if (grouponForm.getOpenGroupon()) {
            // 设置团实例
            String grouponNo = generatorService.generateGrouponNo();
            GrouponInstance grouponInstance = GrouponInstance.builder()
                    .id(grouponNo)
                    .grouponNo(grouponNo)
                    .grouponActivityId(grouponActivity.getGrouponActivityId())
                    .grouponNum(grouponActivity.getGrouponNum())
                    .joinNum(NumberUtils.INTEGER_ZERO)
                    .customerId(tradeParams.getCustomer().getCustomerId())
                    .grouponStatus(GrouponOrderStatus.UNPAY)
                    .build();
            // 修改拼团信息中的团号
            tradeGroupon.setGrouponNo(grouponInstance.getGrouponNo());
            grouponInstanceRepository.save(grouponInstance);
        }

        // 4.如果活动为包邮，设置运费为0
        TradePrice tradePrice = trade.getTradePrice();
        if (grouponActivity.isFreeDelivery()) {
            tradePrice.setDeliveryPrice(BigDecimal.ZERO);
        }

        // 5.增加拼团活动单品的购买量
        GrouponRecordIncrBuyNumRequest request = GrouponRecordIncrBuyNumRequest.builder()
                .buyNum(tradeItem.getNum().intValue())
                .customerId(tradeParams.getCustomer().getCustomerId())
                .goodsId(tradeItem.getSpuId())
                .goodsInfoId(tradeItem.getSkuId())
                .grouponActivityId(grouponActivity.getGrouponActivityId())
                .limitSellingNum(grouponForm.getLimitSellingNum()).build();
        grouponRecordProvider.incrBuyNumByGrouponActivityIdAndCustomerIdAndGoodsInfoId(request);

    }


    /**
     * 从(囤货)购物车中删除商品信息
     */
    private void deletePurchaseOrder(String customerId, List<String> skuIds, DistributeChannel distributeChannel) {
        PurchaseRequest request = PurchaseRequest.builder()
                .customerId(customerId)
                .goodsInfoIds(skuIds).inviteeId(this.getPurchaseInviteeId(distributeChannel))
                .build();
        purchaseService.delete(request);
    }

    /**
     * 从(正常)购物车中删除商品信息
     */
    private void deleteShopCartOrder(String customerId, List<String> skuIds, DistributeChannel distributeChannel, Long wareId) {
        ShopCartRequest request = ShopCartRequest.builder()
                .customerId(customerId)
                .goodsInfoIds(skuIds).inviteeId(getPurchaseInviteeId(distributeChannel))
                .build();
        shopCartService.delete(request);


    }

    /**
     * 从(正常)购物车中删除商品信息
     */
    private void deleteShopCartOrderdevanning(String customerId, List<String> skuIds, List<Long> devannings, DistributeChannel distributeChannel, Long wareId) {
        ShopCartRequest request = ShopCartRequest.builder()
                .customerId(customerId).devanningIds(devannings)
                .goodsInfoIds(skuIds).inviteeId(getPurchaseInviteeId(distributeChannel))
                .build();
        shopCartService.delete(request);

        //删除购物车数据
        String numkey = RedisKeyConstants.SHOPPING_CART_HASH.concat(request.getCustomerId()).concat(wareId.toString());
        String key = RedisKeyConstants.SHOPPING_CART_EXTRA_HASH.concat(customerId).concat(wareId.toString());
        devannings.forEach(v -> {
            if (redisCache.HashHasKey(key, v.toString())) {
                redisCache.hashDel(key, v.toString());
                redisCache.hashDel(numkey, RedisKeyConstants.is_check.concat(v.toString()));
                redisCache.hashDel(numkey, RedisKeyConstants.good_num.concat(v.toString()));
            }
        });
        //删除购物车快照
        String kkey = RedisKeyConstants.FIRST_SNAPSHOT.concat(request.getCustomerId());
        redisCache.delete(kkey);

    }


    /**
     * 删除零售购物车商品信息
     */
    private void deleteRetailShopCartOrder(String customerId, List<String> skuIds, DistributeChannel distributeChannel, Long wareId) {
        RetailShopCartRequest request = RetailShopCartRequest.builder()
                .customerId(customerId)
                .goodsInfoIds(skuIds).inviteeId(getPurchaseInviteeId(distributeChannel))
                .build();
        retailShopCartService.delete(request);

        //删除购物车数据
        String key = RedisKeyConstants.RTAIL_SHOPPING_CART_EXTRA_HASH.concat(customerId);
        String numkey = RedisKeyConstants.RTAIL_SHOPPING_CART_HASH.concat(customerId);
        skuIds.forEach(v -> {
            if (redisCache.HashHasKey(key, v)) {
                redisCache.hashDel(key, v);
                redisCache.hashDel(numkey, RedisKeyConstants.is_check.concat(v));
                redisCache.hashDel(numkey, RedisKeyConstants.good_num.concat(v));
            }
        });
        //删除购物车快照
        String kkey = RedisKeyConstants.FIRST_SNAPSHOT.concat(request.getCustomerId());
        redisCache.delete(kkey);
    }



    private void deleteBulkShopCartOrder(String customerId, List<String> skuIds, DistributeChannel distributeChannel, Long wareId) {
        BulkShopCartRequest request = BulkShopCartRequest.builder()
                .customerId(customerId)
                .goodsInfoIds(skuIds).inviteeId(getPurchaseInviteeId(distributeChannel))
                .build();
        bulkShopCartService.delete(request);

        //删除购物车数据

        String key = BulkShopCartCacheSupport.buildExtraKey(customerId,wareId);
        log.info("deleteBulkShopCartOrder:{}", key);
        String numkey = BulkShopCartCacheSupport.buildKey(customerId,wareId);
        skuIds.forEach(v -> {
            if (redisCache.HashHasKey(key, v)) {
                redisCache.hashDel(key, v);

                redisCache.hashDel(numkey, BulkShopCartCacheSupport.buildHashKeyOfIsCheck(v));
                redisCache.hashDel(numkey, BulkShopCartCacheSupport.buildHashKeyOfGoodNum(v));
            }
        });
        //删除购物车快照
        String kkey = RedisKeyConstants.FIRST_SNAPSHOT.concat(request.getCustomerId());
        redisCache.delete(kkey);
    }





    /**
     * 获取购物车归属
     * 当且仅当为店铺精选时，需要根据InviteeId区分购物车
     */
    public String getPurchaseInviteeId(DistributeChannel distributeChannel) {

        if (null != distributeChannel && Objects.equals(distributeChannel.getChannelType(), ChannelType.SHOP)) {
            return distributeChannel.getInviteeId();
        }
        return Constants.PURCHASE_DEFAULT;
    }

    /**
     * 将用户下单信息 根据不同店铺 包装成 多个订单 [前端客户下单]
     * 1.校验营销活动
     * 2.校验商品是否可以下单
     * 3.填充订单商品,订单赠品,订单营销信息...
     *
     * @return
     */
    public List<Trade> wrapperTradeList(TradeCommitRequest tradeCommitRequest, List<TradeItemGroup> tradeItemGroups) {
        CustomerVO customer = tradeCommitRequest.getCustomer();
        List<Trade> trades = new ArrayList<>();

        // 1.查询快照中的购物清单
        // list转map,方便获取 店铺id为key
        Map<Long, TradeItemGroup> tradeItemGroupsMap = tradeItemGroups.stream().collect(
                Collectors.toMap(g -> g.getSupplier().getStoreId(), Function.identity()));

        List<StoreVO> storeVOList = tradeCacheService.queryStoreList(new ArrayList<>(tradeItemGroupsMap.keySet()));

        Map<Long, StoreVO> storeMap = new HashMap<>();
        if (CollectionUtils.isNotEmpty(storeVOList)) {
            storeMap.putAll(storeVOList.stream().collect(Collectors.toMap(StoreVO::getStoreId, s -> s)));
        }

        CustomerLevelMapByCustomerIdAndStoreIdsRequest request = new CustomerLevelMapByCustomerIdAndStoreIdsRequest();
        request.setCustomerId(customer.getCustomerId());
        request.setStoreIds(new ArrayList<>(tradeItemGroupsMap.keySet()));
        Map<Long, CommonLevelVO> storeLevelMap = customerLevelQueryProvider.listCustomerLevelMapByCustomerIdAndIds
                (request)
                .getContext().getCommonLevelVOMap();

        // 2.遍历各个店铺下单信息
        TradeItemSnapshot tradeItemSnapshot = tradeItemService.findTradeItemSnapshot(customer.getCustomerId());
        tradeCommitRequest.getStoreCommitInfoList().forEach(
                i -> {
                    TradeItemGroup group = tradeItemGroupsMap.get(i.getStoreId());
                    // 2.1.组装发票信息(缺少联系人,联系方式), 统一入参, 方便调用公共方法
                    Invoice invoice = Invoice.builder()
                            .generalInvoice(KsBeanUtil.convert(i.getGeneralInvoice(), GeneralInvoice.class))
                            .specialInvoice(KsBeanUtil.convert(i.getSpecialInvoice(), SpecialInvoice.class))
                            .address(i.getInvoiceAddressDetail())
                            .addressId(i.getInvoiceAddressId())
                            .projectId(i.getInvoiceProjectId())
                            .projectName(i.getInvoiceProjectName())
                            .projectUpdateTime(i.getInvoiceProjectUpdateTime())
                            .type(i.getInvoiceType())
                            .sperator(i.isSpecialInvoiceAddress())
                            .updateTime(i.getInvoiceAddressUpdateTime())
                            .taxNo(this.setInvoiceTaxNo(i.getInvoiceType(), i.getGeneralInvoice(), i.getSpecialInvoice()))
                            .build();
                    if (storeMap.get(group.getSupplier().getStoreId()) == null) {
                        throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
                    }
                    group.getSupplier().setFreightTemplateType(
                            storeMap.get(group.getSupplier().getStoreId()).getFreightTemplateType());
                    boolean flashSale = verifyflashSale(group);

                    // 2.2.【公共方法】下单信息验证, 将信息包装成订单
                    trades.add(this.validateAndWrapperTrade(new Trade(),
                            TradeParams.builder()
                                    .backendFlag(false) //表示前端操作
                                    .commitFlag(true) //表示下单
                                    .marketingList(group.getTradeMarketingList())
                                    .couponCodeId(i.getCouponCodeId())
                                    .tradePrice(new TradePrice())
                                    .tradeItems(group.getTradeItems())
                                    .oldGifts(Collections.emptyList())//下单,非修改订单
                                    .oldTradeItems(Collections.emptyList())//下单,非修改订单
                                    .storeLevel(storeLevelMap.get(group.getSupplier().getStoreId()))
                                    .customer(customer)
                                    .supplier(group.getSupplier())
                                    .seller(null) //客户下单
                                    .consigneeId(tradeCommitRequest.getConsigneeId())
                                    .detailAddress(tradeCommitRequest.getConsigneeAddress())
                                    .consigneeUpdateTime(tradeCommitRequest.getConsigneeUpdateTime())
                                    .consignee(null) //客户下单,不可填写临时收货地址
                                    .invoice(invoice)
                                    .invoiceConsignee(null) //客户下单,不可填写发票临时收货地址
                                    .deliverWay(i.getDeliverWay())
                                    .payType(i.getPayType())
                                    .buyerRemark(i.getBuyerRemark())
                                    .sellerRemark(null) //客户下单,无卖家备注
                                    .encloses(i.getEncloses())
                                    .ip(tradeCommitRequest.getOperator().getIp())
                                    .platform(Platform.CUSTOMER)
                                    .forceCommit(tradeCommitRequest.isForceCommit())
                                    .orderSource(tradeCommitRequest.getOrderSource())
                                    .distributeChannel(tradeCommitRequest.getDistributeChannel())
                                    .storeBagsFlag(group.getStoreBagsFlag())
                                    .shopName(tradeCommitRequest.getShopName())
                                    .isDistributor(tradeCommitRequest.getIsDistributor())
                                    .storeOpenFlag(i.getStoreOpenFlag())
                                    .openFlag(tradeCommitRequest.getOpenFlag())
                                    .grouponForm(group.getGrouponForm())
                                    .shareUserId(customer.getCustomerId().equals(tradeCommitRequest.getShareUserId())
                                            ? null : tradeCommitRequest.getShareUserId())
                                    .isFlashSaleGoods(flashSale)
                                    .wareHouseCode(i.getWareHouseCode())
                                    .wareId(i.getWareId())
                                    .tradeWareHouse(this.wareHouseTurnToTrade(i.getWareHouseVO()))
                                    .bookingDate(i.getBookingDate())
                                    .logisticsInfo(this.toLogisticsInfo(i.getLogisticsInfo()))
                                    .group(group)
                                    .suitBuyCount(tradeItemSnapshot.getSuitBuyCount())
                                    .marketingId(tradeItemSnapshot.getMarketingId())
                                    .sourceChannel(tradeCommitRequest.getSourceChannel())
                                    .saleType(group.getSaleType())
                                    .build()));
                }
        );
        return trades;
    }


    /**
     * 将用户下单信息 根据不同店铺 包装成 多个订单 [前端客户下单] 拆箱
     * 1.校验营销活动
     * 2.校验商品是否可以下单
     * 3.填充订单商品,订单赠品,订单营销信息...
     *
     * @return
     */
    public List<Trade> wrapperTradeListDevanning(TradeCommitRequest tradeCommitRequest, List<TradeItemGroup> tradeItemGroups) {
        StopWatch stopWatch = new StopWatch("封装订单方法");
        stopWatch.start("获取订单店铺分组");
        CustomerVO customer = tradeCommitRequest.getCustomer();
        List<Trade> trades = new ArrayList<>();

        // 1.查询快照中的购物清单
        // list转map,方便获取 店铺id为key
        Map<Long, TradeItemGroup> tradeItemGroupsMap = tradeItemGroups.stream().collect(
                Collectors.toMap(g -> g.getSupplier().getStoreId(), Function.identity()));

        List<StoreVO> storeVOList = tradeCacheService.queryStoreList(new ArrayList<>(tradeItemGroupsMap.keySet()));

        Map<Long, StoreVO> storeMap = new HashMap<>();
        if (CollectionUtils.isNotEmpty(storeVOList)) {
            storeMap.putAll(storeVOList.stream().collect(Collectors.toMap(StoreVO::getStoreId, s -> s)));
        }
        stopWatch.stop();
        stopWatch.start("获取用户等级");
        CustomerLevelMapByCustomerIdAndStoreIdsRequest request = new CustomerLevelMapByCustomerIdAndStoreIdsRequest();
        request.setCustomerId(customer.getCustomerId());
        request.setStoreIds(new ArrayList<>(tradeItemGroupsMap.keySet()));
        Map<Long, CommonLevelVO> storeLevelMap = customerLevelQueryProvider.listCustomerLevelMapByCustomerIdAndIds
                (request)
                .getContext().getCommonLevelVOMap();
        stopWatch.stop();
        stopWatch.start("获取快照");
        // 2.遍历各个店铺下单信息
        TradeItemSnapshot tradeItemSnapshot = tradeItemService.findTradeItemSnapshot(customer.getCustomerId());
        stopWatch.stop();
        stopWatch.start("遍历订单封装");
        tradeCommitRequest.getStoreCommitInfoList().forEach(
                i -> {
                    TradeItemGroup group = tradeItemGroupsMap.get(i.getStoreId());
                    // 2.1.组装发票信息(缺少联系人,联系方式), 统一入参, 方便调用公共方法
                    Invoice invoice = Invoice.builder()
                            .generalInvoice(KsBeanUtil.convert(i.getGeneralInvoice(), GeneralInvoice.class))
                            .specialInvoice(KsBeanUtil.convert(i.getSpecialInvoice(), SpecialInvoice.class))
                            .address(i.getInvoiceAddressDetail())
                            .addressId(i.getInvoiceAddressId())
                            .projectId(i.getInvoiceProjectId())
                            .projectName(i.getInvoiceProjectName())
                            .projectUpdateTime(i.getInvoiceProjectUpdateTime())
                            .type(i.getInvoiceType())
                            .sperator(i.isSpecialInvoiceAddress())
                            .updateTime(i.getInvoiceAddressUpdateTime())
                            .taxNo(setInvoiceTaxNo(i.getInvoiceType(), i.getGeneralInvoice(), i.getSpecialInvoice()))
                            .build();
                    if (storeMap.get(group.getSupplier().getStoreId()) == null) {
                        throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
                    }
                    group.getSupplier().setFreightTemplateType(
                            storeMap.get(group.getSupplier().getStoreId()).getFreightTemplateType());
                    boolean flashSale = verifyflashSale(group);

                    // 2.2.【公共方法】下单信息验证, 将信息包装成订单
                    trades.add(this.validateAndWrapperTradeDevsnning(new Trade(),
                            TradeParams.builder()
                                    .backendFlag(false) //表示前端操作
                                    .commitFlag(true) //表示下单
                                    .marketingList(group.getTradeMarketingList())
                                    .couponCodeId(i.getCouponCodeId())
                                    .tradePrice(new TradePrice())
                                    .tradeItems(group.getTradeItems())
                                    .oldGifts(Collections.emptyList())//下单,非修改订单
                                    .oldTradeItems(Collections.emptyList())//下单,非修改订单
                                    .storeLevel(storeLevelMap.get(group.getSupplier().getStoreId()))
                                    .customer(customer)
                                    .supplier(group.getSupplier())
                                    .seller(null) //客户下单
                                    .consigneeId(tradeCommitRequest.getConsigneeId())
                                    .detailAddress(tradeCommitRequest.getConsigneeAddress())
                                    .consigneeUpdateTime(tradeCommitRequest.getConsigneeUpdateTime())
                                    .consignee(null) //客户下单,不可填写临时收货地址
                                    .invoice(invoice)
                                    .invoiceConsignee(null) //客户下单,不可填写发票临时收货地址
                                    .deliverWay(i.getDeliverWay())
                                    .payType(i.getPayType())
                                    .buyerRemark(i.getBuyerRemark())
                                    .sellerRemark(null) //客户下单,无卖家备注
                                    .encloses(i.getEncloses())
                                    .ip(tradeCommitRequest.getOperator().getIp())
                                    .platform(Platform.CUSTOMER)
                                    .forceCommit(tradeCommitRequest.isForceCommit())
                                    .orderSource(tradeCommitRequest.getOrderSource())
                                    .distributeChannel(tradeCommitRequest.getDistributeChannel())
                                    .storeBagsFlag(group.getStoreBagsFlag())
                                    .shopName(tradeCommitRequest.getShopName())
                                    .isDistributor(tradeCommitRequest.getIsDistributor())
                                    .storeOpenFlag(i.getStoreOpenFlag())
                                    .openFlag(tradeCommitRequest.getOpenFlag())
                                    .grouponForm(group.getGrouponForm())
                                    .shareUserId(customer.getCustomerId().equals(tradeCommitRequest.getShareUserId())
                                            ? null : tradeCommitRequest.getShareUserId())
                                    .isFlashSaleGoods(flashSale)
                                    .wareHouseCode(i.getWareHouseCode())
                                    .wareId(i.getWareId())
                                    .wareName(tradeCommitRequest.getWareName())
                                    .tradeWareHouse(wareHouseTurnToTrade(i.getWareHouseVO()))
                                    .bookingDate(i.getBookingDate())
                                    .logisticsInfo(toLogisticsInfo(i.getLogisticsInfo()))
                                    .group(group)
                                    .suitBuyCount(tradeItemSnapshot.getSuitBuyCount())
                                    .marketingId(tradeItemSnapshot.getMarketingId())
                                    .sourceChannel(tradeCommitRequest.getSourceChannel())
                                    .saleType(group.getSaleType())
                                    .netWorkVO(tradeCommitRequest.getNetWorkVO())
                                    .build()));
                }
        );
        stopWatch.stop();
        log.info("封装订单核心方法"+stopWatch.prettyPrint());
        return trades;
    }


    /**
     * 提货 将用户下单信息 根据不同店铺 包装成 多个订单 [前端客户下单]
     *
     * @param tradeCommitRequest
     * @param tradeItemGroups
     * @return
     */
    public List<Trade> takeGoodWrapperTradeList(TradeCommitRequest tradeCommitRequest, List<TradeItemGroup> tradeItemGroups) {
        CustomerVO customer = tradeCommitRequest.getCustomer();
        List<Trade> trades = new ArrayList<>();

        // 1.查询快照中的购物清单
        // list转map,方便获取 店铺id为key
        Map<Long, TradeItemGroup> tradeItemGroupsMap = tradeItemGroups.stream().collect(
                Collectors.toMap(g -> g.getSupplier().getStoreId(), Function.identity()));

        List<StoreVO> storeVOList = tradeCacheService.queryStoreList(new ArrayList<>(tradeItemGroupsMap.keySet()));

        Map<Long, StoreVO> storeMap = new HashMap<>();
        if (CollectionUtils.isNotEmpty(storeVOList)) {
            storeMap.putAll(storeVOList.stream().collect(Collectors.toMap(StoreVO::getStoreId, s -> s)));
        }

        CustomerLevelMapByCustomerIdAndStoreIdsRequest request = new CustomerLevelMapByCustomerIdAndStoreIdsRequest();
        request.setCustomerId(customer.getCustomerId());
        request.setStoreIds(new ArrayList<>(tradeItemGroupsMap.keySet()));
        Map<Long, CommonLevelVO> storeLevelMap = customerLevelQueryProvider.listCustomerLevelMapByCustomerIdAndIds
                (request)
                .getContext().getCommonLevelVOMap();

        // 2.遍历各个店铺下单信息
        tradeCommitRequest.getStoreCommitInfoList().forEach(
                i -> {
                    TradeItemGroup group = tradeItemGroupsMap.get(i.getStoreId());
                    // 2.1.组装发票信息(缺少联系人,联系方式), 统一入参, 方便调用公共方法
                    Invoice invoice = Invoice.builder()
                            .generalInvoice(KsBeanUtil.convert(i.getGeneralInvoice(), GeneralInvoice.class))
                            .specialInvoice(KsBeanUtil.convert(i.getSpecialInvoice(), SpecialInvoice.class))
                            .address(i.getInvoiceAddressDetail())
                            .addressId(i.getInvoiceAddressId())
                            .projectId(i.getInvoiceProjectId())
                            .projectName(i.getInvoiceProjectName())
                            .projectUpdateTime(i.getInvoiceProjectUpdateTime())
                            .type(i.getInvoiceType())
                            .sperator(i.isSpecialInvoiceAddress())
                            .updateTime(i.getInvoiceAddressUpdateTime())
                            .taxNo(this.setInvoiceTaxNo(i.getInvoiceType(), i.getGeneralInvoice(), i.getSpecialInvoice()))
                            .build();
                    if (storeMap.get(group.getSupplier().getStoreId()) == null) {
                        throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
                    }
                    group.getSupplier().setFreightTemplateType(
                            storeMap.get(group.getSupplier().getStoreId()).getFreightTemplateType());
                    boolean flashSale = verifyflashSale(group);

                    // 2.2.【公共方法】下单信息验证, 将信息包装成订单
                    trades.add(this.takeGoodValidateAndWrapperTrade(new Trade(),
                            TradeParams.builder()
                                    .backendFlag(false) //表示前端操作
                                    .commitFlag(true) //表示下单
                                    .marketingList(group.getTradeMarketingList())
                                    .couponCodeId(i.getCouponCodeId())
                                    .tradePrice(new TradePrice())
                                    .tradeItems(group.getTradeItems())
                                    .oldGifts(Collections.emptyList())//下单,非修改订单
                                    .oldTradeItems(Collections.emptyList())//下单,非修改订单
                                    .storeLevel(storeLevelMap.get(group.getSupplier().getStoreId()))
                                    .customer(customer)
                                    .supplier(group.getSupplier())
                                    .seller(null) //客户下单
                                    .consigneeId(tradeCommitRequest.getConsigneeId())
                                    .detailAddress(tradeCommitRequest.getConsigneeAddress())
                                    .consigneeUpdateTime(tradeCommitRequest.getConsigneeUpdateTime())
                                    .consignee(null) //客户下单,不可填写临时收货地址
                                    .invoice(invoice)
                                    .invoiceConsignee(null) //客户下单,不可填写发票临时收货地址
                                    .deliverWay(i.getDeliverWay())
                                    .payType(i.getPayType())
                                    .buyerRemark(i.getBuyerRemark())
                                    .sellerRemark(null) //客户下单,无卖家备注
                                    .encloses(i.getEncloses())
                                    .ip(tradeCommitRequest.getOperator().getIp())
                                    .platform(Platform.CUSTOMER)
                                    .forceCommit(tradeCommitRequest.isForceCommit())
                                    .orderSource(tradeCommitRequest.getOrderSource())
                                    .distributeChannel(tradeCommitRequest.getDistributeChannel())
                                    .storeBagsFlag(group.getStoreBagsFlag())
                                    .shopName(tradeCommitRequest.getShopName())
                                    .isDistributor(tradeCommitRequest.getIsDistributor())
                                    .storeOpenFlag(i.getStoreOpenFlag())
                                    .openFlag(tradeCommitRequest.getOpenFlag())
                                    .grouponForm(group.getGrouponForm())
                                    .shareUserId(customer.getCustomerId().equals(tradeCommitRequest.getShareUserId())
                                            ? null : tradeCommitRequest.getShareUserId())
                                    .isFlashSaleGoods(flashSale)
                                    .wareHouseCode(i.getWareHouseCode())
                                    .wareId(i.getWareId())
                                    .tradeWareHouse(this.wareHouseTurnToTrade(i.getWareHouseVO()))
                                    .bookingDate(i.getBookingDate())
                                    .logisticsInfo(this.toLogisticsInfo(i.getLogisticsInfo()))
                                    .group(group)
                                    .build()));
                }
        );
        return trades;
    }


    public Trade wrapperPointsTrade(PointsTradeCommitRequest commitRequest) {
        Trade trade = new Trade();
        // 设置订单基本信息(购买人,商家,收货地址,配送方式,支付方式,备注,订单商品,订单总价...)
        Optional<CommonLevelVO> commonLevelVO;
        boolean flag = true;
        commonLevelVO =
                Optional.of(this.fromCustomerLevel(customerLevelQueryProvider.getDefaultCustomerLevel().getContext()));
        trade.setBuyer(Buyer.fromCustomer(commitRequest.getCustomer(), commonLevelVO, flag));
        trade.setSupplier(KsBeanUtil.convert(commitRequest.getPointsTradeItemGroup().getSupplier(), Supplier.class));
        TradeItem tradeItem = KsBeanUtil.convert(commitRequest.getPointsTradeItemGroup().getTradeItem(),
                TradeItem.class);
        tradeItem.setOid(generatorService.generateOid());
        if (StringUtils.isBlank(tradeItem.getAdminId())) {
            tradeItem.setAdminId(String.format("%d", trade.getSupplier().getSupplierId()));
        }

        trade.setId(generatorService.generateTid());
        trade.setPlatform(Platform.CUSTOMER);
        trade.setOrderSource(OrderSource.WECHAT);
        trade.setOrderType(OrderType.POINTS_ORDER);
        trade.setPointsOrderType(PointsOrderType.POINTS_GOODS);
        trade.setConsignee(this.wrapperConsignee(commitRequest.getConsigneeId(), commitRequest.getConsigneeAddress(),
                commitRequest.getConsigneeUpdateTime(), null));
        trade.setDeliverWay(DeliverWay.EXPRESS);
        trade.setPayInfo(PayInfo.builder()
                .payTypeId(String.format("%d", PayType.ONLINE.toValue()))
                .payTypeName(PayType.ONLINE.name())
                .desc(PayType.ONLINE.getDesc())
                .build());
        trade.setBuyerRemark(commitRequest.getBuyerRemark());
        trade.setRequestIp(commitRequest.getOperator().getIp());
        trade.setTradeItems(Collections.singletonList(tradeItem));
        trade.setTradePrice(TradePrice.builder().points(commitRequest.getPointsTradeItemGroup().getTradeItem()
                .getPoints() * commitRequest.getPointsTradeItemGroup().getTradeItem().getNum()).build());

        return trade;
    }

    /**
     * 设置纳税人识别号
     *
     * @param invoiceType    发票类型 0：普通发票 1：增值税发票 -1：无
     * @param generalInvoice 普票信息
     * @param specialInvoice 增票信息
     * @return
     */
    private String setInvoiceTaxNo(
            Integer invoiceType, GeneralInvoiceDTO generalInvoice, SpecialInvoiceDTO specialInvoice) {
        String taxNo = "";
        //不需要发票
        if (!InvoiceType.NORMAL.equals(invoiceType) && !InvoiceType.SPECIAL.equals(invoiceType)) {
            return taxNo;
        }
        //增票
        if (InvoiceType.SPECIAL.equals(invoiceType)) {
            taxNo = Objects.nonNull(specialInvoice) ? specialInvoice.getIdentification() : "";
        } else {
            taxNo = Objects.nonNull(generalInvoice) ? generalInvoice.getIdentification() : "";
        }
        return taxNo;
    }

    /**
     * 计算包装费
     *
     * @param trades
     */
    public void calPacking(List<Trade> trades) {
        trades.forEach(trade -> {
            //零售
            if (Objects.nonNull(trade.getSaleType()) && SaleType.RETAIL.equals(trade.getSaleType())) {
                //包装费配置信息
                PackingConfigVO packingConfigVO = packingConfigQueryProvider.list().getContext().getPackingConfigVO();
                if (Objects.nonNull(packingConfigVO) && Objects.nonNull(packingConfigVO.getPackingAmount())
                        && packingConfigVO.getPackingAmount().compareTo(BigDecimal.ZERO) > 0) {
                    trade.getTradePrice().setPackingPrice(packingConfigVO.getPackingAmount());
                    //订单总价 追加包装费
                    trade.getTradePrice().setOriginPrice(trade.getTradePrice().getOriginPrice().add(packingConfigVO.getPackingAmount()));
                    //订单应付 追加包装费
                    trade.getTradePrice().setTotalPrice(trade.getTradePrice().getTotalPrice().add(packingConfigVO.getPackingAmount()));
                }
            }
        });
    }

    public void dealPoints(List<Trade> trades, TradeCommitRequest tradeCommitRequest) {
        if (tradeCommitRequest.getPoints() == null || tradeCommitRequest.getPoints() <= 0) {
            return;
        }
        // 如果使用积分 校验可使用积分
        verifyService.verifyPoints(trades, tradeCommitRequest);

        List<TradeItem> items =
                trades.stream().flatMap(trade -> trade.getTradeItems().stream().filter(param -> (Objects.nonNull(param.getGoodsInfoType())
                        && param.getGoodsInfoType() == 0))).collect(Collectors.toList());

        // 设置关联商品的积分均摊
        // 查询积分设置
        SystemPointsConfigQueryResponse pointsConfig =
                systemPointsConfigQueryProvider.querySystemPointsConfig().getContext();
        BigDecimal pointWorth = BigDecimal.valueOf(pointsConfig.getPointsWorth());
        BigDecimal pointsTotalPrice = BigDecimal.valueOf(tradeCommitRequest.getPoints()).divide(pointWorth, 2,
                BigDecimal.ROUND_HALF_UP);
        tradeItemService.calcPoints(items, pointsTotalPrice, tradeCommitRequest.getPoints(), pointWorth);

        // 设置关联商品的均摊价
        BigDecimal total = tradeItemService.calcSkusTotalPrice(items);
        tradeItemService.calcSplitPrice(items, total.subtract(pointsTotalPrice), total);

        Map<Long, List<TradeItem>> itemsMap = items.stream().collect(Collectors.groupingBy(TradeItem::getStoreId));
        itemsMap.keySet().forEach(storeId -> {
            // 找到店铺对应订单的价格信息
            Trade trade = trades.stream()
                    .filter(t -> t.getSupplier().getStoreId().equals(storeId)).findFirst().orElse(null);
            TradePrice tradePrice = trade.getTradePrice();

            // 计算积分抵扣额(pointsPrice、points)，并追加至订单优惠金额、积分抵扣金额
            BigDecimal pointsPrice = tradeItemService.calcSkusTotalPointsPrice(itemsMap.get(storeId));
            Long points = tradeItemService.calcSkusTotalPoints(itemsMap.get(storeId));
            tradePrice.setPointsPrice(pointsPrice);
            tradePrice.setPoints(points);
            tradePrice.setPointWorth(pointsConfig.getPointsWorth());
            // 重设订单总价
            tradePrice.setTotalPrice(tradePrice.getTotalPrice().subtract(pointsPrice));
        });
    }

    /**
     * 构建订单组对象，同时修改订单列表中相应的价格信息
     *
     * @param trades             订单列表
     * @param tradeCommitRequest
     * @return
     */
    public TradeGroup wrapperTradeGroup(
            List<Trade> trades, TradeCommitRequest tradeCommitRequest, TradeGrouponCommitForm grouponForm) {
        if (tradeCommitRequest.getCommonCodeId() == null) {
            return null;
        }
        CustomerVO customer = tradeCommitRequest.getCustomer();
        TradeGroup tradeGroup = new TradeGroup();

        /**
         * 分开处理批发和散批
         */
        // 1.请求营销插件，验证并包装优惠券信息(这里只需要批发订单 add by jiangxin 20220326)
        List<TradeItem> items = trades.stream().filter(item -> item.getSaleType().equals(SaleType.WHOLESALE)).flatMap(trade -> trade.getTradeItems().stream()).collect(Collectors.toList());
        TradeCouponVO tradeCoupon = this.buildTradeCouponInfo(
                items,
                tradeCommitRequest.getCommonCodeId(),
                tradeCommitRequest.isForceCommit(),
                StringUtils.isNotBlank(customer.getParentCustomerId()) ? customer.getParentCustomerId() : customer.getCustomerId());
        BigDecimal totalPriceForWholeSale = BigDecimal.ZERO;
        if(Objects.nonNull(tradeCoupon) && CollectionUtils.isNotEmpty(items)){
            for (TradeItem tradeItem : items) {
                Long num = tradeItem.getNum();
                BigDecimal price = tradeItem.getPrice();
                totalPriceForWholeSale = totalPriceForWholeSale.add(BigDecimal.valueOf(num).multiply(price));
            }
        }
        if (tradeCoupon == null || totalPriceForWholeSale.compareTo(tradeCoupon.getFullBuyPrice()) < 0) {// 要判断是否达到门槛？
            items = trades.stream().filter(item -> item.getSaleType().equals(SaleType.BULK)).flatMap(trade -> trade.getTradeItems().stream()).collect(Collectors.toList());
            tradeCoupon = this.buildTradeCouponInfo(
                    items,
                    tradeCommitRequest.getCommonCodeId(),
                    tradeCommitRequest.isForceCommit(),
                    StringUtils.isNotBlank(customer.getParentCustomerId()) ? customer.getParentCustomerId() : customer.getCustomerId());
            BigDecimal totalPriceForBulk = BigDecimal.ZERO;
            if(Objects.nonNull(tradeCoupon) && CollectionUtils.isNotEmpty(items)){
                for (TradeItem tradeItem : items) {
                    Long num = tradeItem.getNum();
                    BigDecimal price = tradeItem.getPrice();
                    totalPriceForBulk = totalPriceForBulk.add(BigDecimal.valueOf(num).multiply(price));
                }
            }

            if (Objects.isNull(tradeCoupon) || totalPriceForBulk.compareTo(tradeCoupon.getFullBuyPrice()) < 0) {
                items = trades.stream().filter(item -> item.getSaleType().equals(SaleType.RETAIL)).flatMap(trade -> trade.getTradeItems().stream()).collect(Collectors
                        .toList());
                tradeCoupon = this.buildTradeCouponInfo(
                        items,
                        tradeCommitRequest.getCommonCodeId(),
                        tradeCommitRequest.isForceCommit(),
                        StringUtils.isNotBlank(customer.getParentCustomerId()) ? customer.getParentCustomerId() : customer.getCustomerId());
                BigDecimal totalPriceForRetail = BigDecimal.ZERO;
                if(Objects.nonNull(tradeCoupon) && CollectionUtils.isNotEmpty(items)){
                    for (TradeItem tradeItem : items) {
                        Long num = tradeItem.getNum();
                        BigDecimal price = tradeItem.getPrice();
                        totalPriceForRetail = totalPriceForRetail.add(BigDecimal.valueOf(num).multiply(price));
                    }
                }

                if (Objects.isNull(tradeCoupon) ) {
                    return null;
                }
                if (tradeCoupon.getFullbuyType().equals(FullBuyType.FULL_MONEY) && totalPriceForRetail.compareTo(tradeCoupon.getFullBuyPrice()) < 0){
                    return null;
                }
            }
        }
        log.info("================ items:{}", items);
        log.info("================ goodsInfoIds:{}", tradeCoupon.getGoodsInfoIds());
        // 2.找出需要均摊的商品，以及总价
        TradeCouponVO finalTradeCoupon = tradeCoupon;
        List<TradeItem> matchItems = items.stream()
                .filter(t -> finalTradeCoupon.getGoodsInfoIds().contains(t.getSkuId())).collect(Collectors.toList());
        BigDecimal total = tradeItemService.calcSkusTotalPrice(matchItems);
        log.info("================= matchItems:{}", matchItems);
        // 3.判断是否达到优惠券使用门槛
        BigDecimal fullBuyPrice = finalTradeCoupon.getFullBuyPrice();
        if (fullBuyPrice != null && fullBuyPrice.compareTo(total) == 1) {
            log.error("fullBuyPrice:{},total:{}===================", fullBuyPrice, total);
            throw new SbcRuntimeException(CouponErrorCode.CUSTOMER_ORDER_COUPON_INVALID);
        }

        // 4.如果商品总价小于优惠券优惠金额，设置优惠金额为商品总价
        if (total.compareTo(finalTradeCoupon.getDiscountsAmount()) == -1) {
            finalTradeCoupon.setDiscountsAmount(total);
        }

        // 5.设置关联商品的结算信息
        matchItems.forEach(item ->
                item.getCouponSettlements().add(TradeItem.CouponSettlement.builder()
                        .couponType(finalTradeCoupon.getCouponType())
                        .couponCodeId(finalTradeCoupon.getCouponCodeId())
                        .couponCode(finalTradeCoupon.getCouponCode())
                        .splitPrice(item.getSplitPrice()).build())
        );

        // 6.设置关联商品的均摊价
        tradeItemService.calcSplitPrice(matchItems, total.subtract(finalTradeCoupon.getDiscountsAmount()), total);

        // 7.刷新关联商品的结算信息
        matchItems.forEach(item -> {
            TradeItem.CouponSettlement settlement =
                    item.getCouponSettlements().get(item.getCouponSettlements().size() - 1);
            settlement.setReducePrice(settlement.getSplitPrice().subtract(item.getSplitPrice()));
            settlement.setSplitPrice(item.getSplitPrice());
        });

        // 8.按店铺分组被均摊的商品，刷新相应订单的价格信息
        Map<Long, List<TradeItem>> itemsMap = items.stream().collect(Collectors.groupingBy(TradeItem::getStoreId));
        itemsMap.keySet().forEach(storeId -> {
            // 8.1.找到店铺对应订单的价格信息
            Trade trade = trades.stream()
                    .filter(t -> t.getSupplier().getStoreId().equals(storeId)).findFirst().orElse(null);
            TradePrice tradePrice = trade.getTradePrice();

            // 8.2.计算平台优惠券优惠额(couponPrice)，并追加至订单优惠金额、优惠券优惠金额
            BigDecimal marketTotalPrice = tradePrice.getGoodsPrice().subtract(tradePrice.getDiscountsPrice());
            BigDecimal couponTotalPrice = tradeItemService.calcSkusTotalPrice(itemsMap.get(storeId));
            BigDecimal couponPrice = marketTotalPrice.subtract(couponTotalPrice);
            tradePrice.setDiscountsPrice(tradePrice.getDiscountsPrice().add(couponPrice));
            tradePrice.setCouponPrice(tradePrice.getCouponPrice().add(couponPrice));

            // 8.3.重设订单总价、原始金额
            tradePrice.setTotalPrice(couponTotalPrice);
            tradePrice.setOriginPrice(tradePrice.getGoodsPrice());

            trade.getTradeItems().forEach(tradeItem -> {
                TradeItem matchItem = matchItems.stream().filter(
                        item -> item.getSkuId().equals(tradeItem.getSkuId())).findFirst().orElse(null);
                if (Objects.nonNull(tradeItem.getDevanningId())) {
                    matchItem = matchItems.stream().filter(
                            item -> item.getDevanningId().equals(tradeItem.getDevanningId())).findFirst().orElse(null);
                }
                if (matchItem != null) {
                    tradeItem.setSplitPrice(matchItem.getSplitPrice());
                }
            });

            // 8.4.计算运费
            /*BigDecimal deliveryPrice = this.calcTradeFreight(trade.getConsignee(), trade.getSupplier(),
                    trade.getDeliverWay(),
                    tradePrice.getTotalPrice(), trade.getTradeItems(), trade.getGifts());*/
            // 运费计算再之后进行计算 上述代码注释掉 运费默认为0 在后续再进行计算
          /*  BigDecimal deliveryPrice = BigDecimal.ZERO;

            if (Objects.nonNull(grouponForm) && grouponForm.isFreeDelivery()) {
                // 如果拼团活动包邮
                deliveryPrice = BigDecimal.ZERO;
            }
            tradePrice.setDeliveryPrice(deliveryPrice);

            // 8.5.订单总价、原始金额追加运费
            tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费*/
        });

        // 9.设置订单组平台优惠券
        tradeGroup.setCommonCoupon(finalTradeCoupon);
        return tradeGroup;
    }

    /**
     * 调用校验与封装单个订单信息 - [后端代客下单]
     * 业务员app/商家-共用
     *
     * @return
     */
    public Trade wrapperBackendCommitTrade(Operator operator, CompanyInfoVO companyInfo, StoreInfoResponse
            storeInfoResponse, TradeCreateRequest tradeCreateRequest) {
        //1.获取代客下单操作人信息
        Seller seller = Seller.fromOperator(operator);

        //2.获取商家信息
        Supplier supplier = Supplier.builder()
                .isSelf(orderCommonService.isSelf(storeInfoResponse.getCompanyType()))
                .supplierCode(companyInfo.getCompanyCode())
                .supplierId(companyInfo.getCompanyInfoId())
                .employeeId(operator.getUserId())
                .supplierName(companyInfo.getSupplierName())
                .employeeName(operator.getName())
                .freightTemplateType(storeInfoResponse.getFreightTemplateType())
                .storeName(storeInfoResponse.getStoreName())
                .storeId(storeInfoResponse.getStoreId())
                .companyType(companyInfo.getCompanyType())
                .build();

        //3.获取并验证客户信息
//        Customer customer = verifyService.verifyCustomer(tradeCreateRequest.getCustom());
        CustomerGetByIdResponse customer = verifyService.verifyCustomer(tradeCreateRequest.getCustom());
        if (storeInfoResponse.getCompanyType().equals(CompanyType.SUPPLIER)) {
            verifyService.verifyCustomerWithSupplier(customer.getCustomerId(), companyInfo.getCompanyInfoId());
        }

        CustomerLevelByCustomerIdAndStoreIdRequest request = CustomerLevelByCustomerIdAndStoreIdRequest.builder()
                .customerId(customer.getCustomerId())
                .storeId(storeInfoResponse.getStoreId()).build();
        CommonLevelVO storeLevel = customerLevelQueryProvider.getCustomerLevelByCustomerIdAndStoreId(request)
                .getContext();

        //4.【公共方法】下单信息验证, 将信息包装成订单
        return this.validateAndWrapperTrade(new Trade(),
                TradeParams.builder()
                        .backendFlag(true) //表示后端操作
                        .commitFlag(true) //表示下单
                        .marketingList(tradeCreateRequest.getTradeMarketingList())
                        .tradePrice(tradeCreateRequest.getTradePrice())
                        .tradeItems(tradeCreateRequest.getTradeItems())
                        .oldGifts(Collections.emptyList())//下单,非修改订单
                        .oldTradeItems(Collections.emptyList())//下单,非修改订单
                        .storeLevel(storeLevel)
                        .customer(customer)
                        .supplier(supplier)
                        .seller(seller)
                        .consigneeId(tradeCreateRequest.getConsigneeId())
                        .detailAddress(tradeCreateRequest.getConsigneeAddress())
                        .consigneeUpdateTime(tradeCreateRequest.getConsigneeUpdateTime())
                        .consignee(tradeCreateRequest.getConsignee())
                        .invoice(tradeCreateRequest.getInvoice())
                        .invoiceConsignee(tradeCreateRequest.getInvoiceConsignee())
                        .deliverWay(tradeCreateRequest.getDeliverWay())
                        .payType(tradeCreateRequest.getPayType())
                        .buyerRemark(tradeCreateRequest.getBuyerRemark())
                        .sellerRemark(tradeCreateRequest.getSellerRemark())
                        .encloses(tradeCreateRequest.getEncloses())
                        .ip(operator.getIp())
                        .wareHouseCode(tradeCreateRequest.getWareHouseCode())
                        .platform(operator.getPlatform())
                        .forceCommit(tradeCreateRequest.isForceCommit())
                        .distributeChannel(new DistributeChannel())
                        .wareId(tradeCreateRequest.getWareId())
                        .tradeWareHouse(this.wareHouseTurnToTrade(tradeCreateRequest.getWareHouseVO()))
                        /**设置优惠券*/
                        .couponCodeId(StringUtils.isNotBlank(tradeCreateRequest.getCouponCodeId()) ? tradeCreateRequest.getCouponCodeId() : null)
                        .build());
    }

    /**
     * 调用校验与封装单个订单信息 - [后端修改订单]
     * 业务员app/商家-共用
     *
     * @return
     */
    public Trade wrapperBackendRemedyTrade(Trade trade, Operator operator, TradeRemedyRequest tradeRemedyRequest) {
        tradeRemedyRequest.getInvoice().setOrderInvoiceId(
                Objects.nonNull(trade.getInvoice()) ?
                        trade.getInvoice().getOrderInvoiceId() : null);
        //【公共方法】修改订单信息验证, 将修改的信息包装成新订单
        return this.validateAndWrapperTrade(trade,
                TradeParams.builder()
                        .backendFlag(true) //表示后端操作
                        .commitFlag(false) //表示修改订单
                        .marketingList(tradeRemedyRequest.getTradeMarketingList())
                        .tradePrice(tradeRemedyRequest.getTradePrice())
                        .tradeItems(tradeRemedyRequest.getTradeItems())
                        .oldGifts(trade.getGifts()) //修改订单,设置旧赠品
                        .oldTradeItems(trade.getTradeItems()) //修改订单,设置旧商品
                        .storeLevel(null) //修改订单,客户,商家,代理人都无法修改,所以设置为null
                        .customer(null)
                        .supplier(null)
                        .seller(null)
                        .consigneeId(tradeRemedyRequest.getConsigneeId())
                        .detailAddress(tradeRemedyRequest.getConsigneeAddress())
                        .consigneeUpdateTime(tradeRemedyRequest.getConsigneeUpdateTime())
                        .consignee(tradeRemedyRequest.getConsignee())
                        .invoice(tradeRemedyRequest.getInvoice())
                        .invoiceConsignee(tradeRemedyRequest.getInvoiceConsignee())
                        .deliverWay(tradeRemedyRequest.getDeliverWay())
                        .payType(tradeRemedyRequest.getPayType())
                        .buyerRemark(tradeRemedyRequest.getBuyerRemark())
                        .sellerRemark(tradeRemedyRequest.getSellerRemark())
                        .encloses(tradeRemedyRequest.getEncloses())
                        .ip(operator.getIp())
                        .forceCommit(tradeRemedyRequest.isForceCommit())
                        .build());
    }

    /**
     * 验证下单信息并封装订单信息
     * 【公共方法】-客户下单(PC/H5/APP...), 商家代客下单/修改订单(supplier/employeeApp/supplierAPP...)
     * 1.验证tradeParams中的用户下单信息
     * 2.封装trade,方便后面持久化
     *
     * @param tradeParams 用户下单信息
     * @return 待入库的订单对象
     */
    public Trade validateAndWrapperTrade(Trade trade, TradeParams tradeParams) {
        //判断是否为秒杀抢购商品订单
        if (Objects.nonNull(tradeParams.getIsFlashSaleGoods()) && tradeParams.getIsFlashSaleGoods()) {
            trade.setIsFlashSaleGoods(tradeParams.getIsFlashSaleGoods());
        }

        // 2.1.设置订单基本信息(购买人,商家,代客下单操作人,收货地址,发票信息,配送方式,支付方式,备注,附件,操作人ip,订单商品,订单总价...)
        if (tradeParams.isCommitFlag()) {
            // 购买人,商家,代客下单操作人,订单项Oid,订单id,订单来源方等只有在下单的时候才设置(因为在修改订单时无法修改这些信息)
            Optional<CommonLevelVO> commonLevelVO;
            boolean flag = true;
            if (tradeParams.getStoreLevel() == null) {
                flag = false;
                commonLevelVO =
                        Optional.of(this.fromCustomerLevel(customerLevelQueryProvider.getDefaultCustomerLevel().getContext()));
            } else {
                commonLevelVO = Optional.of(tradeParams.getStoreLevel());
            }
            trade.setBuyer(Buyer.fromCustomer(tradeParams.getCustomer(), commonLevelVO, flag));
            trade.setSupplier(tradeParams.getSupplier());
            trade.setSeller(tradeParams.getSeller());
            tradeParams.getTradeItems().forEach(t -> {
                t.setOid(generatorService.generateOid());
                if (StringUtils.isBlank(t.getAdminId())) {
                    t.setAdminId(String.format("%d", tradeParams.getSupplier().getSupplierId()));
                }
            });

            if (SaleType.RETAIL.equals(tradeParams.getSaleType())) { //零售
                //如果有零售订单 将零售订单商家公司类型修改为 自营零售 商家名称替换为：”大白鲸超市“
//                trade.getSupplier().setCompanyType(com.wanmi.sbc.common.enums.CompanyType.RETAIL);
//                trade.getSupplier().setSupplierName("大白鲸超市");
                //订单号设置为L开头
                trade.setId(generatorService.generateRetailTid());
            } else { //批发
                trade.setId(generatorService.generateTid());
            }
            trade.setPlatform(tradeParams.getPlatform());
            trade.setOrderSource(tradeParams.getOrderSource());
            trade.setOrderType(OrderType.NORMAL_ORDER);
            trade.setShareUserId(tradeParams.getShareUserId());
            trade.setTradeWareHouse(tradeParams.getTradeWareHouse());
        }
        trade.setConsignee(this.wrapperConsignee(tradeParams.getConsigneeId(), tradeParams.getDetailAddress(),
                tradeParams.getConsigneeUpdateTime(), tradeParams.getConsignee()));
        //发票信息(必须在收货地址下面-因为使用临时发票收货地,却未填写的时候,将使用订单商品收货地址作为发票收货地)
        trade.setInvoice(this.wrapperTradeInvoice(tradeParams.getInvoice(), tradeParams.getInvoiceConsignee(),
                trade.getConsignee()));
        trade.setDeliverWay(tradeParams.getDeliverWay());
        if (tradeParams.getPayType() != null) {
            trade.setPayInfo(PayInfo.builder()
                    .payTypeId(String.format("%d", tradeParams.getPayType().toValue()))
                    .payTypeName(tradeParams.getPayType().name())
                    .desc(tradeParams.getPayType().getDesc())
                    .build());
        }
        trade.setBuyerRemark(tradeParams.getBuyerRemark());
        trade.setSellerRemark(tradeParams.getSellerRemark());
        trade.setEncloses(tradeParams.getEncloses());
        trade.setRequestIp(tradeParams.getIp());
        trade.setTradeItems(tradeParams.getTradeItems());
        trade.setTradePrice(tradeParams.getTradePrice());
        trade.setWareHouseCode(tradeParams.getWareHouseCode());
        //零售店仓库id设置
        if (SaleType.RETAIL.equals(tradeParams.getSaleType())) {
            //根据零售店的店铺id获取仓库id
            Long wareId = wareHouseQueryProvider.list(WareHouseListRequest.builder()
                    .storeId(tradeParams.getSupplier().getStoreId()).build()).getContext().getWareHouseVOList().get(0).getWareId();
            trade.setWareId(wareId);
        } else {
            trade.setWareId(tradeParams.getWareId());
        }
        trade.setBookingDate(tradeParams.getBookingDate());
        if (Objects.nonNull(tradeParams.getSuitBuyCount()) && tradeParams.getSuitBuyCount() > 0) {
            trade.setSuitBuyCount(tradeParams.getSuitBuyCount());
        }
        if (Objects.nonNull(tradeParams.getMarketingId())) {
            trade.setMarketingId(tradeParams.getMarketingId());
        }
        trade.setSaleType(tradeParams.getSaleType());
        //塞入物流公司信息
        if (isLogistics(trade.getDeliverWay())) {
            if (Objects.nonNull(tradeParams.getLogisticsInfo())
                    && (StringUtils.isNotBlank(tradeParams.getLogisticsInfo().getId())
                    || (Objects.nonNull(tradeParams.getLogisticsInfo().getInsertFlag())
                    && tradeParams.getLogisticsInfo().getInsertFlag() == 1))) {
                trade.setLogisticsCompanyInfo(tradeParams.getLogisticsInfo());
            } else if (Objects.nonNull(tradeParams.getLogisticsInfo()) && StringUtils.isNotEmpty(tradeParams.getLogisticsInfo().getReceivingPoint())) {
                trade.setLogisticsCompanyInfo(tradeParams.getLogisticsInfo());
            }
        }


        // 2.2.订单中商品信息填充(同时设置商品的客户级别价格/客户指定价salePrice)
        logger.info("TradeService.validateAndWrapperTrade GoodsInfo front trade:{}", JSONObject.toJSONString(trade));
        TradeGoodsListVO skuList = new TradeGoodsListVO();
        if (SaleType.RETAIL.equals(tradeParams.getSaleType())) {
            skuList = this.getRetailGoodsInfoResponse(trade);
        } else {
            skuList = this.getGoodsInfoResponse(trade);
        }


        // 2.3.若是后端下单/修改,校验商家跟商品的关系(因为前端下单信息都是从库里读取的,无需验证)
        verifyBackendFlag(trade, tradeParams, skuList);

        // 分销商品、开店礼包商品、拼团商品、企业购商品不验证起限定量
        boolean isIepCustomer = trade.getBuyer().isIepCustomer();
        skuList.getGoodsInfos().forEach(item -> {
            if (DistributionGoodsAudit.CHECKED.equals(item.getDistributionGoodsAudit())
                    || DefaultFlag.YES.equals(trade.getStoreBagsFlag())
                    || Objects.nonNull(tradeParams.getGrouponForm())
                    || isIepCustomer) {
                item.setCount(null);
                item.setMaxCount(null);
            }
        });
        // 2.4.校验sku 和 【商品价格计算第①步】: 商品的 客户级别价格 (完成客户级别价格/客户指定价/订货区间价计算) -> levelPrice
        boolean throwFlag = verifyService.verifyGoodsTo(trade.getTradeItems(), tradeParams.getOldTradeItems(), skuList, trade.getSupplier()
                .getStoreId(), true);
        List<String> marketingSkuIds = new ArrayList();
        tradeParams.getMarketingList().stream().forEach(tradeMarketingDTO -> {
            if (CollectionUtils.isNotEmpty(tradeMarketingDTO.getSkuIds())) {
                marketingSkuIds.addAll(tradeMarketingDTO.getSkuIds());
            }
        });

        // 特价商品和大客户商品回设 ——— 特价 > 企业购 > 大客户价
        boolean isVipCustomer = trade.getBuyer().isVipCustomer();
        if (Objects.isNull(trade.getIsFlashSaleGoods()) || !trade.getIsFlashSaleGoods()) {
            trade.getTradeItems().forEach(i -> {
                if (Objects.nonNull(i.getGoodsInfoType()) && i.getGoodsInfoType() == 1 && Objects.nonNull(i.getSpecialPrice())) {
                    i.setSplitPrice(i.getSpecialPrice().multiply(new BigDecimal(i.getNum())));
                    i.setPrice(i.getSpecialPrice());
                    i.setLevelPrice(i.getSpecialPrice());
                } else if (isIepCustomer && Objects.nonNull(i.getVipPrice()) && i.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
                    //企业购会员价格不参与任何营销活动
                    if (!marketingSkuIds.contains(i.getSkuId())) {
                        i.setSplitPrice(i.getVipPrice().multiply(new BigDecimal(i.getNum())));
                        i.setPrice(i.getVipPrice());
                        i.setLevelPrice(i.getVipPrice());
                    }
                } else if (isVipCustomer && Objects.nonNull(i.getVipPrice()) && i.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
                    //vip价格不参与任何营销活动
                    if (!marketingSkuIds.contains(i.getSkuId())) {
                        i.setSplitPrice(i.getVipPrice().multiply(new BigDecimal(i.getNum())));
                        i.setPrice(i.getVipPrice());
                        i.setLevelPrice(i.getVipPrice());
                    }
                }
            });
        }

        // 2.5.处理分销
//        dealDistribution(trade, tradeParams);

        // 2.5.商品营销信息冗余,验证,计算,设置各营销优惠,实付金额
        if (tradeParams.getMarketingList().size() > 0) {
            logger.info("TradeService.validateAndWrapperTrade MarketingList:{}", JSONObject.toJSONString(tradeParams.getMarketingList()));
            tradeParams.getMarketingList().forEach(i -> {
                List<TradeItem> items = trade.getTradeItems().stream().filter(s -> i.getSkuIds().contains(s.getSkuId()))
                        .collect(Collectors.toList());
                items.forEach(s -> s.getMarketingIds().add(i.getMarketingId()));
            });
        }

        // 拼团订单--处理
        if (Objects.nonNull(tradeParams.getGrouponForm())) {
            this.dealGroupon(trade, tradeParams);
        }
        //营销信息
        this.wrapperMarketingForCommit(trade, tradeParams, tradeParams.getCustomer());

        // 2.6.赠品信息校验与填充
        List<String> giftIds = tradeParams.getMarketingList().stream().filter(parm -> CollectionUtils.isNotEmpty(parm.getGiftSkuIds())).flatMap(
                r -> r.getGiftSkuIds().stream()).distinct().collect(Collectors.toList());
        TradeGetGoodsResponse giftResp = this.getGoodsResponse(giftIds, trade.getWareId(), trade.getWareHouseCode());
        List<TradeItem> gifts = giftIds.stream().map(g -> TradeItem.builder().price(BigDecimal.ZERO).skuId(g)
                .build()).collect(Collectors.toList());
        verifyService.mergeGoodsInfo(gifts, giftResp);
        trade.setGifts(gifts);
        this.giftSet(trade);

        // 2.7 校验商品 + 赠品的库存
        //verifyGoodsByWMS(trade,tradeParams);

        //2.8.计算满系营销、优惠券均摊价，并设置结算信息
        this.calcMarketingPrice(trade);

        // 2.9.计算并设置订单总价(已减去营销优惠总金额)
        trade.setTradePrice(this.calc(trade));
        if (throwFlag) {
            TradeItemSnapshot byCustomerId = tradeItemService.findByCustomerId(trade.getBuyer().getId());
            byCustomerId.getItemGroups().forEach(param -> {
                if (param.getSupplier().getStoreId().equals(trade.getSupplier()
                        .getStoreId())) {
                    param.setTradeMarketings(trade.getTradeMarketings());
                }
            });
            tradeItemService.updateTradeItemSnapshotNoRollback(byCustomerId);
            throw new SbcRuntimeException("K-050137");
        }

        // 2.10.计算运费
        TradePrice tradePrice = trade.getTradePrice();
        BigDecimal deliveryPrice = tradePrice.getDeliveryPrice();
        if (tradePrice.getDeliveryPrice() == null) {

            // 弃用商家模板 计算运费方式改变 采用平台模板 使用所有商品总金额计算运费
           /* deliveryPrice = this.calcTradeFreight(trade.getConsignee(), trade.getSupplier(), trade.getDeliverWay(),
                    tradePrice.getTotalPrice(), trade.getTradeItems(), trade.getGifts());*/
            deliveryPrice = BigDecimal.ZERO;
            tradePrice.setDeliveryPrice(deliveryPrice);
        }

        //判断是否为秒杀抢购订单
        if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
            //秒杀商品是否包邮
            //获取秒杀抢购活动详情
            FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
                    .id(trade.getTradeItems().get(0).getFlashSaleGoodsId())
                    .build())
                    .getContext().getFlashSaleGoodsVO();
            if (flashSaleGoodsVO.getPostage().equals(1)) {
                deliveryPrice = new BigDecimal(0);
            }
        }

        // 2.11.计算订单总价(追加运费)
        tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
        if (tradePrice.isSpecial()) {
            // 2.12.【商品价格计算第③步】: 商品的 特价订单 均摊价 -> splitPrice
            tradeItemService.clacSplitPrice(trade.getTradeItems(), tradePrice.getPrivilegePrice());
            tradePrice.setTotalPrice(tradePrice.getPrivilegePrice().add(deliveryPrice));//应付金额 = 特价+运费
        } else {
            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
        }
        //统计商品总件数
        Long goodsTotalNum = 0L;
        Optional<Long> _goodsTotalNum = trade.getTradeItems().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_goodsTotalNum.isPresent()) {
            goodsTotalNum += _goodsTotalNum.get();
        }

        /**配送方式：第三方物流，收货地址为外省且满30件商品时，配送费可优惠2元/每箱;
         * 优惠方式为商品单价-2，统计优惠金额
         * */
        long buySum = tradeParams.getTradeItems().stream().mapToLong(t -> t.getNum()).sum();
//        CustomerDeliveryAddressByIdResponse deliveryAddressByIdResponse = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest.builder().deliveryAddressId(tradeParams.getConsigneeId()).build()).getContext();

        boolean freightCouponFlag = DeliverWay.LOGISTICS.equals(trade.getDeliverWay()) && trade.getConsignee().getProvinceId() != 430000 && 30 <= buySum;

        log.info("trade.getDeliverWay {}", trade.getDeliverWay());

        log.info("freightCouponFlag {}", freightCouponFlag);
        BigDecimal freightCouponPrice = BigDecimal.valueOf(buySum).multiply(BigDecimal.valueOf(2));
        if (freightCouponFlag) {
            BigDecimal subtract = tradePrice.getTotalPrice().subtract(freightCouponPrice);
            //支付金额小于等于0
            if (subtract.compareTo(BigDecimal.ZERO) == -1 || subtract.compareTo(BigDecimal.ZERO) == 0) {
                tradePrice.setDeliveryCouponPrice(tradePrice.getTotalPrice());
                tradePrice.setTotalPrice(BigDecimal.ZERO);
                //均摊
                int size = trade.getTradeItems().size();
                //订单总价
                BigDecimal totalSplitPrice = trade.getTradeItems().stream().map(tradeItem -> tradeItem.getSplitPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);
                //运费优惠金额
                BigDecimal totalDeliveryCoupon = BigDecimal.ZERO;
                for (int i = 0; i < size; i++) {
                    TradeItem deliverTradeItem = trade.getTradeItems().get(i);
                    if (i == size - 1) {
                        deliverTradeItem.setSplitPrice(deliverTradeItem.getSplitPrice().subtract(tradePrice.getDeliveryCouponPrice().subtract(totalDeliveryCoupon)));
                    } else {
                        //计算优惠均摊 = 商品均摊价/商品总价 * 优惠总金额
                        BigDecimal multiply = tradePrice.getDeliveryCouponPrice().multiply(
                                deliverTradeItem.getSplitPrice().divide(totalSplitPrice, 2, BigDecimal.ROUND_HALF_UP)
                        ).setScale(2);
                        totalDeliveryCoupon.add(multiply);
                        deliverTradeItem.setSplitPrice(deliverTradeItem.getSplitPrice().subtract(multiply));
                    }
                }
            } else {
                tradePrice.setDeliveryCouponPrice(freightCouponPrice);
                //订单实付金额 = 应付金额 - 运费优惠金额
                tradePrice.setTotalPrice(tradePrice.getTotalPrice().subtract(freightCouponPrice));
                //订单商品价格减2
                trade.getTradeItems().forEach(ti -> {
                    ti.setPrice(ti.getPrice().subtract(BigDecimal.valueOf(2)));
                    //均摊价每箱减2
                    ti.setSplitPrice(ti.getSplitPrice().subtract(BigDecimal.valueOf(2).multiply(BigDecimal.valueOf(ti.getNum()))));
                });
            }
        }

        Optional<Long> _giftNum = trade.getGifts().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_giftNum.isPresent()) {
            goodsTotalNum += _giftNum.get();
        }

        CustomerDeliveryAddressByIdResponse response = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest
                .builder().deliveryAddressId(tradeParams.getConsigneeId()).build()).getContext();

        //校验商品所在店铺配置免费配送范围
        List<FreightTemplateDeliveryAreaByStoreIdResponse> context = freightTemplateDeliveryAreaQueryProvider
                .query(FreightTemplateDeliveryAreaListRequest
                        .builder().storeId(trade.getSupplier().getStoreId()).build()).getContext();
        FreightTemplateDeliveryAreaByStoreIdResponse freightTemplateDeliveryAreaByStoreIdResponse = context.stream().filter(v -> {
            if (v.getAreaTenFreightTemplateDeliveryAreaVO().equals(1L)) {
                return true;
            }
            return false;
        }).findAny().get();
        //常规
        FreightTemplateDeliveryAreaVO freightTemplateDeliveryAreaVO = freightTemplateDeliveryAreaByStoreIdResponse.getFreightTemplateDeliveryAreaVO();

        //乡镇满十件
        FreightTemplateDeliveryAreaVO areaTenFreightTemplateDeliveryAreaVO = freightTemplateDeliveryAreaByStoreIdResponse.getAreaTenFreightTemplateDeliveryAreaVO();

        if (
            //常规
                (Objects.nonNull(freightTemplateDeliveryAreaVO) && Objects.nonNull(freightTemplateDeliveryAreaVO.getDestinationArea())
                        && (ArrayUtils.contains(freightTemplateDeliveryAreaVO.getDestinationArea(), response.getProvinceId().toString())
                        || ArrayUtils.contains(freightTemplateDeliveryAreaVO.getDestinationArea(), response.getCityId().toString())))
        ) {
//            if(
//                //乡镇满十件(免费店配)
//                    (Objects.nonNull(areaTenFreightTemplateDeliveryAreaVO) && Objects.nonNull(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName())
//                            && (checkDeliveryDestination(response.getDeliveryAddress(), Stream.of(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName()).collect(Collectors.toList()))
//                            || checkDeliveryDestination(response.getDetailDeliveryAddress(), Stream.of(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName()).collect(Collectors.toList()))))
//            ){
//                if(trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME) && goodsTotalNum < 10){
//                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "乡镇免费店配数量不足！");
//                }
//            }
        }

        trade.setGoodsTotalNum(goodsTotalNum);
        trade.setSourceChannel(tradeParams.getSourceChannel());
        return trade;
    }

    /**
     * 验证下单信息并封装订单信息 拆箱
     * 【公共方法】-客户下单(PC/H5/APP...), 商家代客下单/修改订单(supplier/employeeApp/supplierAPP...)
     * 1.验证tradeParams中的用户下单信息
     * 2.封装trade,方便后面持久化
     *
     * @param tradeParams 用户下单信息
     * @return 待入库的订单对象
     */
    public Trade validateAndWrapperTradeDevsnning(Trade trade, TradeParams tradeParams) {
        StopWatch stopWatch = new StopWatch("单独封装订单");
        //判断是否为秒杀抢购商品订单
        if (Objects.nonNull(tradeParams.getIsFlashSaleGoods()) && tradeParams.getIsFlashSaleGoods()) {
            trade.setIsFlashSaleGoods(tradeParams.getIsFlashSaleGoods());
        }
        trade.setNetWorkVO(tradeParams.getNetWorkVO());
        stopWatch.start(".设置订单基本信息");
        // 2.1.设置订单基本信息(购买人,商家,代客下单操作人,收货地址,发票信息,配送方式,支付方式,备注,附件,操作人ip,订单商品,订单总价...)
        if (tradeParams.isCommitFlag()) {

            // 购买人,商家,代客下单操作人,订单项Oid,订单id,订单来源方等只有在下单的时候才设置(因为在修改订单时无法修改这些信息)
            Optional<CommonLevelVO> commonLevelVO;
            boolean flag = true;
            if (tradeParams.getStoreLevel() == null) {
                flag = false;
                commonLevelVO =
                        Optional.of(fromCustomerLevel(customerLevelQueryProvider.getDefaultCustomerLevel().getContext()));
            } else {
                commonLevelVO = Optional.of(tradeParams.getStoreLevel());
            }
            trade.setBuyer(Buyer.fromCustomer(tradeParams.getCustomer(), commonLevelVO, flag));
            trade.setSupplier(tradeParams.getSupplier());
            trade.setSeller(tradeParams.getSeller());
            tradeParams.getTradeItems().forEach(t -> {
                t.setOid(generatorService.generateOid());
                if (StringUtils.isBlank(t.getAdminId())) {
                    t.setAdminId(String.format("%d", tradeParams.getSupplier().getSupplierId()));
                }
            });

            if (SaleType.RETAIL.equals(tradeParams.getSaleType())) { //零售
                //如果有零售订单 将零售订单商家公司类型修改为 自营零售 商家名称替换为：”大白鲸超市“
//                trade.getSupplier().setCompanyType(com.wanmi.sbc.common.enums.CompanyType.RETAIL);
//                trade.getSupplier().setSupplierName("大白鲸超市");
                //订单号设置为L开头
                trade.setId(generatorService.generateRetailTid());
                trade.setWareHouseCode("WH01");
                trade.setWareHouseNmae("长沙仓");
            }else if (SaleType.BULK.equals(tradeParams.getSaleType())){
                trade.setId(generatorService.generateBulkTid());
                trade.setWareHouseCode(tradeParams.getWareHouseCode());
            }
            else { //批发
                trade.setId(generatorService.generateTid());
                trade.setWareHouseCode(tradeParams.getWareHouseCode());
            }
            trade.setPlatform(tradeParams.getPlatform());
            trade.setOrderSource(tradeParams.getOrderSource());
            trade.setOrderType(OrderType.NORMAL_ORDER);
            trade.setShareUserId(tradeParams.getShareUserId());
            trade.setTradeWareHouse(tradeParams.getTradeWareHouse());

        }
        trade.setConsignee(wrapperConsignee(tradeParams.getConsigneeId(), tradeParams.getDetailAddress(),
                tradeParams.getConsigneeUpdateTime(), tradeParams.getConsignee()));
        //发票信息(必须在收货地址下面-因为使用临时发票收货地,却未填写的时候,将使用订单商品收货地址作为发票收货地)
        trade.setInvoice(wrapperTradeInvoice(tradeParams.getInvoice(), tradeParams.getInvoiceConsignee(),
                trade.getConsignee()));
        trade.setDeliverWay(tradeParams.getDeliverWay());
        if (tradeParams.getPayType() != null) {
            trade.setPayInfo(PayInfo.builder()
                    .payTypeId(String.format("%d", tradeParams.getPayType().toValue()))
                    .payTypeName(tradeParams.getPayType().name())
                    .desc(tradeParams.getPayType().getDesc())
                    .build());
        }
        trade.setBuyerRemark(tradeParams.getBuyerRemark());
        trade.setSellerRemark(tradeParams.getSellerRemark());
        trade.setEncloses(tradeParams.getEncloses());
        trade.setRequestIp(tradeParams.getIp());
        trade.setTradeItems(tradeParams.getTradeItems());
        trade.setTradePrice(tradeParams.getTradePrice());
//        trade.setWareHouseCode(tradeParams.getWareHouseCode());
        //零售店仓库id设置
        if (SaleType.RETAIL.equals(tradeParams.getSaleType())) {
            //根据零售店的店铺id获取仓库id
            Long wareId = wareHouseQueryProvider.list(WareHouseListRequest.builder()
                    .storeId(tradeParams.getSupplier().getStoreId()).build()).getContext().getWareHouseVOList().get(0).getWareId();
            trade.setWareId(wareId);
        } else {
            trade.setWareId(tradeParams.getWareId());
        }
        trade.setBookingDate(tradeParams.getBookingDate());
        if (Objects.nonNull(tradeParams.getSuitBuyCount()) && tradeParams.getSuitBuyCount() > 0) {
            trade.setSuitBuyCount(tradeParams.getSuitBuyCount());
        }
        if (Objects.nonNull(tradeParams.getMarketingId())) {
            trade.setMarketingId(tradeParams.getMarketingId());
        }
        trade.setSaleType(tradeParams.getSaleType());
        //塞入物流公司信息
        if (isLogistics(trade.getDeliverWay())) {
            if (Objects.nonNull(tradeParams.getLogisticsInfo())
                    && (StringUtils.isNotBlank(tradeParams.getLogisticsInfo().getId())
                    || (Objects.nonNull(tradeParams.getLogisticsInfo().getInsertFlag())
                    && tradeParams.getLogisticsInfo().getInsertFlag() == 1))) {
                trade.setLogisticsCompanyInfo(tradeParams.getLogisticsInfo());
            } else if (Objects.nonNull(tradeParams.getLogisticsInfo()) && StringUtils.isNotEmpty(tradeParams.getLogisticsInfo().getReceivingPoint())) {
                trade.setLogisticsCompanyInfo(tradeParams.getLogisticsInfo());
            }
        }

        stopWatch.stop();
        // 2.2.订单中商品信息填充(同时设置商品的客户级别价格/客户指定价salePrice)
        stopWatch.start("订单中商品信息填充");
        logger.info("TradeService.validateAndWrapperTrade GoodsInfo front trade:{}", JSONObject.toJSONString(trade));
        TradeGoodsListVO skuList = getTradeGoodsListVO(trade, tradeParams);
        stopWatch.stop();
        stopWatch.start("若是后端下单/修改,校验商家跟商品的关系(因为前端下单信息都是从库里读取的,无需验证)");
        // 2.3.若是后端下单/修改,校验商家跟商品的关系(因为前端下单信息都是从库里读取的,无需验证)
        verifyBackendFlag(trade, tradeParams, skuList);

        // 分销商品、开店礼包商品、拼团商品、企业购商品不验证起限定量
        boolean isIepCustomer = trade.getBuyer().isIepCustomer();
        skuList.getGoodsInfos().forEach(item -> {
            if (DistributionGoodsAudit.CHECKED.equals(item.getDistributionGoodsAudit())
                    || DefaultFlag.YES.equals(trade.getStoreBagsFlag())
                    || Objects.nonNull(tradeParams.getGrouponForm())
                    || isIepCustomer) {
                item.setCount(null);
                item.setMaxCount(null);
            }
        });
        stopWatch.stop();
        stopWatch.start("校验sku 和 【商品价格计算第①步】: 商品的 客户级别价格 ");
        // 2.4.校验sku 和 【商品价格计算第①步】: 商品的 客户级别价格 (完成客户级别价格/客户指定价/订货区间价计算) -> levelPrice
        boolean throwFlag = verifyService.verifyDevanningGoodsTo(trade.getTradeItems(), tradeParams.getOldTradeItems(), skuList, trade.getSupplier()
                .getStoreId(), true);
        List<String> marketingSkuIds = new ArrayList();
        tradeParams.getMarketingList().stream().forEach(tradeMarketingDTO -> {
            if (CollectionUtils.isNotEmpty(tradeMarketingDTO.getSkuIds())) {
                marketingSkuIds.addAll(tradeMarketingDTO.getSkuIds());
            }
        });

        // 特价商品和大客户商品回设 ——— 特价 > 企业购 > 大客户价
        boolean isVipCustomer = trade.getBuyer().isVipCustomer();
        if (Objects.isNull(trade.getIsFlashSaleGoods()) || !trade.getIsFlashSaleGoods()) {
            trade.getTradeItems().forEach(i -> {
                if (Objects.nonNull(i.getGoodsInfoType()) && i.getGoodsInfoType() == 1 && Objects.nonNull(i.getSpecialPrice())) {
                    i.setSplitPrice(i.getSpecialPrice().multiply(new BigDecimal(i.getNum())));
                    i.setPrice(i.getSpecialPrice());
                    i.setLevelPrice(i.getSpecialPrice());
                } else if (isIepCustomer && Objects.nonNull(i.getVipPrice()) && i.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
                    //企业购会员价格不参与任何营销活动
                    if (!marketingSkuIds.contains(i.getSkuId())) {
                        i.setSplitPrice(i.getVipPrice().multiply(new BigDecimal(i.getNum())));
                        i.setPrice(i.getVipPrice());
                        i.setLevelPrice(i.getVipPrice());
                    }
                } else if (isVipCustomer && Objects.nonNull(i.getVipPrice()) && i.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
                    //vip价格不参与任何营销活动
                    if (!marketingSkuIds.contains(i.getSkuId())) {
                        i.setSplitPrice(i.getVipPrice().multiply(new BigDecimal(i.getNum())));
                        i.setPrice(i.getVipPrice());
                        i.setLevelPrice(i.getVipPrice());
                    }
                }
                i.setChangedPrice(i.getPrice());
            });
        }

        // 2.5.处理分销
//        dealDistribution(trade, tradeParams);
        stopWatch.stop();
        stopWatch.start("商品营销信息冗余,验证,计算,设置各营销优惠,实付金额");
        // 2.5.商品营销信息冗余,验证,计算,设置各营销优惠,实付金额
        verifyMarketing(trade, tradeParams);
        stopWatch.stop();
        stopWatch.start("赠品信息校验与填充");
        // 2.6.赠品信息校验与填充
        List<String> giftIds = tradeParams.getMarketingList().stream().filter(parm -> CollectionUtils.isNotEmpty(parm.getGiftSkuIds())).flatMap(
                r -> r.getGiftSkuIds().stream()).distinct().collect(Collectors.toList());
        TradeGetGoodsResponse giftResp = this.getGoodsResponse(giftIds, trade.getWareId(), trade.getWareHouseCode());
        List<TradeItem> gifts = giftIds.stream().map(g -> TradeItem.builder().price(BigDecimal.ZERO).skuId(g)
                .build()).collect(Collectors.toList());
        verifyService.mergeGoodsInfo(gifts, giftResp);
        trade.setGifts(gifts);
        giftSet(trade);
        stopWatch.stop();
        // 2.7 校验商品 + 赠品的库存
        //verifyGoodsByWMS(trade,tradeParams);
        stopWatch.start("计算满系营销、优惠券均摊价，并设置结算信息");
        //2.8.计算满系营销、优惠券均摊价，并设置结算信息
        calcMarketingPrice(trade);
        stopWatch.stop();
        stopWatch.start("计算并设置订单总价(已减去营销优惠总金额)");
        // 2.9.计算并设置订单总价(已减去营销优惠总金额)
        trade.setTradePrice(calc(trade));
        if (throwFlag) {
            TradeItemSnapshot byCustomerId = tradeItemService.findByCustomerId(trade.getBuyer().getId());
            byCustomerId.getItemGroups().forEach(param -> {
                if (param.getSupplier().getStoreId().equals(trade.getSupplier()
                        .getStoreId())) {
                    param.setTradeMarketings(trade.getTradeMarketings());
                }
            });
            tradeItemService.updateTradeItemSnapshotNoRollback(byCustomerId);
            throw new SbcRuntimeException("K-050137");
        }
        stopWatch.stop();
        stopWatch.start("end-----------");
        // 2.10.计算运费
//        TradePrice tradePrice = trade.getTradePrice();
//        BigDecimal deliveryPrice = tradePrice.getDeliveryPrice();
//        if (tradePrice.getDeliveryPrice() == null) {
//
//            // 弃用商家模板 计算运费方式改变 采用平台模板 使用所有商品总金额计算运费
//           /* deliveryPrice = this.calcTradeFreight(trade.getConsignee(), trade.getSupplier(), trade.getDeliverWay(),
//                    tradePrice.getTotalPrice(), trade.getTradeItems(), trade.getGifts());*/
//            deliveryPrice = BigDecimal.ZERO;
//            tradePrice.setDeliveryPrice(deliveryPrice);
//        }
//
//        //判断是否为秒杀抢购订单
//        if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
//            //秒杀商品是否包邮
//            //获取秒杀抢购活动详情
//            FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
//                    .id(trade.getTradeItems().get(0).getFlashSaleGoodsId())
//                    .build())
//                    .getContext().getFlashSaleGoodsVO();
//            if (flashSaleGoodsVO.getPostage().equals(1)) {
//                deliveryPrice = new BigDecimal(0);
//            }
//        }
//
//        // 2.11.计算订单总价(追加运费)
//        tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
//        if (tradePrice.isSpecial()) {
//            // 2.12.【商品价格计算第③步】: 商品的 特价订单 均摊价 -> splitPrice
//            tradeItemService.clacSplitPrice(trade.getTradeItems(), tradePrice.getPrivilegePrice());
//            tradePrice.setTotalPrice(tradePrice.getPrivilegePrice().add(deliveryPrice));//应付金额 = 特价+运费
//        } else {
//            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
//        }
        //统计商品总件数
        Long goodsTotalNum = 0L;
        Optional<Long> _goodsTotalNum = trade.getTradeItems().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_goodsTotalNum.isPresent()) {
            goodsTotalNum += _goodsTotalNum.get();
        }

        //新规则: 用户购买订单确认收货之后, 以奖励金的方式发放到用户鲸帖里面
        /*
         *//**配送方式：第三方物流，收货地址为外省且满30件商品时，配送费可优惠2元/每箱;
         * 优惠方式为商品单价-2，统计优惠金额
         * *//*

        long buySum = trade.getTradeItems().stream()
                .map(
                        t -> Objects.isNull(t.getDevanningId())
                                ? BigDecimal.valueOf(t.getNum())
                                : ((t.getDivisorFlag().multiply(BigDecimal.valueOf(t.getNum())))
                        )).reduce(BigDecimal.ZERO, BigDecimal::add).setScale(0, BigDecimal.ROUND_DOWN).longValue();
//        long buySum = tradeParams.getTradeItems().stream().mapToLong(t -> t.getNum()).sum();
//        CustomerDeliveryAddressByIdResponse deliveryAddressByIdResponse = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest.builder().deliveryAddressId(tradeParams.getConsigneeId()).build()).getContext();

        boolean freightCouponFlag = DeliverWay.LOGISTICS.equals(trade.getDeliverWay()) && trade.getConsignee().getProvinceId() != 430000 && 30 <= buySum;

        log.info("trade.getDeliverWay {}", trade.getDeliverWay());

        log.info("freightCouponFlag {}", freightCouponFlag);
        BigDecimal freightCouponPrice = BigDecimal.valueOf(buySum).multiply(BigDecimal.valueOf(2));
        //新规则: 用户购买订单确认收货之后, 以奖励金的方式发放到用户鲸帖里面
        if (*//*freightCouponFlag*//*false) {
            BigDecimal subtract = tradePrice.getTotalPrice().subtract(freightCouponPrice);
            //支付金额小于等于0
            if (subtract.compareTo(BigDecimal.ZERO) == -1 || subtract.compareTo(BigDecimal.ZERO) == 0) {
                tradePrice.setDeliveryCouponPrice(tradePrice.getTotalPrice());
                tradePrice.setTotalPrice(BigDecimal.ZERO);
                //均摊
                int size = trade.getTradeItems().size();
                //订单总价
                BigDecimal totalSplitPrice = trade.getTradeItems().stream().map(tradeItem -> tradeItem.getSplitPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);
                //运费优惠金额
                BigDecimal totalDeliveryCoupon = BigDecimal.ZERO;
                for (int i = 0; i < size; i++) {
                    TradeItem deliverTradeItem = trade.getTradeItems().get(i);
                    if (Objects.nonNull(deliverTradeItem.getDivisorFlag())
                            && deliverTradeItem.getDivisorFlag().multiply(BigDecimal.valueOf(deliverTradeItem.getNum())).compareTo(BigDecimal.ONE) > -1
                    ) {
                        if (i == size - 1) {
                            deliverTradeItem.setSplitPrice(deliverTradeItem.getSplitPrice().subtract(tradePrice.getDeliveryCouponPrice().subtract(totalDeliveryCoupon)));
                        } else {
                            //计算优惠均摊 = 商品均摊价/商品总价 * 优惠总金额
                            BigDecimal multiply = tradePrice.getDeliveryCouponPrice().multiply(
                                    deliverTradeItem.getSplitPrice().divide(totalSplitPrice, 2, BigDecimal.ROUND_HALF_UP)
                            ).setScale(2);
                            totalDeliveryCoupon.add(multiply);
                            deliverTradeItem.setSplitPrice(deliverTradeItem.getSplitPrice().subtract(multiply));
                        }
                    }
                }
            } else {
                tradePrice.setDeliveryCouponPrice(freightCouponPrice);
                //订单实付金额 = 应付金额 - 运费优惠金额
                tradePrice.setTotalPrice(tradePrice.getTotalPrice().subtract(freightCouponPrice));

                AtomicReference<BigDecimal> noJoinFreightCounpon = new AtomicReference<>(BigDecimal.ZERO);
                //订单商品价格减2
//                trade.getTradeItems().forEach(ti -> {
//                    if(Objects.nonNull(ti.getDivisorFlag())
//                            && ti.getDivisorFlag().multiply(BigDecimal.valueOf(ti.getNum())).compareTo(BigDecimal.ONE) > -1
//                    ){
//                        ti.setPrice(ti.getPrice().subtract(BigDecimal.valueOf(2)));
//                        //均摊价每箱减2
//                        BigDecimal num = ti.getDivisorFlag().multiply(BigDecimal.valueOf(ti.getNum())).setScale(0, BigDecimal.ROUND_DOWN);
//                        ti.setSplitPrice(ti.getSplitPrice().subtract(BigDecimal.valueOf(2).multiply(num)));
//                    }
//                });
                //运费优惠金额
                final BigDecimal[] totalDeliveryCoupon = {BigDecimal.ZERO};
                TradeItem lastItems = trade.getTradeItems().stream().reduce((first, second) -> second).orElse(null);
                trade.getTradeItems().forEach(ti -> {
                    if (ti.equals(lastItems)) {
                        BigDecimal lastDeliveryCoupon = freightCouponPrice.subtract(totalDeliveryCoupon[0]);
                        boolean deliveryCouponFlag = lastDeliveryCoupon.compareTo(BigDecimal.ZERO) > -1;
                        if (Objects.nonNull(ti) && deliveryCouponFlag) {
                            if (ti.getSplitPrice().compareTo(BigDecimal.ZERO) <= 0) {
                                log.info("0元商品========" + ti.getSkuName());
                                noJoinFreightCounpon.set(noJoinFreightCounpon.get().add(BigDecimal.valueOf(2)));
                            } else {
                                ti.setSplitPrice(ti.getSplitPrice().subtract(lastDeliveryCoupon));
                            }

                        }
                    } else {
                        BigDecimal divNum = ti.getDivisorFlag().multiply(BigDecimal.valueOf(ti.getNum())).setScale(2, BigDecimal.ROUND_DOWN);
                        BigDecimal bigDecimal = BigDecimal.valueOf(2).multiply(divNum);
                        totalDeliveryCoupon[0] = totalDeliveryCoupon[0].add(bigDecimal);
                        if (ti.getSplitPrice().compareTo(BigDecimal.ZERO) <= 0) {
                            log.info("0元商品========" + ti.getSkuName());
                            noJoinFreightCounpon.set(noJoinFreightCounpon.get().add(BigDecimal.valueOf(2)));
                        } else {
                            ti.setSplitPrice(ti.getSplitPrice().subtract(bigDecimal));
                        }

                    }
                });
                if (noJoinFreightCounpon.get().compareTo(BigDecimal.ZERO) > 0) {
                    log.info("需要扣除的优惠==========" + noJoinFreightCounpon.get());
                    tradePrice.setDeliveryCouponPrice(tradePrice.getDeliveryCouponPrice().subtract(noJoinFreightCounpon.get()));
                    //订单实付金额 = 应付金额 - 运费优惠金额
                    tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(noJoinFreightCounpon.get()));
                }


            }
        }
        */


        Optional<Long> _giftNum = trade.getGifts().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_giftNum.isPresent()) {
            goodsTotalNum += _giftNum.get();
        }

        CustomerDeliveryAddressByIdResponse response = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest
                .builder().deliveryAddressId(tradeParams.getConsigneeId()).build()).getContext();

        //校验商品所在店铺配置免费配送范围
        List<FreightTemplateDeliveryAreaByStoreIdResponse> context = freightTemplateDeliveryAreaQueryProvider
                .query(FreightTemplateDeliveryAreaListRequest
                        .builder().storeId(trade.getSupplier().getStoreId()).build()).getContext();

        log.info("=====乡村件：{},{},{}", trade.getId(), trade.getSupplier().getStoreId(), JSONObject.toJSONString(context));

        FreightTemplateDeliveryAreaByStoreIdResponse freightTemplateDeliveryAreaByStoreIdResponse = context.stream().filter(v -> {
            if (v.getAreaTenFreightTemplateDeliveryAreaVO().getWareId().equals(1L)) {
                return true;
            }
            return false;
        }).findAny().get();
        //常规
        FreightTemplateDeliveryAreaVO freightTemplateDeliveryAreaVO = freightTemplateDeliveryAreaByStoreIdResponse.getFreightTemplateDeliveryAreaVO();

        //乡镇满十件
        FreightTemplateDeliveryAreaVO areaTenFreightTemplateDeliveryAreaVO = freightTemplateDeliveryAreaByStoreIdResponse.getAreaTenFreightTemplateDeliveryAreaVO();

        if (
            //常规
                (Objects.nonNull(freightTemplateDeliveryAreaVO) && Objects.nonNull(freightTemplateDeliveryAreaVO.getDestinationArea())
                        && (ArrayUtils.contains(freightTemplateDeliveryAreaVO.getDestinationArea(), response.getProvinceId().toString())
                        || ArrayUtils.contains(freightTemplateDeliveryAreaVO.getDestinationArea(), response.getCityId().toString())))
        ) {
//            if(
//                //乡镇满十件(免费店配)
//                    (Objects.nonNull(areaTenFreightTemplateDeliveryAreaVO) && Objects.nonNull(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName())
//                            && (checkDeliveryDestination(response.getDeliveryAddress(), Stream.of(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName()).collect(Collectors.toList()))
//                            || checkDeliveryDestination(response.getDetailDeliveryAddress(), Stream.of(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName()).collect(Collectors.toList()))))
//            ){
//                if(trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME) && goodsTotalNum < 10){
//                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "乡镇免费店配数量不足！");
//                }
//            }
        }

        trade.setGoodsTotalNum(goodsTotalNum);
        trade.setSourceChannel(tradeParams.getSourceChannel());
        stopWatch.stop();
        log.info("订单单独封装方法"+stopWatch.prettyPrint());
        return trade;
    }


    /**
     * 提货   验证下单信息并封装订单信息
     *
     * @param trade
     * @param tradeParams
     * @return
     */
    public Trade takeGoodValidateAndWrapperTrade(Trade trade, TradeParams tradeParams) {
        //判断是否为秒杀抢购商品订单
//        if (Objects.nonNull(tradeParams.getIsFlashSaleGoods()) && tradeParams.getIsFlashSaleGoods()) {
//            trade.setIsFlashSaleGoods(tradeParams.getIsFlashSaleGoods());
//        }

        // 2.1.设置订单基本信息(购买人,商家,代客下单操作人,收货地址,发票信息,配送方式,支付方式,备注,附件,操作人ip,订单商品,订单总价...)
        if (tradeParams.isCommitFlag()) {
            // 购买人,商家,代客下单操作人,订单项Oid,订单id,订单来源方等只有在下单的时候才设置(因为在修改订单时无法修改这些信息)
            Optional<CommonLevelVO> commonLevelVO;
            boolean flag = true;
            if (tradeParams.getStoreLevel() == null) {
                flag = false;
                commonLevelVO =
                        Optional.of(this.fromCustomerLevel(customerLevelQueryProvider.getDefaultCustomerLevel().getContext()));
            } else {
                commonLevelVO = Optional.of(tradeParams.getStoreLevel());
            }
            trade.setBuyer(Buyer.fromCustomer(tradeParams.getCustomer(), commonLevelVO, flag));
            trade.setSupplier(tradeParams.getSupplier());
            trade.setSeller(tradeParams.getSeller());
            tradeParams.getTradeItems().forEach(t -> {
                t.setOid(generatorService.generateOid());
                if (StringUtils.isBlank(t.getAdminId())) {
                    t.setAdminId(String.format("%d", tradeParams.getSupplier().getSupplierId()));
                }
            });
            trade.setId(generatorService.generateTid());
            trade.setPlatform(tradeParams.getPlatform());
            trade.setOrderSource(tradeParams.getOrderSource());
            trade.setOrderType(OrderType.NORMAL_ORDER);
            trade.setShareUserId(tradeParams.getShareUserId());
            trade.setTradeWareHouse(tradeParams.getTradeWareHouse());
        }
        trade.setConsignee(this.wrapperConsignee(tradeParams.getConsigneeId(), tradeParams.getDetailAddress(),
                tradeParams.getConsigneeUpdateTime(), tradeParams.getConsignee()));
        //发票信息(必须在收货地址下面-因为使用临时发票收货地,却未填写的时候,将使用订单商品收货地址作为发票收货地)
        trade.setInvoice(this.wrapperTradeInvoice(tradeParams.getInvoice(), tradeParams.getInvoiceConsignee(),
                trade.getConsignee()));
        trade.setDeliverWay(tradeParams.getDeliverWay());
        if (tradeParams.getPayType() != null) {
            trade.setPayInfo(PayInfo.builder()
                    .payTypeId(String.format("%d", tradeParams.getPayType().toValue()))
                    .payTypeName(tradeParams.getPayType().name())
                    .desc(tradeParams.getPayType().getDesc())
                    .build());
        }
        trade.setBuyerRemark(tradeParams.getBuyerRemark());
        trade.setSellerRemark(tradeParams.getSellerRemark());
        trade.setEncloses(tradeParams.getEncloses());
        trade.setRequestIp(tradeParams.getIp());
        trade.setTradeItems(tradeParams.getTradeItems());
        trade.setTradePrice(tradeParams.getTradePrice());
        trade.setWareHouseCode(tradeParams.getWareHouseCode());
        trade.setWareId(tradeParams.getWareId());
        trade.setBookingDate(tradeParams.getBookingDate());
        trade.setActivityType(TradeActivityTypeEnum.STOCKUP.toActivityType());
        //塞入物流公司信息
        if (DeliverWay.LOGISTICS.equals(trade.getDeliverWay())) {
            if (Objects.nonNull(tradeParams.getLogisticsInfo())
                    && (StringUtils.isNotBlank(tradeParams.getLogisticsInfo().getId())
                    || (Objects.nonNull(tradeParams.getLogisticsInfo().getInsertFlag())
                    && tradeParams.getLogisticsInfo().getInsertFlag() == 1))) {
                trade.setLogisticsCompanyInfo(tradeParams.getLogisticsInfo());
            } else if (Objects.nonNull(tradeParams.getLogisticsInfo()) && StringUtils.isNotEmpty(tradeParams.getLogisticsInfo().getReceivingPoint())) {
                trade.setLogisticsCompanyInfo(tradeParams.getLogisticsInfo());
            }
        }


        // 2.2.订单中商品信息填充(同时设置商品的客户级别价格/客户指定价salePrice)
        logger.info("TradeService.takeGoodValidateAndWrapperTrade GoodsInfo front trade:{}", JSONObject.toJSONString(trade));
        TradeGoodsListVO skuList = this.getGoodsInfoResponse(trade);

        //2.2.1校验商品是否在指定区域销售
        CustomerDeliveryAddressByIdResponse response = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest
                .builder().deliveryAddressId(tradeParams.getConsigneeId()).build()).getContext();

        //查询商品库存
//        GoodsWareStockListResponse goodsWareStockListResponse = goodsWareStockQueryProvider.getGoodsWareStockByGoodsInfoIds(GoodsWareStockByGoodsForIdsRequest
//                .builder()
//                .goodsForIdList(skuList.getGoodsInfos().stream().map(g -> g.getGoodsInfoId()).collect(Collectors.toList()))
//                .build()).getContext();

        skuList.getGoodsInfos().forEach(goodsInfoVO -> {
            if (StringUtils.isNotBlank(goodsInfoVO.getAllowedPurchaseArea())) {
                List<Long> allowedPurchaseAreaList = Arrays.asList(goodsInfoVO.getAllowedPurchaseArea().split(","))
                        .stream().map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
                //如果用户的收货地址省/市都不在不在该商品的指定销售区域内,则要改变状态
                if (!allowedPurchaseAreaList.contains(response.getCityId()) && !allowedPurchaseAreaList.contains(response.getProvinceId())) {
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, goodsInfoVO.getGoodsInfoName() + ",不在销售区请修改当前收货地址或联系客服！");
                }
            }
            //库存
//            if(Objects.nonNull(goodsWareStockListResponse) && CollectionUtils.isNotEmpty(goodsWareStockListResponse.getGoodsWareStockVOList())){
//                List<GoodsWareStockVO> goodsWareStockVOS = goodsWareStockListResponse.getGoodsWareStockVOList().stream()
//                        .filter(gw -> gw.getGoodsInfoId().equals(goodsInfoVO.getGoodsInfoId())).collect(Collectors.toList());
//                if(CollectionUtils.isNotEmpty(goodsWareStockVOS)){
//                    goodsInfoVO.setStock(goodsWareStockVOS.stream().mapToLong(s->s.getStock()).sum());
//                }
//            }
        });

        // 2.3.若是后端下单/修改,校验商家跟商品的关系(因为前端下单信息都是从库里读取的,无需验证)
        verifyBackendFlag(trade, tradeParams, skuList);

        // 分销商品、开店礼包商品、拼团商品、企业购商品不验证起限定量
//        boolean isIepCustomer = trade.getBuyer().isIepCustomer();
//        skuList.getGoodsInfos().forEach(item -> {
//            if (DistributionGoodsAudit.CHECKED.equals(item.getDistributionGoodsAudit())
//                    || DefaultFlag.YES.equals(trade.getStoreBagsFlag())
//                    || Objects.nonNull(tradeParams.getGrouponForm())
//                    || isIepCustomer) {
//                item.setCount(null);
//                item.setMaxCount(null);
//            }
//        });
//        // 2.4.校验sku 和 【商品价格计算第①步】: 商品的 客户级别价格 (完成客户级别价格/客户指定价/订货区间价计算) -> levelPrice
        boolean throwFlag = verifyService.verifyGoodsTo(trade.getTradeItems(), tradeParams.getOldTradeItems(), skuList, trade.getSupplier()
                .getStoreId(), true);

        // 特价商品和大客户商品回设 ——— 特价 > 企业购
//        if (Objects.isNull(trade.getIsFlashSaleGoods()) || !trade.getIsFlashSaleGoods()) {
//            trade.getTradeItems().forEach(i -> {
//                if (Objects.nonNull(i.getGoodsInfoType()) && i.getGoodsInfoType() == 1 && Objects.nonNull(i.getSpecialPrice())) {
//                    i.setSplitPrice(i.getSpecialPrice().multiply(new BigDecimal(i.getNum())));
//                    i.setPrice(i.getSpecialPrice());
//                    i.setLevelPrice(i.getSpecialPrice());
//                } else if (isIepCustomer && Objects.nonNull(i.getVipPrice()) && i.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
//                    i.setSplitPrice(i.getVipPrice().multiply(new BigDecimal(i.getNum())));
//                    i.setPrice(i.getVipPrice());
//                    i.setLevelPrice(i.getVipPrice());
//                }
//            });
//        }
        // 2.5.处理分销
//        dealDistribution(trade, tradeParams);

        // 2.5.商品营销信息冗余,验证,计算,设置各营销优惠,实付金额
//        if (tradeParams.getMarketingList().size() > 0) {
//            logger.info("TradeService.takeGoodValidateAndWrapperTrade MarketingList:{}",JSONObject.toJSONString(tradeParams.getMarketingList()));
//            tradeParams.getMarketingList().forEach(i -> {
//                List<TradeItem> items = trade.getTradeItems().stream().filter(s -> i.getSkuIds().contains(s.getSkuId()))
//                                             .collect(Collectors.toList());
//                items.forEach(s -> s.getMarketingIds().add(i.getMarketingId()));
//            });
//        }

        // 拼团订单--处理
//        if (Objects.nonNull(tradeParams.getGrouponForm())) {
//            dealGroupon(trade, tradeParams);
//        }
        //营销信息
//        this.wrapperMarketingForCommit(trade, tradeParams, tradeParams.getCustomer());

        // 2.6.赠品信息校验与填充
//        List<String> giftIds = tradeParams.getMarketingList().stream().filter(parm -> CollectionUtils.isNotEmpty(parm.getGiftSkuIds())).flatMap(
//                r -> r.getGiftSkuIds().stream()).distinct().collect(Collectors.toList());
//        TradeGetGoodsResponse giftResp = this.getGoodsResponse(giftIds, trade.getWareId(), trade.getWareHouseCode());
//        List<TradeItem> gifts = giftIds.stream().map(g -> TradeItem.builder().price(BigDecimal.ZERO).skuId(g)
//                                                                   .build()).collect(Collectors.toList());
//        verifyService.mergeGoodsInfo(gifts, giftResp);
//        trade.setGifts(gifts);
//        giftSet(trade);

        // 2.7 校验商品 + 赠品的库存
//        verifyGoodsByWMS(trade,tradeParams);

        //2.8.计算满系营销、优惠券均摊价，并设置结算信息
//        calcMarketingPrice(trade);

        // 2.9.计算并设置订单总价(已减去营销优惠总金额)
//        trade.setTradePrice(calc(trade));
        if (throwFlag) {
//            TradeItemSnapshot byCustomerId = tradeItemService.findByCustomerId(trade.getBuyer().getId());
//            byCustomerId.getItemGroups().forEach(param -> {
//                if (param.getSupplier().getStoreId().equals(trade.getSupplier()
//                                                                 .getStoreId())) {
//                    param.setTradeMarketings(trade.getTradeMarketings());
//                }
//            });
//            tradeItemService.updateTradeItemSnapshotNoRollback(byCustomerId);
            throw new SbcRuntimeException("K-050137");
        }

        //初始化订单金额
        trade.getTradePrice().setGoodsPrice(BigDecimal.ZERO);
        trade.getTradePrice().setOriginPrice(BigDecimal.ZERO);
        trade.getTradePrice().setTotalPrice(BigDecimal.ZERO);

        // 2.10.计算运费
        TradePrice tradePrice = trade.getTradePrice();
        BigDecimal deliveryPrice = tradePrice.getDeliveryPrice();
        if (tradePrice.getDeliveryPrice() == null) {

            // 弃用商家模板 计算运费方式改变 采用平台模板 使用所有商品总金额计算运费
           /* deliveryPrice = this.calcTradeFreight(trade.getConsignee(), trade.getSupplier(), trade.getDeliverWay(),
                    tradePrice.getTotalPrice(), trade.getTradeItems(), trade.getGifts());*/
            deliveryPrice = BigDecimal.ZERO;
            tradePrice.setDeliveryPrice(deliveryPrice);
        }

        //判断是否为秒杀抢购订单
        if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
            //秒杀商品是否包邮
            //获取秒杀抢购活动详情
            FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
                    .id(trade.getTradeItems().get(0).getFlashSaleGoodsId())
                    .build())
                    .getContext().getFlashSaleGoodsVO();
            if (flashSaleGoodsVO.getPostage().equals(1)) {
                deliveryPrice = new BigDecimal(0);
            }
        }

        // 2.11.计算订单总价(追加运费)
        tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
        if (tradePrice.isSpecial()) {
            // 2.12.【商品价格计算第③步】: 商品的 特价订单 均摊价 -> splitPrice
            tradeItemService.clacSplitPrice(trade.getTradeItems(), tradePrice.getPrivilegePrice());
            tradePrice.setTotalPrice(tradePrice.getPrivilegePrice().add(deliveryPrice));//应付金额 = 特价+运费
        } else {
            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
        }
        //统计商品总件数
        Long goodsTotalNum = 0L;
        Optional<Long> _goodsTotalNum = trade.getTradeItems().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_goodsTotalNum.isPresent()) {
            goodsTotalNum += _goodsTotalNum.get();
        }

        /**配送方式：第三方物流，收货地址为外省且满30件商品时，配送费可优惠2元/每箱;
         * 优惠方式为商品单价-2，统计优惠金额
         * */
        long buySum = tradeParams.getTradeItems().stream().mapToLong(t -> t.getNum()).sum();
//        CustomerDeliveryAddressByIdResponse deliveryAddressByIdResponse = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest.builder().deliveryAddressId(tradeParams.getConsigneeId()).build()).getContext();

        boolean freightCouponFlag = DeliverWay.LOGISTICS.equals(trade.getDeliverWay()) && trade.getConsignee().getProvinceId() != 430000 && 30 <= buySum;

        log.info("TradeService.takeGoodValidateAndWrapperTrade  trade.getDeliverWay {}", trade.getDeliverWay());

        log.info("TradeService.takeGoodValidateAndWrapperTrade  freightCouponFlag {}", freightCouponFlag);
        BigDecimal freightCouponPrice = BigDecimal.valueOf(buySum).multiply(BigDecimal.valueOf(2));
        if (freightCouponFlag) {
            BigDecimal subtract = tradePrice.getTotalPrice().subtract(freightCouponPrice);
            //支付金额小于等于0
            if (subtract.compareTo(BigDecimal.ZERO) == -1 || subtract.compareTo(BigDecimal.ZERO) == 0) {
                tradePrice.setDeliveryCouponPrice(tradePrice.getTotalPrice());
                tradePrice.setTotalPrice(BigDecimal.ZERO);
                //均摊
                int size = trade.getTradeItems().size();
                //订单总价
                BigDecimal totalSplitPrice = trade.getTradeItems().stream().map(tradeItem -> tradeItem.getSplitPrice()).reduce(BigDecimal.ZERO, BigDecimal::add);
                //运费优惠金额
                BigDecimal totalDeliveryCoupon = BigDecimal.ZERO;
                for (int i = 0; i < size; i++) {
                    TradeItem deliverTradeItem = trade.getTradeItems().get(i);
                    if (i == size - 1) {
                        deliverTradeItem.setSplitPrice(deliverTradeItem.getSplitPrice().subtract(tradePrice.getDeliveryCouponPrice().subtract(totalDeliveryCoupon)));
                    } else {
                        //计算优惠均摊 = 商品均摊价/商品总价 * 优惠总金额
                        BigDecimal multiply = tradePrice.getDeliveryCouponPrice().multiply(
                                deliverTradeItem.getSplitPrice().divide(totalSplitPrice, 2, BigDecimal.ROUND_HALF_UP)
                        ).setScale(2);
                        totalDeliveryCoupon.add(multiply);
                        deliverTradeItem.setSplitPrice(deliverTradeItem.getSplitPrice().subtract(multiply));
                    }
                }
            } else {
                tradePrice.setDeliveryCouponPrice(freightCouponPrice);
                //订单实付金额 = 应付金额 - 运费优惠金额
                tradePrice.setTotalPrice(tradePrice.getTotalPrice().subtract(freightCouponPrice));
                //订单商品价格减2
                trade.getTradeItems().forEach(ti -> {
                    ti.setPrice(ti.getPrice().subtract(BigDecimal.valueOf(2)));
                    //均摊价每箱减2
                    ti.setSplitPrice(ti.getSplitPrice().subtract(BigDecimal.valueOf(2).multiply(BigDecimal.valueOf(ti.getNum()))));
                });
            }
        }

        Optional<Long> _giftNum = trade.getGifts().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_giftNum.isPresent()) {
            goodsTotalNum += _giftNum.get();
        }

        //校验商品所在店铺配置免费配送范围
        List<FreightTemplateDeliveryAreaByStoreIdResponse> freightTemplateDeliveryAreaByStoreIdResponses = freightTemplateDeliveryAreaQueryProvider
                .query(FreightTemplateDeliveryAreaListRequest
                        .builder().storeId(trade.getSupplier().getStoreId()).build()).getContext();
        FreightTemplateDeliveryAreaByStoreIdResponse freightTemplateDeliveryAreaByStoreIdResponse = freightTemplateDeliveryAreaByStoreIdResponses.stream().filter(f -> {
            if (f.getAreaTenFreightTemplateDeliveryAreaVO().getWareId().equals(1L)) {
                return true;
            }
            return false;

        }).findAny().get();
        //常规
        FreightTemplateDeliveryAreaVO freightTemplateDeliveryAreaVO = freightTemplateDeliveryAreaByStoreIdResponse.getFreightTemplateDeliveryAreaVO();

        //乡镇满十件
        FreightTemplateDeliveryAreaVO areaTenFreightTemplateDeliveryAreaVO = freightTemplateDeliveryAreaByStoreIdResponse.getAreaTenFreightTemplateDeliveryAreaVO();

        if (
            //常规
                (Objects.nonNull(freightTemplateDeliveryAreaVO) && Objects.nonNull(freightTemplateDeliveryAreaVO.getDestinationArea())
                        && (ArrayUtils.contains(freightTemplateDeliveryAreaVO.getDestinationArea(), response.getProvinceId().toString())
                        || ArrayUtils.contains(freightTemplateDeliveryAreaVO.getDestinationArea(), response.getCityId().toString())))
        ) {
//            if(
//                //乡镇满十件(免费店配)
//                    (Objects.nonNull(areaTenFreightTemplateDeliveryAreaVO) && Objects.nonNull(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName())
//                            && (checkDeliveryDestination(response.getDeliveryAddress(), Stream.of(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName()).collect(Collectors.toList()))
//                            || checkDeliveryDestination(response.getDetailDeliveryAddress(), Stream.of(areaTenFreightTemplateDeliveryAreaVO.getDestinationAreaName()).collect(Collectors.toList()))))
//            ){
//                if(trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME) && goodsTotalNum < 10){
//                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "乡镇免费店配数量不足！");
//                }
//            }
        }

        trade.setGoodsTotalNum(goodsTotalNum);
        return trade;
    }

    /**
     * 收货地址匹配乡镇免费店配地址
     */
    private Boolean checkDeliveryDestination(String deliveryAddress, List<String> destinationAreaNameList) {

        if (CollectionUtils.isEmpty(destinationAreaNameList) || Objects.isNull(deliveryAddress)) {
            return false;
        }

        AtomicReference<Boolean> checkDelivery = new AtomicReference<>(false);

        destinationAreaNameList.forEach(da -> {
            if (deliveryAddress.contains(da)) {
                checkDelivery.set(true);
            }
        });

        return checkDelivery.get();
    }

    /**
     * 校验库存—— 通过wms校验库存
     */
    private void verifyGoodsByWMS(Trade trade, TradeParams tradeParams) {
        //1.合并赠品
        List<TradeItem> tradeItemList = trade.getTradeItems();
        List<TradeItem> tradeItems = KsBeanUtil.convert(tradeItemList, TradeItem.class);
        tradeItems.addAll(trade.getGifts());
        //2.根据 erpNo 分组(普通商品)
        Map<String, List<TradeItem>> tradeItemMap = tradeItems.stream().filter(t -> Objects.isNull(t.getGoodsInfoType()) || 1 != t.getGoodsInfoType())
                .collect(Collectors.groupingBy(TradeItem::getErpSkuNo));
        //特价商品
        Map<String, List<TradeItem>> specialTradeItemMap = tradeItems.stream().filter(t -> Objects.nonNull(t.getGoodsInfoType()) && 1 == t.getGoodsInfoType())
                .collect(Collectors.groupingBy(TradeItem::getErpSkuNo));
        //普通商品
        if (MapUtils.isNotEmpty(tradeItemMap)) {
            Map<String, Long> erpNoMap = new HashMap<>();
            for (String erp : tradeItemMap.keySet()) {
                Long num = tradeItemMap.get(erp).stream().mapToLong(TradeItem::getNum).sum();
                BigDecimal addStep = tradeItemMap.get(erp).get(0).getAddStep().setScale(0, BigDecimal.ROUND_HALF_UP);
                ;
                erpNoMap.put(erp, num * addStep.longValue());
            }
            //3.组装wms的请求数据
            List<String> erpGoodsInfoNos = new ArrayList<>(erpNoMap.keySet());
            if (wmsAPIFlag && wmsApiProperties.getInventoryFlag()) {
                String loatt04 = ERPWMSConstants.MAIN_WH;
                if ("WH01".equals(tradeParams.getWareHouseCode())) {
                    loatt04 = ERPWMSConstants.MAIN_WH;
                }
                if ("WH02".equals(tradeParams.getWareHouseCode())) {
                    loatt04 = ERPWMSConstants.SUB_WH;
                }
                if ("WH03".equals(tradeParams.getWareHouseCode())) {
                    loatt04 = ERPWMSConstants.STORE_WH;
                }
                /* try {*/
                InventoryQueryResponse response = requestWMSInventoryProvider.batchQueryInventory(BatchInventoryQueryRequest.builder()
                        .skuIds(erpGoodsInfoNos)
                        .CustomerID(StringUtils.isNotEmpty(tradeParams.getSupplier().getErpId()) ?
                                tradeParams.getSupplier().getErpId() : "XYY")
                        .WarehouseID(tradeParams.getWareHouseCode())
                        .Lotatt04(loatt04)
                        .build()).getContext();
                if (Objects.nonNull(response)
                        && CollectionUtils.isNotEmpty(response.getInventoryQueryReturnVO())
                        && response.getInventoryQueryReturnVO().size() == erpGoodsInfoNos.size()) {
                    List<InventoryQueryReturnVO> inventoryQueryReturnVOS = response.getInventoryQueryReturnVO();
                    inventoryQueryReturnVOS.stream().forEach(i -> {
                        Long buyNum = erpNoMap.get(i.getSku());
                        if (Objects.nonNull(i.getStockNum()) && i.getStockNum().compareTo(new BigDecimal(buyNum)) == -1) {
                            //发送wms的通知
                            orderProducerService.sendMessageToDelLackStock(GoodsLackStockRequest.builder()
                                    .erpGoodsNo(i.getSku()).lackNum(buyNum - i.getStockNum().setScale(0,
                                            BigDecimal.ROUND_DOWN).longValue()).build());
                            throw new SbcRuntimeException("K-050116");
                        }
                    });
                } else {
                    // 商品不存在
                    throw new SbcRuntimeException("K-050117");
                }
                /*}catch (Exception e){
                    if(e instanceof SbcRuntimeException){
                        SbcRuntimeException exception = (SbcRuntimeException)e;
                        if("K-050510".equals(exception.getErrorCode())){
                            throw new SbcRuntimeException("K-050510");
                        }
                    }
                }*/
            }
        }
        // 特价
        if (MapUtils.isNotEmpty(specialTradeItemMap)) {
            Map<String, Long> erpNoMap = new HashMap<>();
            for (String erp : specialTradeItemMap.keySet()) {
                Long num = specialTradeItemMap.get(erp).stream().mapToLong(TradeItem::getNum).sum();
                BigDecimal addStep = specialTradeItemMap.get(erp).get(0).getAddStep().setScale(0,
                        BigDecimal.ROUND_HALF_UP);
                erpNoMap.put(erp, num * addStep.longValue());
            }
            //3.组装wms的请求数据
            List<String> erpGoodsInfoNos = new ArrayList<>(erpNoMap.keySet());
            if (wmsAPIFlag && wmsApiProperties.getInventoryFlag()) {
                String loatt04 = ERPWMSConstants.MAIN_WH;
                if ("WH01".equals(tradeParams.getWareHouseCode())) {
                    loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                }
                if ("WH02".equals(tradeParams.getWareHouseCode())) {
                    loatt04 = ERPWMSConstants.SUB_MARKETING_WH;
                }
                if ("WH03".equals(tradeParams.getWareHouseCode())) {
                    loatt04 = ERPWMSConstants.SUB_MARKETING_WH;
                }
                try {
                    InventoryQueryResponse response = requestWMSInventoryProvider.batchQueryInventory(BatchInventoryQueryRequest.builder()
                            .skuIds(erpGoodsInfoNos)
                            .CustomerID(StringUtils.isNotEmpty(tradeParams.getSupplier().getErpId()) ?
                                    tradeParams.getSupplier().getErpId() : "XYY")
                            .WarehouseID(tradeParams.getWareHouseCode())
                            .Lotatt04(loatt04)
                            .build()).getContext();
                    if (Objects.nonNull(response)
                            && CollectionUtils.isNotEmpty(response.getInventoryQueryReturnVO())
                            && response.getInventoryQueryReturnVO().size() == erpGoodsInfoNos.size()) {
                        List<InventoryQueryReturnVO> inventoryQueryReturnVOS = response.getInventoryQueryReturnVO();
                        inventoryQueryReturnVOS.stream().forEach(i -> {
                            Long buyNum = erpNoMap.get(i.getSku());
                            if (Objects.nonNull(i.getStockNum()) && i.getStockNum().compareTo(new BigDecimal(buyNum)) == -1) {
                                // 特价商品不发送到货通知
                                throw new SbcRuntimeException("K-050509");
                            }
                        });
                    } else {
                        // 商品不存在
                        throw new SbcRuntimeException("K-050509");
                    }
                } catch (Exception e) {
                    if (e instanceof SbcRuntimeException) {
                        SbcRuntimeException exception = (SbcRuntimeException) e;
                        if ("K-050510".equals(exception.getErrorCode())) {
                            throw new SbcRuntimeException("K-050510");
                        }
                    }
                }
            }
        }
    }


    /**
     * 处理分销订单
     *
     * @param trade
     * @param tradeParams
     */
    private void dealDistribution(Trade trade, TradeParams tradeParams) {
        if ((Objects.isNull(trade.getIsFlashSaleGoods()) || (Objects.nonNull(trade.getIsFlashSaleGoods()) && !trade.getIsFlashSaleGoods())) && DefaultFlag.YES.equals(tradeParams.getOpenFlag())) {
            if (DefaultFlag.YES.equals(tradeParams.getStoreBagsFlag())) {
                // 开店礼包商品，使用市场价，且不计算营销
                trade.getTradeItems().forEach(item -> {
                    item.setSplitPrice(item.getOriginalPrice().multiply(new BigDecimal(item.getNum())));
                    item.setPrice(item.getOriginalPrice());
                    item.setLevelPrice(item.getOriginalPrice());
                });
                trade.setStoreBagsFlag(DefaultFlag.YES);
                tradeParams.setMarketingList(new ArrayList<>());
                trade.setTradeMarketings(new ArrayList<>());
                trade.setTradeCoupon(null);
                trade.setStoreBagsInviteeId(tradeParams.getDistributeChannel().getInviteeId());
            } else {
                // 非开店礼包，且为分销商品
                // 1.将分销商品设回市场价
                DistributeChannel channel = tradeParams.getDistributeChannel();
                trade.getTradeItems().forEach(item -> {
                    if (DistributionGoodsAudit.CHECKED == item.getDistributionGoodsAudit()
                            && DefaultFlag.YES.equals(tradeParams.getStoreOpenFlag())
                            && ChannelType.PC_MALL != channel.getChannelType()) {
                        item.setSplitPrice(item.getOriginalPrice().multiply(new BigDecimal(item.getNum())));
                        item.setPrice(item.getOriginalPrice());
                        item.setLevelPrice(item.getOriginalPrice());
                        // 初步计算分销佣金
                        item.setDistributionCommission(item.getSplitPrice().multiply(item.getCommissionRate()));
                    } else {
                        item.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
                    }
                });

                List<TradeItem> distributionTradeItems = trade.getTradeItems().stream()
                        .filter(item -> DistributionGoodsAudit.CHECKED.equals(item.getDistributionGoodsAudit())).collect(Collectors.toList());

                // 2.设置分销相关字段
                if (distributionTradeItems.size() != 0) {

                    MultistageSettingGetResponse multistageSetting =
                            distributionCacheQueryProvider.getMultistageSetting().getContext();

                    // 2.1.查询佣金受益人列表
                    DistributionCustomerListForOrderCommitRequest request =
                            new DistributionCustomerListForOrderCommitRequest();
                    request.setBuyerId(trade.getBuyer().getId());
                    request.setCommissionPriorityType(
                            CommissionPriorityType.fromValue(multistageSetting.getCommissionPriorityType().toValue())
                    );
                    request.setCommissionUnhookType(
                            CommissionUnhookType.fromValue(multistageSetting.getCommissionUnhookType().toValue())
                    );
                    request.setDistributorLevels(multistageSetting.getDistributorLevels());
                    request.setInviteeId(channel.getInviteeId());
                    request.setIsDistributor(tradeParams.getIsDistributor());
                    List<DistributionCustomerSimVO> inviteeCustomers = distributionCustomerQueryProvider
                            .listDistributorsForOrderCommit(request).getContext().getDistributorList();

                    List<TradeDistributeItem> distributeItems = new ArrayList<>();

                    // 商品分销佣金map(记录每个分销商品基础分销佣金)
                    Map<String, BigDecimal> skuBaseCommissionMap = new HashMap<>();
                    distributionTradeItems.forEach(item ->
                            skuBaseCommissionMap.put(item.getSkuId(), item.getDistributionCommission())
                    );

                    // 2.2.根据受益人列表设置分销相关字段
                    BigDecimal totalCommission = BigDecimal.ZERO;
                    if (CollectionUtils.isNotEmpty(inviteeCustomers)) {

                        for (int idx = 0; idx < inviteeCustomers.size(); idx++) {

                            DistributionCustomerSimVO customer = inviteeCustomers.get(idx);

                            DistributorLevelVO level = multistageSetting.getDistributorLevels().stream()
                                    .filter(l -> l.getDistributorLevelId().equals(customer.getDistributorLevelId())).findFirst().get();

                            if (idx == 0) {
                                // 2.2.1.设置返利人信息
                                distributionTradeItems.forEach(item -> {
                                    // 设置trade.tradeItems
                                    item.setDistributionCommission(
                                            DistributionCommissionUtils.calDistributionCommission(
                                                    item.getDistributionCommission(), level.getCommissionRate())
                                    );
                                    item.setCommissionRate(item.getCommissionRate().multiply(level.getCommissionRate()));

                                    // 设置trade.distributeItems
                                    TradeDistributeItem distributeItem = new TradeDistributeItem();
                                    distributeItem.setGoodsInfoId(item.getSkuId());
                                    distributeItem.setNum(item.getNum());
                                    distributeItem.setActualPaidPrice(item.getSplitPrice());
                                    distributeItem.setCommissionRate(item.getCommissionRate());
                                    distributeItem.setCommission(item.getDistributionCommission());
                                    distributeItems.add(distributeItem);
                                });

                                // 设置trade.[inviteeId,distributorId,distributorName,commission]
                                trade.setInviteeId(customer.getCustomerId());
                                trade.setDistributorId(customer.getDistributionId());
                                trade.setDistributorName(customer.getCustomerName());
                                trade.setCommission(
                                        distributeItems.stream().map(TradeDistributeItem::getCommission)
                                                .reduce(BigDecimal.ZERO, BigDecimal::add)
                                );
                                // 累加返利人佣金至总佣金
                                totalCommission = totalCommission.add(trade.getCommission());

                            } else {
                                // 2.2.2.设置提成人信息
                                BigDecimal percentageTotal = BigDecimal.ZERO;
                                for (int i = 0; i < distributeItems.size(); i++) {
                                    // 设置trade.distributeItems.commissions
                                    TradeDistributeItem item = distributeItems.get(i);
                                    TradeDistributeItemCommission itemCommission = new TradeDistributeItemCommission();
                                    itemCommission.setCustomerId(customer.getCustomerId());
                                    itemCommission.setDistributorId(customer.getDistributionId());
                                    itemCommission.setCommission(
                                            skuBaseCommissionMap.get(item.getGoodsInfoId()).multiply(
                                                    level.getPercentageRate()).setScale(2, BigDecimal.ROUND_DOWN));
                                    item.getCommissions().add(itemCommission);
                                    percentageTotal = percentageTotal.add(itemCommission.getCommission());
                                }

                                // 设置trade.commissions
                                TradeCommission tradeCommission = new TradeCommission();
                                tradeCommission.setCustomerId(customer.getCustomerId());
                                tradeCommission.setCommission(percentageTotal);
                                tradeCommission.setDistributorId(customer.getDistributionId());
                                tradeCommission.setCustomerName(customer.getCustomerName());
                                trade.getCommissions().add(tradeCommission);

                                // 累加提成人佣金至总佣金
                                totalCommission = totalCommission.add(tradeCommission.getCommission());
                            }

                        }

                        // 求和分销商品总佣金 trade.distributeItems.totalCommission
                        distributeItems.forEach(item -> {
                            // 追加返利人佣金
                            item.setTotalCommission(item.getCommission());
                            // 追加提成人佣金
                            item.getCommissions().forEach(i ->
                                    item.setTotalCommission(item.getTotalCommission().add(i.getCommission()))
                            );
                        });

                        // 设置总佣金、分销商品
                        trade.setTotalCommission(totalCommission);
                        trade.setDistributeItems(distributeItems);
                    }
                }
            }
        }
        //设置渠道信息、小店名称、小B-会员ID
        trade.setChannelType(tradeParams.getDistributeChannel().getChannelType());
        trade.setShopName(tradeParams.getShopName());
        trade.setDistributionShareCustomerId(tradeParams.getDistributeChannel().getInviteeId());
    }


    private CommonLevelVO fromCustomerLevel(CustomerLevelVO customerLevelVO) {
        if (customerLevelVO == null) {
            return null;
        }
        CommonLevelVO result = new CommonLevelVO();
        result.setLevelId(customerLevelVO.getCustomerLevelId());
        result.setLevelName(customerLevelVO.getCustomerLevelName());
        result.setLevelDiscount(customerLevelVO.getCustomerLevelDiscount());

        return result;
    }

    /**
     * 查询店铺订单应付的运费(需要参数具体如下)
     * consignee 收货地址 - 省id,市id
     * supplier 店铺信息 - 店铺id-使用运费模板类型
     * deliverWay 配送方式
     * totalPrice 订单总价(扣除营销优惠后)
     * oldTradeItems 订单商品List - 均摊价(计算营销后),件数   ,体积,重量,使用的运费模板id
     * oldGifts 订单赠品List - 价格为0,件数   ,体积,重量,使用的运费模板id
     *
     * @param tradeParams
     * @return
     */
    public TradeFreightResponse getFreight(TradeParams tradeParams) {
        TradeFreightResponse freightResponse = new TradeFreightResponse();
//        BigDecimal deliveryPrice = BigDecimal.ZERO;
        if (tradeParams.getSupplier().getCompanyType().equals(CompanyType.RETAIL)) {
//            deliveryPrice = this.calcRetailTradeFreight(tradeParams.getOldTradeItems(),tradeParams.getOldGifts());
            freightResponse.setSaleType(SaleType.RETAIL);
        } else {
            freightResponse.setSaleType(SaleType.WHOLESALE);
        }

        BigDecimal deliveryPrice =BigDecimal.ZERO;
        if(DeliverWay.DELIVERY_TO_STORE.equals(tradeParams.getDeliverWay())) {
            //deliveryPrice = this.calcTradeFreightDeliveryToStore(tradeParams.getConsignee(),tradeParams.getOldTradeItems(), tradeParams.getOldGifts());
        }else{
            deliveryPrice = this.calcTradeFreight(tradeParams.getConsignee(), tradeParams.getSupplier(),
                    tradeParams.getDeliverWay(),
                    tradeParams.getTradePrice().getTotalPrice(), tradeParams.getOldTradeItems(), tradeParams.getOldGifts());
        }

        freightResponse.setStoreId(tradeParams.getSupplier().getStoreId());
        freightResponse.setStoreName(tradeParams.getSupplier().getStoreName());
        freightResponse.setDeliveryPrice(deliveryPrice);
        return freightResponse;
    }

    /**
     * 提交订单前获取订单信息页面计算包装费（零售哦）
     */
    public BigDecimal setPackingPrice() {
        BigDecimal packingPrice = BigDecimal.ZERO;
        //包装费配置信息
        PackingConfigVO packingConfigVO = packingConfigQueryProvider.list().getContext().getPackingConfigVO();
        if (Objects.nonNull(packingConfigVO) && Objects.nonNull(packingConfigVO.getPackingAmount())
                && packingConfigVO.getPackingAmount().compareTo(BigDecimal.ZERO) > 0) {
            packingPrice = packingConfigVO.getPackingAmount();
        }
        return packingPrice;
    }

    /**
     * 查询平台运费模板 xyy
     * 查询店铺订单应付的运费(需要参数具体如下)
     * consignee 收货地址 - 省id,市id
     * supplier 店铺信息  只有平台模板   店铺id 默认就为-1
     * totalPrice 订单总价(扣除营销优惠后)
     * oldTradeItems 订单商品List - 均摊价(计算营销后),件数   ,体积,重量,使用的运费模板id
     *
     * @param tradeParamsList
     * @return
     */
    public List<TradeFreightResponse> getBossFreight(List<TradeParams> tradeParamsList) {
        //TradeParams tradeParams = tradeParamsList.stream().findFirst().get();
        //tradeParams.getSupplier().setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
        // 商品总金额
        //BigDecimal totalPrice = tradeParamsList.stream().map(param ->param.getTradePrice().getTotalPrice()).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
        //  订单总运费
        //BigDecimal deliveryPrice = this.calcBossTradeFreight(tradeParams.getConsignee(), tradeParams.getSupplier(),totalPrice);
        List<TradeFreightResponse> freightResponseList = tradeParamsList.stream().map(param -> {
            BigDecimal totalPrice =param.getTradePrice().getTotalPrice();
            BigDecimal deliveryPrice = this.calcBossTradeFreight(param.getConsignee(), param.getSupplier(),
            totalPrice);
            TradeFreightResponse freightResponse = new TradeFreightResponse();
            freightResponse.setStoreId(param.getSupplier().getStoreId());
            freightResponse.setStoreName(param.getSupplier().getStoreName());
            // 订单金额如为零
            if (totalPrice.compareTo(BigDecimal.ZERO) == Constants.no) {
                // deliveryPrice 订单运费不为0
                if (deliveryPrice.compareTo(BigDecimal.ZERO) == Constants.yes) {
                    freightResponse.setDeliveryPrice(deliveryPrice.divide(new BigDecimal(tradeParamsList.size()), 2, BigDecimal.ROUND_HALF_UP));
                }
            } else {
                freightResponse.setDeliveryPrice(param.getTradePrice().getTotalPrice().compareTo(BigDecimal.ZERO) == Constants.no ?
                        BigDecimal.ZERO : deliveryPrice.compareTo(BigDecimal.ZERO) == Constants.no ? BigDecimal.ZERO :
                        param.getTradePrice().getTotalPrice().divide(
                                totalPrice.divide(deliveryPrice, 4, BigDecimal.ROUND_HALF_UP), 4, BigDecimal.ROUND_HALF_UP).
                                setScale(1, BigDecimal.ROUND_HALF_UP)
                );
            }
            return freightResponse;
        }).collect(Collectors.toList());
        return freightResponseList;
    }

    /**
     * 设置订单运费,并追加到订单原价/应付金额中
     * 若商家没有单独填写订单运费,则根据订单商品,赠品按照运费模板进行计算
     *
     * @param consignee  收货地址 - 省id,市id
     * @param supplier   店铺信息 - 店铺id-使用运费模板类型
     * @param totalPrice 订单总价(扣除营销优惠后)
     * @return freight 订单应付运费
     */
    public BigDecimal calcBossTradeFreight(Consignee consignee, Supplier supplier, BigDecimal
            totalPrice) {
        BigDecimal freight = BigDecimal.ZERO;
        if (DefaultFlag.NO.equals(supplier.getFreightTemplateType())) {
            //1. 店铺运费模板计算
            freight = calcTradeFreightByStore(consignee, supplier.getStoreId(), totalPrice, freight);
        }
        return freight;
    }


    /**
     * 零售订单 运费单独计算
     *
     * @param goodsList
     * @param giftList
     * @return
     */
    public BigDecimal calcRetailTradeFreight(List<TradeItem> goodsList, List<TradeItem> giftList) {
        goodsList.forEach(item -> item.setGoodsWeight(item.getGoodsWeight().add(item.getGoodsWeight().multiply(BigDecimal.valueOf(item.getNum())))));
        BigDecimal sumGoodsWeight = goodsList.stream().map(item -> item.getGoodsWeight()).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal sumGiftWeight = BigDecimal.ZERO;
        if (CollectionUtils.isNotEmpty(giftList)) {
            giftList.forEach(item -> item.setGoodsWeight(item.getGoodsWeight().add(item.getGoodsWeight().multiply(BigDecimal.valueOf(item.getNum())))));
            sumGiftWeight = giftList.stream().map(item -> item.getGoodsWeight()).reduce(BigDecimal.ZERO, BigDecimal::add);
        }

        if (sumGoodsWeight.add(sumGiftWeight).compareTo(BigDecimal.ONE) <= 0) {
            return BigDecimal.valueOf(0.01);
        } else {
            return BigDecimal.valueOf(0.02);
        }
    }

    /**
     * 设置订单运费,并追加到订单原价/应付金额中
     * 若商家没有单独填写订单运费,则根据订单商品,赠品按照运费模板进行计算
     *
     * @param consignee  收货地址 - 省id,市id
     * @param supplier   店铺信息 - 店铺id-使用运费模板类型
     * @param deliverWay 配送方式
     * @param totalPrice 订单总价(扣除营销优惠后)
     * @param goodsList  订单商品List - 均摊价(计算营销后),件数   ,体积,重量,使用的运费模板id
     * @param giftList   订单赠品List - 价格为0,件数   ,体积,重量,使用的运费模板id
     * @return freight 订单应付运费
     */
    public BigDecimal calcTradeFreight(Consignee consignee, Supplier supplier, DeliverWay deliverWay, BigDecimal
            totalPrice, List<TradeItem> goodsList, List<TradeItem> giftList) {
        BigDecimal freight = BigDecimal.ZERO;
        if (DefaultFlag.NO.equals(supplier.getFreightTemplateType())) {
            freight = calcTradeFreightByStore(consignee, supplier.getStoreId(), totalPrice, freight);
        } else if (DefaultFlag.YES.equals(supplier.getFreightTemplateType())) {
            freight = calcTradeFreightByGoods(consignee, deliverWay, goodsList, giftList);
        }
        return freight;
    }

    private BigDecimal calcTradeFreightByStore(Consignee consignee, Long storeId, BigDecimal totalPrice, BigDecimal freight) {
        //1. 店铺运费模板计算
        FreightTemplateStoreVO templateStore;
        List<FreightTemplateStoreVO> storeTemplateList =
                freightTemplateStoreQueryProvider.listByStoreIdAndDeleteFlag(
                        FreightTemplateStoreListByStoreIdAndDeleteFlagRequest.builder()
                                .storeId(storeId).deleteFlag(DeleteFlag.NO).build()
                ).getContext().getFreightTemplateStoreVOList();
//            List<FreightTemplateStoreVO> storeTemplateList = freightTemplateStoreRepository.findByAll(supplier
//                    .getStoreId(), DeleteFlag.NO);
        //1.1. 配送地匹配运费模板(若匹配不上则使用默认运费模板)
        Optional<FreightTemplateStoreVO> tempOptional = storeTemplateList.stream().filter(temp -> matchArea(
                temp.getDestinationArea(), consignee.getProvinceId(), consignee.getCityId())).findFirst();
        if (tempOptional.isPresent()) {
            templateStore = tempOptional.get();
        } else {
            templateStore = storeTemplateList.stream().filter(temp ->
                    DefaultFlag.YES.equals(temp.getDefaultFlag())).findFirst().get();
        }

        if (DefaultFlag.NO.equals(templateStore.getFreightType())) {
            //1.2. 满金额包邮情况
            if (totalPrice.compareTo(templateStore.getSatisfyPrice()) < 0) {
                freight = templateStore.getSatisfyFreight();
            }
        } else {
            //1.3. 固定运费情况
            freight = templateStore.getFixedFreight();
        }
        return freight;
    }

    private BigDecimal calcTradeFreightByGoods(Consignee consignee, DeliverWay deliverWay, List<TradeItem> goodsList, List<TradeItem> giftList) {
        BigDecimal freight;
        // 2.单品运费模板计算
        // 2.1.根据templateId分组聚合总件数,重量,体积,价格, 并查询各运费模板信息
        Map<Long, TradeItem> templateGoodsMap = new LinkedHashMap<>();
        log.info("========================算取运费传来的数据" + goodsList);
        log.info("========================算取运费传来的数据赠品" + giftList);
        this.setGoodsSumMap(templateGoodsMap, goodsList);
        this.setGoodsSumMap(templateGoodsMap, giftList);
        List<Long> tempIdList = new ArrayList<>(templateGoodsMap.keySet());
//            List<FreightTemplateGoods> templateList = freightTemplateGoodsService.queryAllByIds(tempIdList);
        List<FreightTemplateGoodsVO> templateList = tradeCacheService.queryFreightTemplateGoodsListByIds(tempIdList);


        // 2.2.剔除满足指定条件包邮的运费模板(即剔除运费为0的)
        templateList = templateList.stream().filter(temp ->
                getFreeFreightFlag(temp, templateGoodsMap, deliverWay, consignee.getProvinceId(), consignee
                        .getCityId()))
                .collect(Collectors.toList());

        // 2.3.遍历单品运费模板List,设置匹配上收货地的配送地信息,同时计算出最大首运费的模板
        FreightTemplateGoodsExpressVO maxTemplate = new FreightTemplateGoodsExpressVO();
        for (int i = 0; i < templateList.size(); i++) {
            FreightTemplateGoodsVO temp = templateList.get(i);
            FreightTemplateGoodsExpressVO freExp = getMatchFreightTemplate(temp.getFreightTemplateGoodsExpresses(),
                    consignee.getProvinceId(), consignee.getCityId());
            temp.setExpTemplate(freExp);
            if (i == 0) {
                maxTemplate = freExp;
            } else {
                maxTemplate = maxTemplate.getFreightStartPrice().compareTo(freExp.getFreightStartPrice()) < 0 ?
                        freExp : maxTemplate;
            }
        }
        log.info("========================templateList" + templateList);
        log.info("========================templateGoodsMap" + templateGoodsMap);
        // 2.4.计算剩余的每个模板的运费
        final Long tempId = maxTemplate.getFreightTempId();
        freight = templateList.stream().map(temp -> getSingleTemplateFreight(temp, tempId, templateGoodsMap))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        log.info("最终算出金额" + freight);
        return freight;
    }


    private boolean isToStoreVillageFlag(Long cityId,Long townId) {
        return freightTemplateDeliveryAreaQueryProvider.queryIsToStoreVillageFlag(cityId,townId).getContext();
        /*FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_10 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_10);
        platDeliveryToStoreCfg_10 = verifyService.veriryFreightTemplateDeliveryAreaVO34(consignee.getAreaId(),consignee.getTwonId(), platDeliveryToStoreCfg_10);
        boolean villageFlag = platDeliveryToStoreCfg_10!=null;
        return villageFlag;*/
    }

    private void resetConsigneeById(Consignee consignee) {
        CustomerDeliveryAddressByIdResponse response = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest
                .builder().deliveryAddressId(consignee.getId()).build()).getContext();
        if(response!=null){
            consignee.setProvinceId(response.getProvinceId());
            consignee.setCityId(response.getCityId());
            consignee.setAreaId(response.getAreaId());
            consignee.setTwonId(response.getTwonId());
        }
    }

    private static Long getTradeSkuNumber(List<TradeItem> goodsList, List<TradeItem> giftList) {
        Long goodsTotalNum = 0L;
        if(CollectionUtils.isNotEmpty(goodsList)){
            goodsTotalNum += goodsList.stream().map(TradeItem::getNum).reduce(Long::sum).orElse(0L);
        }
        if(CollectionUtils.isNotEmpty(giftList)){
            goodsTotalNum += giftList.stream().map(TradeItem::getNum).reduce(Long::sum).orElse(0L);
        }
        return goodsTotalNum;
    }

    /**
     * 设置订单运费,并追加到订单原价/应付金额中
     * 若商家没有单独填写订单运费,则根据订单商品,赠品按照运费模板进行计算
     *
     * @param consignee  收货地址 - 省id,市id
     * @param supplier   店铺信息 - 店铺id-使用运费模板类型
     * @param deliverWay 配送方式
     * @param totalPrice 订单总价(扣除营销优惠后)
     * @param goodsList  订单商品List - 均摊价(计算营销后),件数   ,体积,重量,使用的运费模板id
     * @param giftList   订单赠品List - 价格为0,件数   ,体积,重量,使用的运费模板id
     * @return freight 订单应付运费
     */
    public BigDecimal calcTradeFreightAndBluk(Consignee consignee, Supplier supplier, DeliverWay deliverWay, BigDecimal
            totalPrice, List<TradeItem> goodsList,List<TradeItem> bulkGoodsList,List<TradeItem> giftList) {
        BigDecimal freight = BigDecimal.ZERO;
        if (DefaultFlag.NO.equals(supplier.getFreightTemplateType())) {
            //1. 店铺运费模板计算
            freight = calcTradeFreightByStore(consignee, supplier.getStoreId(), totalPrice, freight);
        } else if (DefaultFlag.YES.equals(supplier.getFreightTemplateType())) {
            // 2.单品运费模板计算
            // 2.1.根据templateId分组聚合总件数,重量,体积,价格, 并查询各运费模板信息
            Map<Long, TradeItem> templateGoodsMap = new LinkedHashMap<>();
            log.info("========================算取运费传来的数据" + goodsList);
            log.info("========================算取运费传来的拆箱数据" + bulkGoodsList);
            log.info("========================算取运费传来的数据赠品" + giftList);
            this.setGoodsSumMapContionBluk(templateGoodsMap, goodsList,bulkGoodsList);
            this.setGoodsSumMap(templateGoodsMap, giftList);
            List<Long> tempIdList = new ArrayList<>(templateGoodsMap.keySet());
//            List<FreightTemplateGoods> templateList = freightTemplateGoodsService.queryAllByIds(tempIdList);
            List<FreightTemplateGoodsVO> templateList = tradeCacheService.queryFreightTemplateGoodsListByIds(tempIdList);


            // 2.2.剔除满足指定条件包邮的运费模板(即剔除运费为0的)
            templateList = templateList.stream().filter(temp ->
                            getFreeFreightFlag(temp, templateGoodsMap, deliverWay, consignee.getProvinceId(), consignee
                                    .getCityId()))
                    .collect(Collectors.toList());

            // 2.3.遍历单品运费模板List,设置匹配上收货地的配送地信息,同时计算出最大首运费的模板
            FreightTemplateGoodsExpressVO maxTemplate = new FreightTemplateGoodsExpressVO();
            for (int i = 0; i < templateList.size(); i++) {
                FreightTemplateGoodsVO temp = templateList.get(i);
                FreightTemplateGoodsExpressVO freExp = getMatchFreightTemplate(temp.getFreightTemplateGoodsExpresses(),
                        consignee.getProvinceId(), consignee.getCityId());
                temp.setExpTemplate(freExp);
                if (i == 0) {
                    maxTemplate = freExp;
                } else {
                    maxTemplate = maxTemplate.getFreightStartPrice().compareTo(freExp.getFreightStartPrice()) < 0 ?
                            freExp : maxTemplate;
                }
            }
            log.info("========================templateList" + templateList);
            log.info("========================templateGoodsMap" + templateGoodsMap);
            // 2.4.计算剩余的每个模板的运费
            final Long tempId = maxTemplate.getFreightTempId();
            freight = templateList.stream().map(temp -> getSingleTemplateFreight(temp, tempId, templateGoodsMap))
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            log.info("最终算出金额" + freight);

        }
        return freight;
    }


    public TradeFreightResponse getTradeFreightAndBluk(Consignee consignee, Supplier supplier, DeliverWay deliverWay, BigDecimal
            totalPrice, List<TradeItem> goodsList,List<TradeItem> bulkGoodsList,List<TradeItem> giftList) {
        TradeFreightResponse freightResponse = new TradeFreightResponse();
        BigDecimal freight = this.calcTradeFreightAndBluk(consignee, supplier, deliverWay, totalPrice, goodsList, bulkGoodsList, giftList);
        freightResponse.setDeliveryPrice(freight);
        freightResponse.setSaleType(SaleType.WHOLESALE);
        freightResponse.setStoreId(supplier.getStoreId());
        freightResponse.setStoreName(supplier.getStoreName());
        return freightResponse;
    }
    /**
     * 是否包邮
     *
     * @param temp             单品运费模板
     * @param templateGoodsMap 按模板id分组的商品汇总信息
     * @param deliverWay       运送方式
     * @param provId           省份id
     * @param cityId           城市id
     * @return
     */
    private boolean getFreeFreightFlag(FreightTemplateGoodsVO temp, Map<Long, TradeItem> templateGoodsMap, DeliverWay
            deliverWay, Long provId, Long cityId) {
        if (DefaultFlag.YES.equals(temp.getSpecifyTermFlag())) {
            ValuationType valuationType = temp.getValuationType();
            List<FreightTemplateGoodsFreeVO> freeTemplateList = temp.getFreightTemplateGoodsFrees();
            Optional<FreightTemplateGoodsFreeVO> freeOptional = freeTemplateList.stream().filter(free -> matchArea(
                    free.getDestinationArea(), provId, cityId)).findFirst();

            //2.3.1. 找到收货地匹配的 并且 运送方式一致的指定包邮条件
            if (freeOptional.isPresent() && deliverWay.equals(freeOptional.get().getDeliverWay())) {
                FreightTemplateGoodsFreeVO freeObj = freeOptional.get();
                ConditionType conditionType = freeObj.getConditionType();

                //2.3.2. 根据计价方式,计算包邮条件是否满足
                switch (valuationType) {
                    case NUMBER: //按件数
                        switch (conditionType) {
                            case VALUATION:
                                if (BigDecimal.valueOf(templateGoodsMap.get(temp.getFreightTempId()).getNum())
                                        .compareTo(freeObj.getConditionOne()) >= 0) {//件数高于-包邮
                                    return false;
                                }
                                break;
                            case MONEY:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getSplitPrice()
                                        .compareTo(freeObj.getConditionTwo()) >= 0) {//金额高于-包邮
                                    return false;
                                }
                                break;
                            case VALUATIONANDMONEY:
                                if (BigDecimal.valueOf(templateGoodsMap.get(temp.getFreightTempId()).getNum())
                                        .compareTo(freeObj.getConditionOne()) >= 0 &&
                                        templateGoodsMap.get(temp.getFreightTempId()).getSplitPrice()
                                                .compareTo(freeObj.getConditionTwo()) >= 0) {//件数高于,金额高于-包邮
                                    return false;
                                }
                                break;
                            default:
                                break;
                        }
                        break;
                    case WEIGHT: //按重量
                        switch (conditionType) {
                            case VALUATION:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getGoodsWeight()
                                        .compareTo(freeObj.getConditionOne()) <= 0) {//重量低于-包邮
                                    return false;
                                }
                                break;
                            case MONEY:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getSplitPrice()
                                        .compareTo(freeObj.getConditionTwo()) >= 0) {//金额高于-包邮
                                    return false;
                                }
                                break;
                            case VALUATIONANDMONEY:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getGoodsWeight()
                                        .compareTo(freeObj.getConditionOne()) <= 0 &&
                                        templateGoodsMap.get(temp.getFreightTempId()).getSplitPrice()
                                                .compareTo(freeObj.getConditionTwo()) >= 0) {//重量低于,金额高于-包邮
                                    return false;
                                }
                                break;
                            default:
                                break;
                        }
                        break;
                    case VOLUME: //按体积
                        switch (conditionType) {
                            case VALUATION:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getGoodsCubage()
                                        .compareTo(freeObj.getConditionOne()) <= 0) {//体积低于-包邮
                                    return false;
                                }
                                break;
                            case MONEY:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getSplitPrice()
                                        .compareTo(freeObj.getConditionTwo()) >= 0) {//金额高于-包邮
                                    return false;
                                }
                                break;
                            case VALUATIONANDMONEY:
                                if (templateGoodsMap.get(temp.getFreightTempId()).getGoodsCubage()
                                        .compareTo(freeObj.getConditionOne()) <= 0 &&
                                        templateGoodsMap.get(temp.getFreightTempId()).getSplitPrice()
                                                .compareTo(freeObj.getConditionTwo()) >= 0) {//体积低于,金额高于-包邮
                                    return false;
                                }
                                break;
                            default:
                                break;
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        return true;
    }

    /**
     * 计算某个单品模板的运费
     *
     * @param temp             单品运费模板
     * @param freightTempId    需要计算首件运费的配送地模板id
     * @param templateGoodsMap 按模板id分组的商品汇总信息
     * @return 模板的总运费
     */
    private BigDecimal getSingleTemplateFreight(FreightTemplateGoodsVO temp, Long freightTempId, Map<Long, TradeItem>
            templateGoodsMap) {
        //是否需要计算首件运费标识
        boolean startFlag = temp.getFreightTempId().equals(freightTempId);
        log.info("计算费用falg" + startFlag);
        TradeItem traItem = templateGoodsMap.get(temp.getFreightTempId());
        return getSingleTemplateFreight(temp, startFlag, traItem);
    }

    private BigDecimal getSingleTemplateFreight(FreightTemplateGoodsVO temp, boolean startFlag, TradeItem traItem) {
        BigDecimal num = BigDecimal.valueOf(traItem.getNum());//商品数量
        BigDecimal goodsWeight = traItem.getGoodsWeight();//商品重量
        BigDecimal goodsCubage = traItem.getGoodsCubage();//商品体积
        //判断是白鲸散批还是拆箱批发
//        List<String> goodslist = new LinkedList<>();
//        goodslist.add(traItem.getSpuId());
//        List<DevanningGoodsInfoVO> devanningGoodsInfoVOS = devanningGoodsInfoProvider.getmaxdata(DevanningGoodsInfoPageRequest.builder().goodsIds(goodslist).build()).getContext().getDevanningGoodsInfoVOS();
//        if (!CollectionUtils.isEmpty(devanningGoodsInfoVOS)){
//            //拆箱批发
//            Optional<DevanningGoodsInfoVO> deoptional = devanningGoodsInfoVOS.stream().filter(devanningGoodsInfoVO -> {
//                if (1 == devanningGoodsInfoVO.getAddedFlag() && DeleteFlag.NO.equals(devanningGoodsInfoVO.getDelFlag())) {
//                    return true;
//                }
//                return false;
//            }).findFirst();
//            if (deoptional.isPresent()){
//                throw new SbcRuntimeException("K-050510","商品已经删除或者已经下架请联系客户处理");
//            }
//            DevanningGoodsInfoVO devanningGoodsInfoVO=deoptional.get();
//            num=num.divide(devanningGoodsInfoVO.getAddStep(),0,BigDecimal.ROUND_DOWN);
//            num=num.compareTo(BigDecimal.ZERO)==0?BigDecimal.ONE:num;
//            goodsWeight=goodsWeight.divide(devanningGoodsInfoVO.getAddStep(),3,BigDecimal.ROUND_DOWN);
//            goodsCubage=goodsCubage.divide(devanningGoodsInfoVO.getAddStep(),6,BigDecimal.ROUND_DOWN);
//        }
        FreightTemplateGoodsExpressVO expTemplate = temp.getExpTemplate();
        switch (temp.getValuationType()) {
            case NUMBER: //按件数
                return startFlag ? getStartAndPlusFreight(num, expTemplate)
                        : getPlusFreight(num, expTemplate);
            case WEIGHT: //按重量
                return startFlag ? getStartAndPlusFreight(goodsWeight, expTemplate)
                        : getPlusFreight(goodsWeight, expTemplate);
            case VOLUME: //按体积
                return startFlag ? getStartAndPlusFreight(goodsCubage, expTemplate)
                        : getPlusFreight(goodsCubage, expTemplate);
            case WEIGHTBYNUM://按重量/件
                return startFlag ? getWeightByNumStartAndPlusFreight(goodsWeight,
                        num, expTemplate)
                        : getWeightByNumPlusFreight(goodsWeight, num, expTemplate);
            default:
                return BigDecimal.ZERO;
        }
    }

    /**
     * 功能描述:
     *
     * @param itemCount   总重量
     * @param num         购买件数
     * @param expTemplate
     * @return: java.math.BigDecimal 运费金额
     */
    private BigDecimal getWeightByNumStartAndPlusFreight(BigDecimal itemCount, BigDecimal num,
                                                         FreightTemplateGoodsExpressVO expTemplate) {
        if (itemCount.divide(num, 3, BigDecimal.ROUND_UP).compareTo(expTemplate.getFreightStartNum()) <= 0) {//单件的重量小于首重
            //首重*数量*首重价格
            return expTemplate.getFreightStartPrice().multiply(num);
        } else {
            //（首重价格+((总重/件数)-首重)/续重*续重价格）*件数
            log.info("==========================z" + itemCount);
            log.info("==========================z" + num);
            BigDecimal multiply = expTemplate.getFreightStartPrice().add(itemCount.divide(num, 10, BigDecimal.ROUND_UP).subtract(expTemplate.getFreightStartNum())
                    .divide(expTemplate.getFreightPlusNum(), 0, BigDecimal.ROUND_UP)
                    .multiply(expTemplate.getFreightPlusPrice()))
                    .multiply(num);
            return multiply;
        }
    }

    /**
     * 功能描述:
     * 计算：总重/件数/续重*续重价格*件数
     *
     * @param itemCount   总重
     * @param num         购买件数
     * @param expTemplate
     * @return: java.math.BigDecimal
     */
    private BigDecimal getWeightByNumPlusFreight(BigDecimal itemCount, BigDecimal num,
                                                 FreightTemplateGoodsExpressVO expTemplate) {
        return itemCount.divide(num, 10, BigDecimal.ROUND_UP)
                .divide(expTemplate.getFreightPlusNum(), 0, BigDecimal.ROUND_UP)
                .multiply(expTemplate.getFreightPlusPrice())
                .multiply(num);
    }


    /**
     * 计算 首件 + 续件 总费用
     *
     * @param itemCount
     * @param expTemplate
     * @return
     */
    private BigDecimal getStartAndPlusFreight(BigDecimal itemCount, FreightTemplateGoodsExpressVO expTemplate) {
        if (itemCount.compareTo(expTemplate.getFreightStartNum()) <= 0) {
            return expTemplate.getFreightStartPrice();//首件数以内,则只算首运费
        } else {
            //总费用 = 首件费用 + 续件总费用
            return expTemplate.getFreightStartPrice().add(
                    getPlusFreight(itemCount.subtract(expTemplate.getFreightStartNum()), expTemplate)
            );
        }
    }

    /**
     * 计算续件总费用
     *
     * @param itemCount   商品数量
     * @param expTemplate 匹配的运费模板
     * @return 续件总费用
     */
    private BigDecimal getPlusFreight(BigDecimal itemCount, FreightTemplateGoodsExpressVO expTemplate) {
        //商品数量/续件数量 * 续件金额
        return itemCount.divide(expTemplate.getFreightPlusNum(), 0, BigDecimal.ROUND_UP)
                .multiply(expTemplate.getFreightPlusPrice());
    }

    /**
     * 获取匹配的单品运费模板-用于计算运费
     *
     * @param temps  多个收货的运费模板
     * @param provId 省份id
     * @param cityId 地市id
     * @return 匹配上的运费模板
     */
    private FreightTemplateGoodsExpressVO getMatchFreightTemplate(List<FreightTemplateGoodsExpressVO> temps,
                                                                  Long provId,
                                                                  Long cityId) {
        Optional<FreightTemplateGoodsExpressVO> expOpt = temps.stream().filter(exp ->
                matchArea(exp.getDestinationArea(), provId, cityId)).findFirst();
        FreightTemplateGoodsExpressVO expTemp;
        if (expOpt.isPresent()) {
            expTemp = expOpt.get();
        } else {
            expTemp = temps.stream().filter(exp ->
                    DefaultFlag.YES.equals(exp.getDefaultFlag())).findFirst().get();
        }
        return expTemp;
    }

    /**
     * 匹配配送地区
     *
     * @param areaStr 存储的逗号相隔的areaId(provId,cityId都有可能)
     * @param provId  收货省份id
     * @param cityId  收货城市id
     * @return 是否匹配上
     */
    private boolean matchArea(String areaStr, Long provId, Long cityId) {
        String[] arr = areaStr.split(",");
        return Arrays.stream(arr).anyMatch(area -> area.equals(String.valueOf(provId)))
                || Arrays.stream(arr).anyMatch(area -> area.equals(String.valueOf(cityId)));
    }

    /**
     * 按模板id分组的商品汇总信息(模板Id,件数,重量,体积,小计均摊价)
     *
     * @param templateGoodsMap
     * @param items
     */
    public static void setGoodsSumMap(Map<Long, TradeItem> templateGoodsMap, List<TradeItem> items) {
        if (items != null) {
            items.stream().forEach(goods -> {
                TradeItem item = templateGoodsMap.get(goods.getFreightTempId());
                if (item == null) {
                    if (Objects.nonNull(goods.getDevanningId())) {
                        BigDecimal num = BigDecimal.valueOf(goods.getNum());//原数量
                        BigDecimal buyNum = BigDecimal.valueOf(goods.getNum()).multiply(goods.getDivisorFlag());
                        buyNum = buyNum.compareTo(BigDecimal.ONE) == -1 ? BigDecimal.ONE : buyNum;
                        templateGoodsMap.put(goods.getFreightTempId(), TradeItem.builder()
                                .freightTempId(goods.getFreightTempId())
                                .num(buyNum.setScale(0, BigDecimal.ROUND_UP).longValue())
                                .goodsWeight(goods.getGoodsWeight().multiply(buyNum.setScale(0, BigDecimal.ROUND_UP)))
                                .goodsCubage(goods.getGoodsCubage().multiply(buyNum))
                                .splitPrice(goods.getSplitPrice() == null ? BigDecimal.ZERO : goods.getSplitPrice())
                                .build());
                    } else {
                        templateGoodsMap.put(goods.getFreightTempId(), TradeItem.builder()
                                .freightTempId(goods.getFreightTempId())
                                .num(goods.getNum())
                                .goodsWeight(goods.getGoodsWeight().multiply(BigDecimal.valueOf(goods.getNum())))
                                .goodsCubage(goods.getGoodsCubage().multiply(BigDecimal.valueOf(goods.getNum())))
                                .splitPrice(goods.getSplitPrice() == null ? BigDecimal.ZERO : goods.getSplitPrice())
                                .build());
                    }
                } else {
                    if (Objects.nonNull(goods.getDevanningId())) {
                        BigDecimal buyNum = BigDecimal.valueOf(goods.getNum()).multiply(goods.getDivisorFlag());
                        buyNum = buyNum.compareTo(BigDecimal.ONE) == -1 ? BigDecimal.ONE : buyNum;
                        item.setNum(item.getNum() + buyNum.setScale(0, BigDecimal.ROUND_UP).longValue());
                        item.setGoodsWeight(item.getGoodsWeight().add(goods.getGoodsWeight().multiply(buyNum)));
                        item.setGoodsCubage(item.getGoodsCubage().add(goods.getGoodsCubage().multiply(buyNum)));
                        item.setSplitPrice(item.getSplitPrice().add(goods.getSplitPrice() == null ? BigDecimal.ZERO :
                                goods.getSplitPrice()));
                    } else {
                        item.setNum(item.getNum() + goods.getNum());
                        item.setGoodsWeight(item.getGoodsWeight().add(goods.getGoodsWeight().multiply(BigDecimal.valueOf
                                (goods.getNum()))));
                        item.setGoodsCubage(item.getGoodsCubage().add(goods.getGoodsCubage().multiply(BigDecimal.valueOf
                                (goods.getNum()))));
                        item.setSplitPrice(item.getSplitPrice().add(goods.getSplitPrice() == null ? BigDecimal.ZERO :
                                goods.getSplitPrice()));
                    }
                }
            });
        }
    }



    /**
     * 按模板id分组的商品汇总信息(模板Id,件数,重量,体积,小计均摊价) 加上散批拆箱
     *
     * @param templateGoodsMap
     * @param items
     */
    public  void setGoodsSumMapContionBluk(Map<Long, TradeItem> templateGoodsMap, List<TradeItem> items,List<TradeItem> bulkGoodsList) {
        if (items != null) {
            // templateGoodsMap这个只存商品总数量总重量总体积总价格
            Map<Long, TradeItem> finalTemplateGoodsMap = templateGoodsMap;
            items.stream().forEach(goods -> {
                TradeItem item = finalTemplateGoodsMap.get(goods.getFreightTempId());
                if (item == null) {
                    if (Objects.nonNull(goods.getDevanningId())) {
                        BigDecimal num = BigDecimal.valueOf(goods.getNum());//原数量
                        BigDecimal buyNum = BigDecimal.valueOf(goods.getNum()).multiply(goods.getDivisorFlag());
                        buyNum = buyNum.compareTo(BigDecimal.ONE) == -1 ? BigDecimal.ONE : buyNum;
                        finalTemplateGoodsMap.put(goods.getFreightTempId(), TradeItem.builder()
                                .freightTempId(goods.getFreightTempId())
                                .num(buyNum.setScale(0, BigDecimal.ROUND_UP).longValue())
                                .goodsWeight(goods.getGoodsWeight().multiply(buyNum.setScale(0, BigDecimal.ROUND_UP)))
                                .goodsCubage(goods.getGoodsCubage().multiply(buyNum))
                                .splitPrice(goods.getSplitPrice() == null ? BigDecimal.ZERO : goods.getSplitPrice())
                                .build());
                    } else {
                        finalTemplateGoodsMap.put(goods.getFreightTempId(), TradeItem.builder()
                                .freightTempId(goods.getFreightTempId())
                                .num(goods.getNum())
                                .goodsWeight(goods.getGoodsWeight().multiply(BigDecimal.valueOf(goods.getNum())))
                                .goodsCubage(goods.getGoodsCubage().multiply(BigDecimal.valueOf(goods.getNum())))
                                .splitPrice(goods.getSplitPrice() == null ? BigDecimal.ZERO : goods.getSplitPrice())
                                .build());
                    }
                } else {
                    if (Objects.nonNull(goods.getDevanningId())) {
                        BigDecimal buyNum = BigDecimal.valueOf(goods.getNum()).multiply(goods.getDivisorFlag());
                        buyNum = buyNum.compareTo(BigDecimal.ONE) == -1 ? BigDecimal.ONE : buyNum;
                        item.setNum(item.getNum() + buyNum.setScale(0, BigDecimal.ROUND_UP).longValue());
                        item.setGoodsWeight(item.getGoodsWeight().add(goods.getGoodsWeight().multiply(buyNum)));
                        item.setGoodsCubage(item.getGoodsCubage().add(goods.getGoodsCubage().multiply(buyNum)));
                        item.setSplitPrice(item.getSplitPrice().add(goods.getSplitPrice() == null ? BigDecimal.ZERO :
                                goods.getSplitPrice()));
                    } else {
                        item.setNum(item.getNum() + goods.getNum());
                        item.setGoodsWeight(item.getGoodsWeight().add(goods.getGoodsWeight().multiply(BigDecimal.valueOf
                                (goods.getNum()))));
                        item.setGoodsCubage(item.getGoodsCubage().add(goods.getGoodsCubage().multiply(BigDecimal.valueOf
                                (goods.getNum()))));
                        item.setSplitPrice(item.getSplitPrice().add(goods.getSplitPrice() == null ? BigDecimal.ZERO :
                                goods.getSplitPrice()));
                    }
                }
            });
            templateGoodsMap = finalTemplateGoodsMap;
        }
        // 如果是拆箱的和总体重和总体积和总价格都是正常算只有总数量需要做除法
        Map<Long, TradeItem> templateBulkGoodsMap = new HashMap<>();
        if (CollectionUtils.isNotEmpty(bulkGoodsList)){
            Map<Long, List<TradeItem>> collect = bulkGoodsList.stream().collect(Collectors.groupingBy(TradeItem::getFreightTempId));
            GatherBoxSetInfoResponse context1 = gatherBoxSetProvider.getGatherBoxSetInfo().getContext();
            for(Map.Entry<Long, List<TradeItem>> a : collect.entrySet()){
                Long aLong = a.getValue().stream().map(TradeItem::getNum).reduce(Long::sum).orElse(0L);
                if (Objects.isNull(context1)){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "未查询到散批合并整个拆箱规格");
                }
                if (Objects.isNull(context1.getSkuNum()) || context1.getSkuNum()==0){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, " 散批合并整个拆箱规格异常或者为null");
                }
                //总数量
                aLong = BigDecimal.valueOf(aLong).divide(BigDecimal.valueOf(context1.getSkuNum()),0,BigDecimal.ROUND_UP).longValue()  ;
                //总重量
                BigDecimal bigDecimal =a.getValue().stream().map(goods -> {
                    return goods.getGoodsWeight().multiply(BigDecimal.valueOf(goods.getNum()));
                }).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
                //总体机
                BigDecimal bigDecimal1 = a.getValue().stream().map(goods -> {
                    return goods.getGoodsCubage().multiply(BigDecimal.valueOf(goods.getNum()));
                }).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
                //总金额
                BigDecimal bigDecimal2 = a.getValue().stream().map(goods -> {
                    return goods.getSplitPrice() == null ? BigDecimal.ZERO : goods.getSplitPrice();
                }).reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
                templateBulkGoodsMap.put(a.getKey(),TradeItem.builder()
                        .freightTempId(a.getKey())
                        .goodsWeight(bigDecimal)
                        .goodsCubage(bigDecimal1)
                        .splitPrice(bigDecimal2)
                        .num(aLong)
                        .build());
            }
        }

        //2个map合并
        if (templateBulkGoodsMap != null){
            for (Map.Entry<Long, TradeItem> a : templateBulkGoodsMap.entrySet()){
                if (templateGoodsMap !=null){
                    TradeItem tradeItem = templateGoodsMap.get(a.getKey());
                    if (Objects.isNull(tradeItem)){
                        templateGoodsMap.put(a.getKey(), a.getValue());
                    }else {
                        tradeItem.setNum(tradeItem.getNum()+a.getValue().getNum());
                        tradeItem.setGoodsWeight(tradeItem.getGoodsWeight().add(a.getValue().getGoodsWeight()));
                        tradeItem.setGoodsCubage(tradeItem.getGoodsCubage().add(a.getValue().getGoodsCubage()));
                        tradeItem.setSplitPrice(tradeItem.getSplitPrice().add(a.getValue().getSplitPrice()));
                    }
                }else {
                    templateGoodsMap = templateBulkGoodsMap;
                }
            }
        }
    }

    /**
     * 获取订单商品详情,不包含区间价，会员级别价信息
     */
    public TradeGetGoodsResponse getGoodsResponse(List<String> skuIds, Long wareId, String wareHouseCode) {
        if (CollectionUtils.isEmpty(skuIds)) {
            return new TradeGetGoodsResponse();
        }
        GoodsInfoViewByIdsRequest goodsInfoRequest = GoodsInfoViewByIdsRequest.builder()
                .goodsInfoIds(skuIds)
                .isHavSpecText(Constants.yes)
                .wareId(wareId)
                .wareHouseCode(wareHouseCode)
                .build();
        GoodsInfoViewByIdsResponse response = goodsInfoQueryProvider.listViewByIds(goodsInfoRequest).getContext();
        TradeGetGoodsResponse goodsResponse = new TradeGetGoodsResponse();
        goodsResponse.setGoodses(response.getGoodses());
        goodsResponse.setGoodsInfos(response.getGoodsInfos());
        return goodsResponse;
    }

    /**
     * 获取订单商品详情,不包含区间价，会员级别价信息
     */
    public TradeGetGoodsResponse getGoodsResponseMatchFlag(List<String> skuIds, Long wareId, String wareHouseCode, Boolean matchWareHouseFlag) {
        if (CollectionUtils.isEmpty(skuIds)) {
            return new TradeGetGoodsResponse();
        }
        GoodsInfoViewByIdsRequest goodsInfoRequest = GoodsInfoViewByIdsRequest.builder()
                .goodsInfoIds(skuIds)
                .isHavSpecText(Constants.yes)
                .wareId(wareId)
                .wareHouseCode(wareHouseCode)
                .matchWareHouseFlag(matchWareHouseFlag)
                .build();
        GoodsInfoViewByIdsResponse response = goodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        TradeGetGoodsResponse goodsResponse = new TradeGetGoodsResponse();
        goodsResponse.setGoodses(response.getGoodses());
        goodsResponse.setGoodsInfos(response.getGoodsInfos());
        return goodsResponse;
    }

    /**
     * 获取拆箱订单商品详情,不包含区间价，会员级别价信息
     */
    public TradeGetGoodsResponse getDevanningGoodsResponseMatchFlag(List<Long> devanningIds, Long wareId, String wareHouseCode, Boolean matchWareHouseFlag) {
        if (CollectionUtils.isEmpty(devanningIds)) {
            return new TradeGetGoodsResponse();
        }
        GoodsInfoViewByIdsRequest goodsInfoRequest = GoodsInfoViewByIdsRequest.builder()
                .devanningIds(devanningIds)
                .isHavSpecText(Constants.yes)
                .wareId(wareId)
                .wareHouseCode(wareHouseCode)
                .matchWareHouseFlag(matchWareHouseFlag)
                .build();
        DevanningGoodsInfoListResponse context = devanningGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();

        TradeGetGoodsResponse goodsResponse = new TradeGetGoodsResponse();
        goodsResponse.setGoodses(context.getGoodses());
        goodsResponse.setGoodsInfos(KsBeanUtil.convertList(context.getDevanningGoodsInfoVOS(), GoodsInfoVO.class));
        return goodsResponse;
    }



    /**
     * 获取散批订单商品详情,不包含区间价，会员级别价信息
     */
    public TradeGetGoodsResponse getBulkGoodsResponseMatchFlag(List<String> skuIds, Long wareId, String wareHouseCode, Boolean matchWareHouseFlag) {
        if (CollectionUtils.isEmpty(skuIds)) {
            return new TradeGetGoodsResponse();
        }
        GoodsInfoViewByIdsRequest goodsInfoRequest = GoodsInfoViewByIdsRequest.builder()
                .goodsInfoIds(skuIds)
                .isHavSpecText(Constants.yes)
                .wareId(wareId)
                .wareHouseCode(wareHouseCode)
                .matchWareHouseFlag(matchWareHouseFlag)
                .build();
        GoodsInfoViewByIdsResponse response = bulkGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();

        TradeGetGoodsResponse goodsResponse = new TradeGetGoodsResponse();
        goodsResponse.setGoodses(response.getGoodses());
        goodsResponse.setGoodsInfos(response.getGoodsInfos());
        return goodsResponse;
    }




    /**
     * 获取订单商品详情,不包含区间价，会员级别价信息
     */
    public TradeGetGoodsResponse getRetailGoodsResponseMatchFlag(List<String> skuIds, Long wareId, String wareHouseCode, Boolean matchWareHouseFlag) {
        if (CollectionUtils.isEmpty(skuIds)) {
            return new TradeGetGoodsResponse();
        }
        GoodsInfoViewByIdsRequest goodsInfoRequest = GoodsInfoViewByIdsRequest.builder()
                .goodsInfoIds(skuIds)
                .isHavSpecText(Constants.yes)
                .wareId(wareId)
                .wareHouseCode(wareHouseCode)
                .matchWareHouseFlag(matchWareHouseFlag)
                .build();
        GoodsInfoViewByIdsResponse response = retailGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        TradeGetGoodsResponse goodsResponse = new TradeGetGoodsResponse();
        goodsResponse.setGoodses(response.getGoodses());
        goodsResponse.setGoodsInfos(response.getGoodsInfos());
        return goodsResponse;
    }

    /**
     * 发货校验,检查请求发货商品数量是否符合应发货数量
     *
     * @param tid                 订单id
     * @param tradeDeliverRequest 发货请求参数结构
     */
    public void deliveryCheck(String tid, TradeDeliverRequest tradeDeliverRequest) {
        Trade trade = detail(tid);
        Map<String, TradeItem> skusMap = trade.getTradeItems().stream().collect(Collectors.toMap(TradeItem::getSkuId,
                Function.identity()));
        Map<String, TradeItem> giftsMap = trade.getGifts().stream().collect(Collectors.toMap(TradeItem::getSkuId,
                Function.identity()));
        tradeDeliverRequest.getShippingItemList().forEach(i -> {
            TradeItem tradeItem = skusMap.get(i.getSkuId());
            if (tradeItem.getDeliveredNum() + i.getItemNum() > tradeItem.getNum()) {
                throw new SbcRuntimeException("K-050315");
            }
        });
        tradeDeliverRequest.getGiftItemList().forEach(i -> {
            TradeItem tradeItem = giftsMap.get(i.getSkuId());
            if (tradeItem.getDeliveredNum() + i.getItemNum() > tradeItem.getNum()) {
                throw new SbcRuntimeException("K-050315");
            }
        });
    }

    /**
     * 根据用户提交的收货地址信息封装对象
     *
     * @param consigneeId         选择的收货地址id
     * @param detailAddress       详细地址(包括省市区)
     * @param consigneeUpdateTime 地址更新时间 - 可能已经用不到了
     * @param consigneeTmp        用户提交的临时收货地址
     * @return 封装后的收货地址对象
     */
    private Consignee wrapperConsignee(String consigneeId, String detailAddress, String consigneeUpdateTime,
                                       Consignee consigneeTmp) {
        if (StringUtils.isNotBlank(consigneeId)) {
            // 根据id查询收货人信息
            BaseResponse<CustomerDeliveryAddressByIdResponse> customerDeliveryAddressByIdResponseBaseResponse =
                    tradeCacheService.getCustomerDeliveryAddressById(consigneeId);
            CustomerDeliveryAddressByIdResponse customerDeliveryAddressByIdResponse =
                    customerDeliveryAddressByIdResponseBaseResponse.getContext();
            if (customerDeliveryAddressByIdResponse == null || customerDeliveryAddressByIdResponse.getDelFlag() == DeleteFlag.YES) {
                throw new SbcRuntimeException("K-050313");
            }
            return getBuildConsignee(consigneeId, detailAddress, customerDeliveryAddressByIdResponse);
        } else {
            //若id为空,则赋值页面传入的临时地址(代客下单特殊-可以传临时地址)
            return Consignee
                    .builder()
                    .detailAddress(detailAddress)
                    .phone(consigneeTmp.getPhone())
                    .provinceId(consigneeTmp.getProvinceId())
                    .cityId(consigneeTmp.getCityId())
                    .areaId(consigneeTmp.getAreaId())
                    .address(consigneeTmp.getAddress())
                    .name(consigneeTmp.getName())
                    .twonId(consigneeTmp.getTwonId())
                    .twonName(consigneeTmp.getTwonName())
                    .build();
        }
    }

    private static Consignee getBuildConsignee(String consigneeId, String detailAddress, CustomerDeliveryAddressByIdResponse customerDeliveryAddressByIdResponse) {
        return Consignee
                .builder()
                .id(consigneeId)
                .detailAddress(detailAddress)
                .phone(customerDeliveryAddressByIdResponse.getConsigneeNumber())
                .provinceId(customerDeliveryAddressByIdResponse.getProvinceId())
                .cityId(customerDeliveryAddressByIdResponse.getCityId())
                .areaId(customerDeliveryAddressByIdResponse.getAreaId())
                .address(customerDeliveryAddressByIdResponse.getDeliveryAddress())
                .name(customerDeliveryAddressByIdResponse.getConsigneeName())
                .twonId(customerDeliveryAddressByIdResponse.getTwonId())
                .twonName(customerDeliveryAddressByIdResponse.getTwonName())
                .build();
    }

    /**
     * 根据用户提交的发票信息封装对象
     * 主要是为了补充 联系人 与 联系地址
     *
     * @param invoice             发票信息(至少缺联系人与联系地址)
     * @param invoiceConsigneeTmp 订单发票临时收货地址
     * @param consignee           订单商品收货地址
     * @return 完整的发票信息
     */
    private Invoice wrapperTradeInvoice(Invoice invoice, Consignee invoiceConsigneeTmp, Consignee consignee) {
        if (invoice.getType() != -1) {
            // 1.若用户选择了某个发票收货地址,查询该地址的联系人与联系方式
            if (StringUtils.isNotBlank(invoice.getAddressId())) {
                BaseResponse<CustomerDeliveryAddressByIdResponse> customerDeliveryAddressByIdResponseBaseResponse =
                        tradeCacheService.getCustomerDeliveryAddressById(invoice.getAddressId());
                CustomerDeliveryAddressByIdResponse customerDeliveryAddressByIdResponse =
                        customerDeliveryAddressByIdResponseBaseResponse.getContext();
                invoice.setPhone(customerDeliveryAddressByIdResponse.getConsigneeNumber());
                invoice.setContacts(customerDeliveryAddressByIdResponse.getConsigneeName());
                invoice.setProvinceId(customerDeliveryAddressByIdResponse.getProvinceId());
                invoice.setCityId(customerDeliveryAddressByIdResponse.getCityId());
                invoice.setAreaId(customerDeliveryAddressByIdResponse.getAreaId());
            }
            // 2.若用户没有选择发货地址，使用临时地址(代客下单特殊-可以传发票临时收货地址)
            else {
                // 2.1.临时地址为null，就用收货地址
                if (Objects.isNull(invoiceConsigneeTmp) || Objects.isNull(invoiceConsigneeTmp.getProvinceId())) {
                    invoice.setPhone(consignee.getPhone());
                    invoice.setContacts(consignee.getName());
                    invoice.setProvinceId(consignee.getProvinceId());
                    invoice.setCityId(consignee.getCityId());
                    invoice.setAreaId(consignee.getAreaId());
                    invoice.setAddress(consignee.getAddress());//依赖了前面步骤中封装的收货地址信息
                }
                // 2.2.使用填写的临时地址
                else {
                    invoice.setPhone(invoiceConsigneeTmp.getPhone());
                    invoice.setContacts(invoiceConsigneeTmp.getName());
                    invoice.setProvinceId(invoiceConsigneeTmp.getProvinceId());
                    invoice.setCityId(invoiceConsigneeTmp.getCityId());
                    invoice.setAreaId(invoiceConsigneeTmp.getAreaId());
                    invoice.setAddress(invoiceConsigneeTmp.getAddress());
                }
            }

            // 3.校验与填充增票信息
            if (invoice.getType() == 1) {
                SpecialInvoice spInvoice = invoice.getSpecialInvoice();
                CustomerInvoiceByIdAndDelFlagRequest customerInvoiceByCustomerIdRequest =
                        new CustomerInvoiceByIdAndDelFlagRequest();
                customerInvoiceByCustomerIdRequest.setCustomerInvoiceId(spInvoice.getId());
                BaseResponse<CustomerInvoiceByIdAndDelFlagResponse> customerInvoiceByIdAndDelFlagResponseBaseResponse = tradeCacheService.getCustomerInvoiceByIdAndDelFlag(spInvoice.getId());
                CustomerInvoiceByIdAndDelFlagResponse customerInvoiceByIdAndDelFlagResponse =
                        customerInvoiceByIdAndDelFlagResponseBaseResponse.getContext();
                if (Objects.nonNull(customerInvoiceByIdAndDelFlagResponse)) {
                    if (customerInvoiceByIdAndDelFlagResponse.getCheckState() != CheckState.CHECKED) {
                        throw new SbcRuntimeException("K-010013");
                    }
                    spInvoice.setAccount(customerInvoiceByIdAndDelFlagResponse.getBankNo());
                    spInvoice.setIdentification(customerInvoiceByIdAndDelFlagResponse.getTaxpayerNumber());
                    spInvoice.setAddress(customerInvoiceByIdAndDelFlagResponse.getCompanyAddress());
                    spInvoice.setBank(customerInvoiceByIdAndDelFlagResponse.getBankName());
                    spInvoice.setCompanyName(customerInvoiceByIdAndDelFlagResponse.getCompanyName());
                    spInvoice.setPhoneNo(customerInvoiceByIdAndDelFlagResponse.getCompanyPhone());
                }
            }
        }
        return invoice;
    }

    private void TakeGoods(Trade trade) {
        String customerId = trade.getBuyer().getId();
        List<TradeItem> tradeItems = trade.getTradeItems();
        tradeItems.stream().forEach(tradeItem -> {
            String spuId = tradeItem.getSpuId();
            String skuId = tradeItem.getSkuId();
            //购买数量
            Long num = tradeItem.getNum();
            //通过spuId+skuId+用户id查询囤货表的数据看看是不是有多个，有多个就根据时间减他妈的
            List<PilePurchase> pilePurchases = pilePurchaseRepository.queryPilePurchase(customerId, spuId, skuId);
            if (CollectionUtils.isNotEmpty(pilePurchases)) {
                long sum = pilePurchases.stream().mapToLong(PilePurchase::getGoodsNum).sum();
                if (num > sum) {
                    throw new SbcRuntimeException("K-030301");
                }
                //第一笔
                PilePurchase pilePurchase = pilePurchases.stream().findFirst().get();
                if (num > pilePurchase.getGoodsNum()) {
                    throw new SbcRuntimeException("K-030301");
                }
                pilePurchase.setGoodsNum(pilePurchase.getGoodsNum() - num);
                pilePurchaseRepository.save(pilePurchase);
            }
        });
    }

    private void checkGoodsStockForValid(List<TradeItem> tradeItems) {
        List<String> skuIds = tradeItems.stream().map(TradeItem::getSkuId).collect(Collectors.toList());
        Map<String, BigDecimal> goodsInfoMap = goodsInfoQueryProvider.listGoodsInfoAndStcokByIds(
                GoodsInfoAndStockListByIdsRequest.builder().goodsInfoIds(skuIds).matchWareHouseFlag(true).build()
        ).getContext().getGoodsInfos().stream().collect(Collectors.toMap(GoodsInfoVO::getGoodsInfoId, g -> g.getStock()));
        log.info("库存信息" + goodsInfoMap);
        log.info("商品信息" + tradeItems);
        tradeItems.forEach(v -> {
            BigDecimal stock = goodsInfoMap.getOrDefault(v.getSkuId(), BigDecimal.ZERO);
            if (BigDecimal.valueOf(v.getNum()).compareTo(stock) > 0) {
                throw new SbcRuntimeException("K-030301", "系统库存校验失败请重新到购物车页面选择数量");
            }
        });
    }

    public synchronized void stockupdate(Trade trade, Boolean flag) {
        List<TradeItem> tradeItems = trade.getTradeItems();
//        this.checkGoodsStockForValid(tradeItems);
        //如果是乡镇件并且是不是实时推那么不扣库存
//        if (flag && !isActualpush()){
//            trade.setVillageFlag(true);
//            // 乡镇件 库存表+库存
//            verifyService.addSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
//            verifyService.addSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
//            //减营销活动限购数量
//            this.calMarketGoodsNum(trade.getTradeItems(),false);
//        }else {
//            //判断是否为秒杀抢购订单--进行扣减秒杀商品库存和增加销量操作
//            if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
//                //扣减秒杀商品库存和增加销量
//                verifyService.batchFlashSaleGoodsStockAndSalesVolume(trade.getTradeItems());
//            } else {
//                // 2.减商品,赠品库存
//                verifyService.subSkuListStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(),trade.getSaleType());
//                verifyService.subSkuListStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(),trade.getSaleType());
//                //提交订单成功减囤货数量
//                if(trade.getActivityType().equals(TradeActivityTypeEnum.STOCKUP.toActivityType())){
//                    this.TakeGoods(trade);
//                }
//                //减营销活动限购数量
//                this.calMarketGoodsNum(trade.getTradeItems(),false);
//            }
//        }


        if (!flag) {
            //判断是否为秒杀抢购订单--进行扣减秒杀商品库存和增加销量操作
            if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
                //扣减秒杀商品库存和增加销量
                verifyService.batchFlashSaleGoodsStockAndSalesVolume(trade.getTradeItems());
            } else {
                // 2.减商品,赠品库存
                verifyService.subSkuListStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(),trade);
                verifyService.subSkuListStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(),trade);
                //提交订单成功减囤货数量
                if (trade.getActivityType().equals(TradeActivityTypeEnum.STOCKUP.toActivityType())) {
                    this.TakeGoods(trade);
                }
                //减营销活动限购数量
                this.calMarketGoodsNum(trade.getTradeItems(), false);
            }
        } else {
            trade.setVillageFlag(true);
            // 乡镇件 库存表+库存
            verifyService.addSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
            verifyService.addSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
            //减营销活动限购数量
            this.calMarketGoodsNum(trade.getTradeItems(), false);
        }
    }

    /**
     * 判断乡镇件是否是实时推送
     *
     * @return true 实时  FALSE 不实时
     */
    public boolean isActualpush() {
        return true;
    }

    /**
     * 创建订单-入库
     *
     * @param trade
     * @param operator
     */
    @Transactional
    public Trade create(Trade trade, Operator operator, Boolean flag, Boolean villageFlag) {
        StopWatch stopWatch = new StopWatch("createSingleTrade创建订单入库消耗时间明细");
        stopWatch.start("createSingleTrade校验店铺有效性");
        if (!orderkingdeeCheck(trade)) {
            throw new SbcRuntimeException("K-020010");
        }
        // 1.下单校验店铺有效性, 校验店铺支持的发票项
        verifyService.verifyStore(Collections.singletonList(trade.getSupplier().getStoreId()));
        if (operator.getPlatform() != Platform.SUPPLIER) {
            verifyService.verifyInvoice(trade.getInvoice(), trade.getSupplier());
        }
        stopWatch.stop();
        if (isPayByOfflineOrIsOPK(trade)) {
            stopWatch.start("createSingleTrade修改库存");
            this.stockupdate(trade, flag);
            stopWatch.stop();
        }
        //保存商品价格(分摊)
        stopWatch.start("createSingleTrade保存价格分摊");
        inventoryDetailSamountTradeProvider.saveGoodsShareMoney(
                InventoryDetailSamountTradeRequest.builder().tradeItemVOS(KsBeanUtil.convert(trade.getTradeItems(), TradeItemVO.class))
                        .oid(trade.getId()).build());
        stopWatch.stop();
        // 3.初始化订单提交状态
        stopWatch.start("createSingleTrade初始化状态");
        FlowState flowState;
        AuditState auditState;
        //是否开启订单审核（同时判断是否为秒杀抢购商品订单）
        Boolean orderAuditSwitch = tradeCacheService.isSupplierOrderAudit();

        //如果是秒杀抢购商品不需要审核
        if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
            flowState = FlowState.AUDIT;
            auditState = AuditState.CHECKED;
            orderAuditSwitch = Boolean.FALSE;
        }
        // 如果是拼团订单商品不需要审
        else if (Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag()) {
            flowState = FlowState.GROUPON;
            auditState = AuditState.CHECKED;
            orderAuditSwitch = Boolean.FALSE;
        } else {
            if (!orderAuditSwitch) {
                flowState = FlowState.AUDIT;
                auditState = AuditState.CHECKED;
            } else {
                //商家 boss 初始化状态是不需要审核的
                if (operator.getPlatform() == Platform.BOSS || operator.getPlatform() == Platform.SUPPLIER) {
                    flowState = FlowState.AUDIT;
                    auditState = AuditState.CHECKED;
                } else {
                    flowState = FlowState.INIT;
                    auditState = AuditState.NON_CHECKED;
                }
            }
        }
        //如果是物流类型且没有物流信息直接进入待审核状态  只有自营商家才走这个逻辑
        if (isLogistics(trade.getDeliverWay())) {
            //由超级大白鲸代选需要审核 其他不需要
            if (Objects.isNull(trade.getLogisticsCompanyInfo()) || StringUtils.isEmpty(trade.getLogisticsCompanyInfo().getLogisticsCompanyName())) {
                flowState = FlowState.INIT;
                auditState = AuditState.NON_CHECKED;
                trade.setLogistics("02");
                logger.error("==订单=={}==物流公司信息未填写 ", trade.getId());
                // throw new SbcRuntimeException("K-020010");
            } else {
                trade.setLogistics("01");
            }
        }
        trade.setTradeState(TradeState
                .builder()
                .deliverStatus(DeliverStatus.NOT_YET_SHIPPED)
                .flowState(flowState)
                .payState(PayState.NOT_PAID)
                .createTime(LocalDateTime.now())
                .build());
        stopWatch.stop();
        //修改订单unit 基础单位
//        List<String> spuids = trade.getTradeItems().stream().map(TradeItem::getSpuId).collect(Collectors.toList());
//        Map<String,String> collect =new HashMap<>();
//        List<DevanningGoodsInfoVO> devanningGoodsInfoVOS = devanningGoodsInfoProvider.getmaxdata(DevanningGoodsInfoPageRequest.builder().goodsIds(spuids).build()).getContext()
//                .getDevanningGoodsInfoVOS();
//        if (CollectionUtils.isNotEmpty(devanningGoodsInfoVOS)){
//            collect = devanningGoodsInfoVOS.stream().collect(Collectors.toMap(DevanningGoodsInfoVO::getGoodsId, DevanningGoodsInfoVO::getDevanningUnit));
//        }
//        Map<String, String> finalCollect = collect;
//        trade.getTradeItems().stream().forEach(tradeItem -> {
//             if (!StringUtils.isEmpty(finalCollect.get(tradeItem.getSpuId()))){
//                 tradeItem.setUnit(finalCollect.get(tradeItem.getSpuId()));
//             }
//        });
        stopWatch.start("createSingleTrade创建支付单和订单开票");
        // 4.若订单审核关闭了,直接创建订单开票跟支付单
        createPayOrder(trade, operator, orderAuditSwitch);

        trade.getTradeState().setAuditState(auditState);
        trade.setIsAuditOpen(orderAuditSwitch);
        stopWatch.stop();

        // 查询订单支付顺序设置
        stopWatch.start("createSingleTrade查询订单支付顺序设置");
        TradeConfigGetByTypeRequest request = new TradeConfigGetByTypeRequest();
        request.setConfigType(ConfigType.ORDER_SETTING_PAYMENT_ORDER);
        Integer paymentOrder = tradeCacheService.getTradeConfigByType(ConfigType.ORDER_SETTING_PAYMENT_ORDER).getStatus();
        trade.setPaymentOrder(PaymentOrder.values()[paymentOrder]);
        // 先款后货且已审核订单（审核开关关闭）
        Boolean needTimeOut = Objects.equals(auditState, AuditState.CHECKED) &&
                trade.getPaymentOrder() == PaymentOrder.PAY_FIRST;

        if (needTimeOut) {
            // 先货后款情况下，查询订单是否开启订单失效时间设置
            request.setConfigType(ConfigType.ORDER_SETTING_TIMEOUT_CANCEL);
            ConfigVO timeoutCancelConfig = tradeCacheService.getTradeConfigByType(ConfigType.ORDER_SETTING_TIMEOUT_CANCEL);
            Integer timeoutSwitch = timeoutCancelConfig.getStatus();
            if (timeoutSwitch == 1) {
                // 查询设置中订单超时时间
                Integer min =
                        Integer.valueOf(JSON.parseObject(timeoutCancelConfig.getContext()).get("hour").toString());
                // 发送非拼团单取消订单延迟队列;
                if (Objects.nonNull(trade.getGrouponFlag()) && !trade.getGrouponFlag()) {
                    // 线下支付默认一个小时后取消
                    if (isPayByOfflineOrIsOPK(trade)) {
                        min = 60;
                    }
                    trade.setOrderTimeOut(LocalDateTime.now().plusMinutes(min));
                    orderProducerService.cancelOrder(trade.getId(), min * 60 * 1000L);
                }
            }
        }
        stopWatch.stop();
        stopWatch.start("createSingleTrade拼团订单--设置订单状态");
        // 拼团订单--设置订单状态
        if (Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag()) {
            // 发送拼团单取消订单延迟队列
            orderProducerService.cancelOrder(trade.getId(), 5 * 60 * 1000L);
        }
        trade.appendTradeEventLog(new TradeEventLog(operator, "创建订单", "创建订单", LocalDateTime.now()));
        trade.setWMSPushFlag(true);
        String verifyCode = "";
        stopWatch.stop();
        //先货后款
        boolean goodsFirst = Objects.equals(auditState, AuditState.CHECKED) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        if (goodsFirst) {
            stopWatch.start("createSingleTrade先货后款");
            //自提订单
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                //订单状态直接切换是待自提
                trade.getTradeState().setFlowState(FlowState.TOPICKUP);
                verifyCode = RandomStringUtils.randomNumeric(6);
                trade.getTradeWareHouse().setPickUpCode(verifyCode);
                pickUpRecordService.add(PickUpRecord.builder().storeId(trade.getSupplier().getStoreId())
                        .tradeId(trade.getId()).pickUpCode(verifyCode).pickUpFlag(DefaultFlag.NO)
                        .delFlag(DeleteFlag.NO).contactPhone(trade.getConsignee().getPhone()).createTime(LocalDateTime.now()).build());
            }
            stopWatch.stop();
        }
        stopWatch.start("createSingleTrade提货订单需要操作");
        //提货成功副表
        List<PileStockRecordAttachment> stockRecordAttachmentList = new ArrayList<>();
        if (trade.getActivityType().equals(TradeActivityTypeEnum.STOCKUP.toActivityType())) {
            createPileStockRecordAttachment(trade, stockRecordAttachmentList);
        }
        stopWatch.stop();
        stopWatch.start("createSingleTrade推送订单");
        logger.info("TradeService.create push wms Trade:{}", JSONObject.toJSONString(trade));
        // 6.推送订单
        // 6.推送订单(销售订单推wms)
        // TODO: 2020/5/18 仓库账号未有
        if (kingdeeOpenState) {
            log.info("TradeService.create Open the push wms kingdeeOpenState:{}", kingdeeOpenState);
            //是否有十件店配


            //设置赠品拆箱id
            if (CollectionUtils.isNotEmpty(trade.getGifts())) {
                trade.getGifts().forEach(g -> {
                    DevanningGoodsInfoVO devanningGoodsInfoVO = new DevanningGoodsInfoVO();
                    devanningGoodsInfoVO.setAddStep(g.getAddStep());
                    devanningGoodsInfoVO.setGoodsInfoId(g.getSkuId());
                    DevanningGoodsInfoByInfoIdAndStepResponse context = devanningGoodsInfoQueryProvider.getInfoByIdAndStep(DevanningGoodsInfoRequest.builder()
                            .devanningGoodsInfoVO(devanningGoodsInfoVO).build()).getContext();
                    if (Objects.nonNull(context) && Objects.nonNull(context.getDevanningGoodsInfoVO())) {
                        g.setDevanningId(context.getDevanningGoodsInfoVO().getDevanningId());
                        g.setDivisorFlag(context.getDevanningGoodsInfoVO().getDivisorFlag());
                    }
                });
            }

            if (flag && trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME)) {
                //加入缓存表中
                logger.info("TradeService.create cache orderId:{}", trade.getId());
                TradeCachePushKingdeeOrder cachePushKingdeeOrder = TradeCachePushKingdeeOrder.builder()
                        .orderCode(trade.getId())
                        .parentId(trade.getParentId())
                        .orderStatus(0)
                        .pushStatus(0)
                        .erroNum(0)
                        .createTime(LocalDateTime.now())
                        .updateTime(LocalDateTime.now())
                        .build();
                tradeCachePushKingdeeOrderRepository.save(cachePushKingdeeOrder);
                //加入历史乡镇件表
                String tid = trade.getId();
                Long wareId = trade.getWareId();
                List<HistoryTownShipOrder> list = trade.getTradeItems().stream().map(v -> HistoryTownShipOrder.builder()
                        .cateId(v.getCateId())
                        .brand(v.getBrand())
                        .cateName(v.getCateName())
                        .erpNo(v.getErpSkuNo())
                        .num(BigDecimal.valueOf(v.getNum()))
                        .devanningId(v.getDevanningId())
                        .divisorFlag(v.getDivisorFlag())
                        .skuId(v.getSkuId())
                        .skuName(v.getSkuName())
                        .spuId(v.getSpuId())
                        .spuName(v.getSpuName())
                        .storeId(String.valueOf(v.getStoreId()))
                        .supplierCode(v.getSupplierCode())
                        .skuNo(v.getSkuNo())
                        .erpNo(v.getErpSkuNo())
                        .tid(tid)
                        .wareId(wareId).build()).collect(Collectors.toList());

                List<HistoryTownShipOrder> list2 = trade.getGifts().stream().map(v -> HistoryTownShipOrder.builder()
                        .cateId(v.getCateId())
                        .brand(v.getBrand())
                        .cateName(v.getCateName())
                        .erpNo(v.getErpSkuNo())
                        .num(BigDecimal.valueOf(v.getNum()))
                        .devanningId(v.getDevanningId())
                        .divisorFlag(v.getDivisorFlag())
                        .skuId(v.getSkuId())
                        .skuName(v.getSkuName())
                        .spuId(v.getSpuId())
                        .spuName(v.getSpuName())
                        .storeId(String.valueOf(v.getStoreId()))
                        .supplierCode(v.getSupplierCode())
                        .skuNo(v.getSkuNo())
                        .erpNo(v.getErpSkuNo())
                        .giftFlag(1)
                        .tid(tid)
                        .wareId(wareId).build()).collect(Collectors.toList());
                list.addAll(list2);
                log.info("listAll" + list);
                historyTownShipOrderRepository.saveAll(list);
            } else {
                if (wmsAPIFlag && AuditState.CHECKED.equals(auditState)) {
                    //拼团在订单那提交的时候不推送，在成团时推送
                    if (Objects.isNull(trade.getGrouponFlag()) || !trade.getGrouponFlag()) {
                        try {
                            if (CollectionUtils.isNotEmpty(stockRecordAttachmentList)) {
                                Long stockNum = trade.getTradeItems().stream().mapToLong(TradeItem::getNum).sum();
                                Long deliveryNum = stockRecordAttachmentList.stream().mapToLong(PileStockRecordAttachment::getNum).sum();
                                if (!stockNum.equals(deliveryNum)) {
                                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "提货数量" + stockNum + "件，不等于发货数量" + deliveryNum + "件，请联系客服处理！");
                                }
                                Trade pushWmsTrade = KsBeanUtil.convert(trade, Trade.class);
                                //新订单商品items
                                List<TradeItem> newTradeItems = new ArrayList<>();
                                //需要删除的商品items
                                List<TradeItem> removeTradeItems = new ArrayList<>();
                                pushWmsTrade.getTradeItems().forEach(tradeItem -> {
                                    //过滤出此商品的提货明细记录
                                    List<PileStockRecordAttachment> filterList = stockRecordAttachmentList.stream().filter(s -> s.getSkuId().equals(tradeItem.getSkuId())).collect(Collectors.toList());
                                    //囤货明细记录大于1
                                    if (CollectionUtils.isNotEmpty(filterList) && filterList.size() > 1) {
                                        filterList.forEach(f -> {
                                            //新订单商品item
                                            TradeItem newTradeItem = KsBeanUtil.convert(tradeItem, TradeItem.class);
                                            newTradeItem.setPrice(f.getPrice());
                                            newTradeItem.setVipPrice(f.getPrice());
                                            newTradeItem.setSplitPrice(f.getPrice().multiply(BigDecimal.valueOf(f.getNum())).setScale(2, BigDecimal.ROUND_HALF_UP));
                                            newTradeItem.setOriginalPrice(f.getPrice());
                                            newTradeItem.setPileOrderCode(f.getOrderCode());
                                            newTradeItem.setNum(f.getNum());
                                            newTradeItems.add(newTradeItem);
                                        });
                                        removeTradeItems.add(tradeItem);
                                    } else {
                                        if (CollectionUtils.isNotEmpty(filterList)) {
                                            PileStockRecordAttachment filter = filterList.get(0);
                                            tradeItem.setPileOrderCode(filter.getOrderCode());
                                        } else {
                                            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "囤货明细副表记录异常，请联系客服！");
                                        }
                                    }
                                });
                                //删除原有订单商品明细记录
                                if (CollectionUtils.isNotEmpty(removeTradeItems)) {
                                    pushWmsTrade.getTradeItems().removeAll(removeTradeItems);
                                }
                                //添加拆分后的订单商品明细记录
                                if (CollectionUtils.isNotEmpty(newTradeItems)) {
                                    pushWmsTrade.getTradeItems().addAll(newTradeItems);
                                }
                                log.info("====================提货订单推送wms信息：{}", pushWmsTrade);
                                pushWMSOrder(pushWmsTrade, false, villageFlag);
                            } else {
                                log.info("订单推送WMS:{}", trade.getId());
                                if(isPayByOfflineOrIsOPK(trade)){
                                    log.info("线下支付订单或囤货提货单下单时推送WMS:{}", trade.getId());
                                    pushWMSOrder(trade, false, villageFlag);
                                }
                            }
                        } catch (Exception e) {
                            log.info("=====订单推送报错日志：" + e + ";  订单编号:" + trade.getId());
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        stopWatch.stop();
        stopWatch.start("createSingleTrade订单入库");
        //如果订单为普通订单，线下支付需要审核
        if (TradeActivityTypeEnum.TRADE.toActivityType().equals(trade.getActivityType()) && trade.getPayInfo().getPayTypeId().equals("1")) {
            auditState = AuditState.NON_CHECKED;
        }

        if (flag && trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME)) {
            trade.setVillageFlag(true);
        } else {
            trade.setVillageFlag(false);
        }
        if (villageFlag && trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME)) {
            trade.setNewVilageFlag(true);
        } else {
            trade.setNewVilageFlag(false);
        }
        //初始化订单打印次数 最多3次
        trade.setPrintCount(printCountMax);
        // 5.订单入库
        tradeService.addTrade(trade);
        stopWatch.stop();
        stopWatch.start("createSingleTrade营销限购和区域限购");
        Map<String, Long> collect = trade.getGifts().stream().collect(Collectors.toMap(TradeItem::getSkuId, TradeItem::getNum));
        //判断是否有营销活动满赠如果存在那么修改限赠数量
        if (CollectionUtils.isNotEmpty(trade.getTradeMarketings())) {
            trade.getTradeMarketings().forEach(marketing -> {
                MarketingFullGiftLevelVO giftLevel = marketing.getGiftLevel();
                if (Objects.nonNull(giftLevel)) {
                    Long marketingId = giftLevel.getMarketingId();
                    Long giftLevelId = giftLevel.getGiftLevelId();
                    trade.getGifts().forEach(gift -> {
                        if (!Objects.isNull(collect.get(gift.getSkuId()))) {
                            marketingProvider.incrActiveNum(MarketingDecrNumRequest.builder()
                                    .marketingId(marketingId.toString())
                                    .goodsInfoId(gift.getSkuId())
                                    .num(collect.get(gift.getSkuId()))
                                    .levelId(giftLevelId.toString()).build());
                        }
                    });
                }
            });
        }
        //用户区域限购表
        if (trade.getSaleType().equals(SaleType.WHOLESALE)) {

            Map<String, BigDecimal> skunummap = addCustomerAreaLimitBuyRecord(trade);
            //营销限购表增加记录
            List<TradeMarketingVO> tradeMarketings = trade.getTradeMarketings();
            if (CollectionUtils.isNotEmpty(tradeMarketings)) {
                addMarketingPurchaseLimit(trade, skunummap, tradeMarketings);
            }
        }
        stopWatch.stop();
        stopWatch.start("createSingleTrade记录物流信息");
        //记录物流信息
        if (isLogistics(trade.getDeliverWay()) && Objects.nonNull(trade.getLogisticsCompanyInfo()) && StringUtils.isNotEmpty(trade.getLogisticsCompanyInfo().getId())) {
            insertHistoryLogisticCompany(trade);
        }

        if (Platform.SUPPLIER.equals(operator.getPlatform())) {
            this.operationLogMq.convertAndSend(operator, "代客下单", "订单号" + trade.getId());
        }
        //推送短信
        if (goodsFirst) {
            //自提订单
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
               /* smsSendUtil.send(SmsTemplate.CUSTOMER_PASSWORD, new String[]{trade.getConsignee().getPhone()},
                        trade.getId(), verifyCode);*/
                sendPickUpMessage(trade);
            }
        }
        stopWatch.stop();
        log.info("createSingleTrade创建订单明细总耗时"+stopWatch.prettyPrint());
        return trade;
    }

    private void addMarketingPurchaseLimit(Trade trade, Map<String, BigDecimal> skunummap, List<TradeMarketingVO> tradeMarketings) {
        List<MarketingPurchaseLimitVO> requstparam = new LinkedList<>();
        //获取营销对应的商品哪些有限购
        MarketingEffectiveRespose context1 = marketingScopeQueryProvider.getMarketingScopeLimitPurchase
                (MarketingEffectiveRequest.builder().tradeMarketingList(KsBeanUtil.convert(tradeMarketings, TradeMarketingDTO.class)).build()).getContext();
        if (CollectionUtils.isNotEmpty(context1.getTradeMarketingList())) {
            context1.getTradeMarketingList().forEach(v -> {
                v.getSkuIds().forEach(vb -> {
                    MarketingPurchaseLimitVO marketingPurchaseLimitVO = new MarketingPurchaseLimitVO();
                    marketingPurchaseLimitVO.setMarketingId(v.getMarketingId());
                    marketingPurchaseLimitVO.setCreateTime(LocalDateTime.now());
                    marketingPurchaseLimitVO.setGoodsInfoId(vb);
                    marketingPurchaseLimitVO.setTradeId(trade.getId());
                    marketingPurchaseLimitVO.setCustomerId(trade.getBuyer().getId());
                    marketingPurchaseLimitVO.setNum(skunummap.get(vb));
                    requstparam.add(marketingPurchaseLimitVO);
                });

            });
        }
        if (CollectionUtils.isNotEmpty(requstparam)) {
            marketingPurchaseLimitProvider.add(requstparam);
            // TODO log
            log.info("TradeService_marketingPurchaseLimitProvider:{}",JSON.toJSONString(requstparam));
            // 判断是否超出了营销的总限购数量，超出总限量，终止该商品参与营销活动
            for(MarketingPurchaseLimitVO marketingPurchaseLimitVO : requstparam){
                // TODO log
                log.info("TradeService_marketingPurchaseLimitProvider_marketingPurchaseLimitVO:{}",JSON.toJSONString(marketingPurchaseLimitVO));
                MarketingScopeByMarketingIdRequest marketingScopeByMarketingIdRequest = new MarketingScopeByMarketingIdRequest();
                marketingScopeByMarketingIdRequest.setMarketingId(marketingPurchaseLimitVO.getMarketingId());
                marketingScopeByMarketingIdRequest.setSkuId(marketingPurchaseLimitVO.getGoodsInfoId());
                BaseResponse<MarketingScopeByMarketingIdResponse> marketingScopeByMarketingIdResponseBaseResponse = marketingScopeQueryProvider.listByMarketingIdAndSkuIdAndCache(marketingScopeByMarketingIdRequest);

                List<MarketingScopeVO> marketingScopeVOList = Optional.ofNullable(marketingScopeByMarketingIdResponseBaseResponse).map(BaseResponse::getContext)
                        .map(MarketingScopeByMarketingIdResponse::getMarketingScopeVOList)
                        .orElse(Lists.newArrayList());
                if(CollectionUtils.isEmpty(marketingScopeVOList)){
                    continue;
                }
                MarketingScopeVO marketingScopeVO = marketingScopeVOList.stream().findFirst().get();

                Long purchaseNum = marketingScopeVO.getPurchaseNum(); // 营销总限购量
                if(Objects.isNull(purchaseNum)){
                    // 未设置营销活动总限购量，跳过
                    continue;
                }
                // TODO log
                log.info("TradeService_marketingPurchaseLimitProvider_1:{},{}",marketingScopeVO.getMarketingId(), marketingScopeVO.getPurchaseNum());
                Map<String,Object> req = new LinkedHashMap<>();
                req.put("marketingId",marketingPurchaseLimitVO.getMarketingId());
                req.put("goodsInfoId", marketingPurchaseLimitVO.getGoodsInfoId());
                List<MarketingPurchaseLimitVO> purchaseLimits = marketingPurchaseLimitProvider.queryListByParmNoUser(req).getContext();
                log.info("TradeService_marketingPurchaseLimitProvider_2:{}", JSON.toJSONString(purchaseLimits));
                AtomicReference<BigDecimal> marketingNum = new AtomicReference<>(BigDecimal.ZERO); // 已占用的限购物数量（总限购）

                if(CollectionUtils.isNotEmpty(purchaseLimits)){
                    List<String> tradeIds = purchaseLimits.stream().map(MarketingPurchaseLimitVO::getTradeId).collect(Collectors.toList());
                    //获取生效订单
                    List<TradeVO> tradeVOS = tradeQueryProvider.getOrderByIdsSimplify(tradeIds).getContext();
                    List<String> validTradeIds = tradeVOS.stream().map(TradeVO::getId).collect(Collectors.toList());
                    log.info("TradeService_marketingPurchaseLimitProvider_3:{}", JSON.toJSONString(validTradeIds));
                    purchaseLimits.forEach(q->{
                        if (validTradeIds.contains(q.getTradeId())){
                            marketingNum.set(marketingNum.get().add(q.getNum()));
                        }
                    });
                }
                log.info("TradeService_marketingPurchaseLimitProvider_3:{},{}",purchaseNum, marketingNum.get().longValue());
                if(purchaseNum <= marketingNum.get().longValue()){
                    // 终止该商品参与该营销活动
                    TerminationMarketingScopeRequest terminationMarketingScopeRequest = TerminationMarketingScopeRequest.builder()
                            .marketingId(marketingPurchaseLimitVO.getMarketingId())
                            .scopeId(marketingPurchaseLimitVO.getGoodsInfoId())
                            .build();
                    marketingScopeProvider.terminationByMarketingIdAndScopeId(terminationMarketingScopeRequest);
                }
            }
        }
    }

    private Map<String, BigDecimal> addCustomerAreaLimitBuyRecord(Trade trade) {
        List<CustomerAreaLimitDetailVO> list = new ArrayList<>();
        //批发 购买商品
        List<TradeItem> tradeItems = trade.getTradeItems();
        List<Long> devaningIds = tradeItems.stream().map(TradeItem::getDevanningId).collect(Collectors.toList());

        tradeItems.forEach(v -> {
            v.setBNum(v.getDivisorFlag().multiply(BigDecimal.valueOf(v.getNum())));
        });
        //得到goodsinfo:num的数据 因为有拆箱的存在
        Map<String, BigDecimal> skunummap = tradeItems.stream()
                .collect(Collectors.toMap(TradeItem::getSkuId, TradeItem::getBNum, BigDecimal::add));
        GoodsInfoViewByIdsRequest goodsInfoRequest = new GoodsInfoViewByIdsRequest();
        goodsInfoRequest.setDevanningIds(devaningIds);
        goodsInfoRequest.setIsHavSpecText(Constants.yes);
        goodsInfoRequest.setWareId(trade.getWareId());
        DevanningGoodsInfoListResponse context = devanningGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        context.getDevanningGoodsInfoVOS().forEach(pa -> {
            if (StringUtils.isNotBlank(pa.getSingleOrderAssignArea()) && Objects.nonNull(trade.getConsignee().getProvinceId())
                    && Objects.nonNull(trade.getConsignee().getCityId())) {
                List<Long> singleOrderAssignAreaList = Arrays.stream(pa.getSingleOrderAssignArea().split(",")).map(s -> Long.parseLong(s.trim())).collect(Collectors.toList());
                if (CollectionUtils.isNotEmpty(singleOrderAssignAreaList)
                        && (singleOrderAssignAreaList.contains(trade.getConsignee().getProvinceId()) || singleOrderAssignAreaList.contains(trade.getConsignee().getCityId()))) {
                    CustomerAreaLimitDetailVO parem = new CustomerAreaLimitDetailVO();
                    List<String> collect1 = list.stream().map(CustomerAreaLimitDetailVO::getGoodsInfoId).collect(Collectors.toList());
                    if (CollectionUtils.isEmpty(list) || !collect1.contains(pa.getGoodsInfoId())) {
                        parem.setGoodsInfoId(pa.getGoodsInfoId()).setCreateTime(LocalDateTime.now()).setTradeId(trade.getId())
                                .setCustomerId(trade.getBuyer().getId()).setRegionId(trade.getConsignee().getCityId().intValue())
                                .setNum(skunummap.get(pa.getGoodsInfoId()));
                    }
                    list.add(parem);
                }
            }
        });
        if (CollectionUtils.isNotEmpty(list)) {
            customerAreaLimitDetailProvider.addByOrder(CustomerAreaLimitDetailAddRequest.builder().list(list).build());
        }
        return skunummap;
    }

    private void insertHistoryLogisticCompany(Trade trade) {
        boolean insertFlag = (Objects.nonNull(trade.getLogisticsCompanyInfo())
                && (Objects.nonNull(trade.getLogisticsCompanyInfo().getInsertFlag())
                && trade.getLogisticsCompanyInfo().getInsertFlag() == 1));
        HistoryLogisticCompanyRequest company = new HistoryLogisticCompanyRequest();
        company.setCreateTime(LocalDateTime.now());
        company.setLogisticsName(trade.getLogisticsCompanyInfo().getLogisticsCompanyName());
        company.setLogisticsPhone(trade.getLogisticsCompanyInfo().getLogisticsCompanyPhone());
        company.setOrderId(trade.getId());
        company.setReceivingSite(StringUtils.isNotBlank(trade.getLogisticsCompanyInfo().getReceivingPoint())
                ? trade.getLogisticsCompanyInfo().getReceivingPoint() : null);
        company.setCustomerId(trade.getBuyer().getId());
        if (insertFlag) {
            company.setSelFlag(1);
        } else {
            company.setSelFlag(0);
            company.setCompanyId(Long.valueOf(trade.getLogisticsCompanyInfo().getId()));
            company.setLogisticsAddress(trade.getLogisticsCompanyInfo().getLogisticsAddress());
        }
        company.setLogisticsType(DeliverWay.LOGISTICS.equals(trade.getDeliverWay())? LogisticsType.THIRD_PARTY_LOGISTICS.toValue():LogisticsType.SPECIFY_LOGISTICS.toValue());
        company.setMarketId(trade.getSupplier().getMarketId());
        orderProducerService.insertCompany(company);
    }

    private void createPileStockRecordAttachment(Trade trade, List<PileStockRecordAttachment> stockRecordAttachmentList) {
        //计算提货单商品价格
        //数量
        Map<String, Long> stockRecordMap = new HashMap<>();
        //金额
        Map<String, BigDecimal> stockRecordPriceMap = new HashMap<>();
        //记录那些商品已被使用
        List<PileStockRecord> useStockRecord = new ArrayList<>();
        //提货成功副表
//            List<PileStockRecordAttachment> stockRecordAttachmentList = new ArrayList<>();
        //提货记录表
        List<PileStockRecordTradeItem> stockRecordTradeItemList = new ArrayList<>();
        List<String> stockRecordSkuIds = trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
        List<PileStockRecord> stockRecordList = pileStockRecordRepository.findPileStockRecord(stockRecordSkuIds, trade.getBuyer().getId());
        logger.info("TradeService.create stockRecordList:{} uesrPhone:{} orderId:{}", JSONObject.toJSONString(stockRecordList),
                trade.getBuyer().getAccount(),
                trade.getId());
        trade.getTradeItems().stream().forEach(tradeItem -> {
            stockRecordList.stream().forEach(stockRecord -> {
                if (stockRecord.getGoodsInfoId().equals(tradeItem.getSkuId())) {
                    Long cumulativeNum = 0L;
                    BigDecimal stockRecordPrice = BigDecimal.ZERO;
                    if (stockRecordMap.get(stockRecord.getGoodsInfoId()) != null) {
                        cumulativeNum = stockRecordMap.get(stockRecord.getGoodsInfoId());
                    }
                    if (stockRecordPriceMap.get(stockRecord.getGoodsInfoId()) != null) {
                        stockRecordPrice = stockRecordPriceMap.get(stockRecord.getGoodsInfoId());
                    }
                    if (stockRecord.getStockRecordNum() > stockRecord.getStockRecordRemainingNum() && cumulativeNum < tradeItem.getNum()) {
                        Long cumulative = stockRecord.getStockRecordNum() - stockRecord.getStockRecordRemainingNum();
                        Long stock = cumulative + cumulativeNum;
                        stockRecordMap.put(stockRecord.getGoodsInfoId(), stock);

                        //累计金额
                        if (stock >= tradeItem.getNum()) {
                            Long part = tradeItem.getNum() - cumulativeNum;
                            BigDecimal num = new BigDecimal(part);
                            BigDecimal remainingPrice = stockRecord.getStockRecordPrice().multiply(num);
                            stockRecordPriceMap.put(stockRecord.getGoodsInfoId(), remainingPrice.add(stockRecordPrice));
                            Long state = 0L;
                            if (stock == tradeItem.getNum()) {
                                state = 1L;
                            }
                            PileStockRecord pileStockRecord = PileStockRecord.builder()
                                    .stockRecordId(stockRecord.getStockRecordId())
                                    .stockRecordRemainingNum(part + stockRecord.getStockRecordRemainingNum())
                                    .stockRecordNum(stockRecord.getStockRecordNum())
                                    .orderCode(stockRecord.getOrderCode())
                                    .goodsInfoId(stockRecord.getGoodsInfoId())
                                    .goodsId(stockRecord.getGoodsId())
                                    .customerId(stockRecord.getCustomerId())
                                    .stockRecordPrice(stockRecord.getStockRecordPrice())
                                    .createTime(stockRecord.getCreateTime())
                                    .updateTime(LocalDateTime.now())
                                    .isUse(state)
                                    .build();
                            useStockRecord.add(pileStockRecord);
                            //加入囤货与提货关联表中
                            PileStockRecordAttachment stockRecordAttachment = PileStockRecordAttachment.builder()
                                    .stockRecordId(stockRecord.getStockRecordId())
                                    .tid(trade.getId())
                                    .orderCode(stockRecord.getOrderCode())
                                    .num(part)
                                    .skuId(stockRecord.getGoodsInfoId())
                                    .price(stockRecord.getStockRecordPrice())
                                    .customerId(stockRecord.getCustomerId())
                                    .createTime(LocalDateTime.now())
                                    .updateTime(LocalDateTime.now())
                                    .build();
                            stockRecordAttachmentList.add(stockRecordAttachment);
                        } else {
                            //每行的数据金额
                            BigDecimal everyPrice = stockRecord.getStockRecordPrice().multiply(new BigDecimal(cumulative)).add(stockRecordPrice);
                            stockRecordPriceMap.put(stockRecord.getGoodsInfoId(), everyPrice);
                            PileStockRecord pileStockRecord = PileStockRecord.builder()
                                    .stockRecordId(stockRecord.getStockRecordId())
                                    .stockRecordRemainingNum(stockRecord.getStockRecordNum())
                                    .stockRecordNum(stockRecord.getStockRecordNum())
                                    .orderCode(stockRecord.getOrderCode())
                                    .goodsInfoId(stockRecord.getGoodsInfoId())
                                    .goodsId(stockRecord.getGoodsId())
                                    .customerId(stockRecord.getCustomerId())
                                    .stockRecordPrice(stockRecord.getStockRecordPrice())
                                    .createTime(stockRecord.getCreateTime())
                                    .updateTime(LocalDateTime.now())
                                    .isUse(1L)
                                    .build();
                            useStockRecord.add(pileStockRecord);
                            //加入囤货与提货关联表中
                            PileStockRecordAttachment stockRecordAttachment = PileStockRecordAttachment.builder()
                                    .stockRecordId(stockRecord.getStockRecordId())
                                    .tid(trade.getId())
                                    .orderCode(stockRecord.getOrderCode())
                                    .num(cumulative)
                                    .skuId(stockRecord.getGoodsInfoId())
                                    .price(stockRecord.getStockRecordPrice())
                                    .customerId(stockRecord.getCustomerId())
                                    .createTime(LocalDateTime.now())
                                    .updateTime(LocalDateTime.now())
                                    .build();
                            stockRecordAttachmentList.add(stockRecordAttachment);
                        }
//                            logger.info("TradeService.create stockRecordPriceMap:{}",JSONObject.toJSONString(stockRecordPriceMap));
//                            logger.info("TradeService.create stockRecordMap:{}",JSONObject.toJSONString(stockRecordMap));
                        logger.info("TradeService.create useStockRecord:{}", JSONObject.toJSONString(useStockRecord));
                    }


                    //添加商品金额
                    Long num = 0L;
                    if (stockRecordMap.get(stockRecord.getGoodsInfoId()) != null) {
                        num = stockRecordMap.get(stockRecord.getGoodsInfoId());
                    }
                    logger.info("TradeService.create goodsId:{} cumulativeNum:{} tradeItem.getNum:{}", tradeItem.getSkuId(),
                            num, tradeItem.getNum());
                    if (num >= tradeItem.getNum()) {
                        BigDecimal theirPrice = BigDecimal.ZERO;
                        if (stockRecordPriceMap.get(stockRecord.getGoodsInfoId()) != null) {
                            theirPrice = stockRecordPriceMap.get(stockRecord.getGoodsInfoId());
                        }
                        BigDecimal tradeNum = new BigDecimal(tradeItem.getNum());
                        BigDecimal averagePrice = theirPrice.divide(tradeNum, 2, BigDecimal.ROUND_HALF_UP);
                        tradeItem.setPrice(averagePrice);
                        tradeItem.setVipPrice(averagePrice);
                        tradeItem.setSplitPrice(theirPrice);
                        tradeItem.setOriginalPrice(averagePrice);
                    }
                }
            });
            PileStockRecordTradeItem stockRecordTradeItem = PileStockRecordTradeItem.builder()
                    .num(tradeItem.getNum())
                    .skuId(tradeItem.getSkuId())
                    .skuName(tradeItem.getSkuName())
                    .spuId(tradeItem.getSpuId())
                    .spuName(tradeItem.getSpuName())
                    .storeId(String.valueOf(tradeItem.getStoreId()))
                    .price(tradeItem.getPrice())
                    .tid(trade.getId())
                    .createTime(LocalDateTime.now())
                    .updateTime(LocalDateTime.now())
                    .build();
            stockRecordTradeItemList.add(stockRecordTradeItem);
        });
        if (stockRecordTradeItemList.size() > 0) {
            pileStockRecordTradeItemRepository.saveAll(stockRecordTradeItemList);
        }
        if (useStockRecord.size() > 0) {
            //批量更新
            pileStockRecordRepository.saveAll(useStockRecord);
        }
        if (stockRecordAttachmentList.size() > 0) {
            pileStockRecordAttachmentRepostory.saveAll(stockRecordAttachmentList);
        }
    }

    public boolean isPayByOfflineOrIsOPK(Trade trade) {
        Assert.notNull(trade, "trade must not be null");
        Assert.notNull(trade.getPayInfo(), "trade.getPayInfo() must not be null");
        //线下支付 或 囤货提货时，不走锁定库存逻辑，直接更新可用库存
        return PayType.OFFLINE.toValue() == Integer.parseInt(trade.getPayInfo().getPayTypeId()) ||
                Objects.equals(TradeActivityTypeEnum.NEWPICKTRADE.toActivityType(), trade.getActivityType());
    }

    /**
     * 创建积分订单-入库
     *
     * @param trade
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public Trade createPoints(Trade trade, Operator operator) {
        // 初始化订单提交状态
        trade.setTradeState(TradeState
                .builder()
                .deliverStatus(DeliverStatus.NOT_YET_SHIPPED)
                .flowState(FlowState.AUDIT)
                .createTime(LocalDateTime.now())
                .build());

        // 创建订单开票跟支付单
        this.createPayOrder(trade, operator, false);

        // 创建对账单
        saveAccountRecord(trade);
        trade.getTradeState().setAuditState(AuditState.CHECKED);
        trade.getTradeState().setPayState(PayState.PAID);
        trade.appendTradeEventLog(new TradeEventLog(operator, "创建订单", "创建订单", LocalDateTime.now()));
        // 订单入库
        tradeService.addTrade(trade);

        return trade;
    }

    /**
     * 更新订单
     *
     * @param tradeUpdateRequest
     */
    @LcnTransaction
    public void updateTradeInfo(TradeUpdateRequest tradeUpdateRequest) {
        tradeService.updateTrade(KsBeanUtil.convert(tradeUpdateRequest.getTrade(), Trade.class));
    }

    /**
     * 生成对账单
     *
     * @param trade
     */
    private void saveAccountRecord(Trade trade) {
        // 根据订单id查询交易流水号
        BaseResponse<PayTradeRecordResponse> payTradeRecord = payQueryProvider.getTradeRecordByOrderOrParentCode(new
                TradeRecordByOrderOrParentCodeRequest(trade.getId(), trade.getParentId()));
        String tradeNo = Objects.isNull(payTradeRecord.getContext()) ? null : payTradeRecord.getContext().getTradeNo();
        // 添加对账记录
        AccountRecordAddRequest record = AccountRecordAddRequest.builder()
                .customerId(trade.getBuyer().getId())
                .customerName(trade.getBuyer().getName())
                .orderCode(trade.getId())
                .tradeNo(tradeNo)
                .orderTime(trade.getTradeState().getCreateTime())
                .payWay(PayWay.POINT)
                .storeId(trade.getSupplier().getStoreId())
                .supplierId(trade.getSupplier().getSupplierId())
                .tradeTime(LocalDateTime.now())
                .type((byte) 0)
                .build();
        // 计算积分结算价
        BigDecimal settlementPrice = trade.getTradeItems().stream()
                .map(tradeItem -> tradeItem.getSettlementPrice().multiply(BigDecimal.valueOf(tradeItem.getNum())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        record.setAmount(settlementPrice);
        record.setPoints(trade.getTradePrice().getPoints());
        accountRecordProvider.add(record);
    }

    /**
     * 批量创建订单
     *
     * @param trades   各店铺订单
     * @param operator 操作人
     * @return 订单提交结果集
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> createBatch(List<Trade> trades, Operator operator) {
        List<TradeCommitResult> resultList = new ArrayList<>();
        final String parentId = generatorService.generatePoId();
        boolean sp = trades.stream().anyMatch(v -> v.getId().substring(0, 3).contains("SP"));
        boolean o = trades.stream().anyMatch(v -> v.getId().substring(0, 3).contains("O"));
        List<String> collect = trades.stream().map(Trade::getId).collect(Collectors.toList());
        trades.forEach(v->{
                v.setMergFlag(sp&&o);
                v.setTids(collect);
        });


        //散批订单
        Trade bulkTrade = trades.stream().filter(t -> SaleType.BULK.equals(t.getSaleType())).findFirst().orElse(null);
        //散批订单商品总数
//        AtomicReference<Long> bulkGoodsTotalNum = new AtomicReference<>(0L);
//        if (Objects.nonNull(bulkTrade)) {
//            bulkGoodsTotalNum.set(bulkTrade.getGoodsTotalNum());
//        }


        //零售订单
        Trade retailTrade = trades.stream().filter(t -> SaleType.RETAIL.equals(t.getSaleType())).findFirst().orElse(null);
        //零售订单商品总数
        AtomicReference<Long> retailGoodsTotalNum = new AtomicReference<>(0L);
        if (Objects.nonNull(retailTrade)) {
            retailGoodsTotalNum.set(retailTrade.getGoodsTotalNum());
        }

        //平台自营订单
        Trade platFormTrade = trades.stream().filter(t -> CompanyType.PLATFORM.equals(t.getSupplier().getCompanyType())).findFirst().orElse(null);
        //平台自营订单商品总数
        AtomicReference<Long> platFormGoodsTotalNum = new AtomicReference<>(0L);
        if (Objects.nonNull(platFormTrade)) {
            platFormGoodsTotalNum.set(platFormTrade.getGoodsTotalNum());
        }
        //订单总商品数
        AtomicReference<Long> tradeGoodsTotalNum = new AtomicReference<>(0L);
        tradeGoodsTotalNum.set(trades.stream().mapToLong(Trade::getGoodsTotalNum).sum());

        //第三方商家订单集合
        List<Trade> supplierTrades = trades.stream().filter(t -> CompanyType.SUPPLIER.equals(t.getSupplier().getCompanyType())).collect(Collectors.toList());
        //合并第三方商家的订单
        Trade mergeSupplierOrder = null;
        //第三方商家订单商品
        List<TradeItem> supplierItems = Lists.newArrayList();
        //第三方商家商品总件数
        AtomicReference<Long> supplierGoodsTotalNum = new AtomicReference<>(0L);
        if (CollectionUtils.isNotEmpty(supplierTrades)) {
            supplierTrades.forEach(s -> {
                //订单数据补全
                s.setParentId(parentId);
                s.setOrderType(OrderType.NORMAL_ORDER);
                supplierItems.addAll(s.getTradeItems());
                supplierGoodsTotalNum.updateAndGet(v -> v + s.getGoodsTotalNum());
            });

            mergeSupplierOrder = supplierTrades.stream().findFirst().orElse(null);
            if (Objects.isNull(mergeSupplierOrder)) {
                mergeSupplierOrder = supplierTrades.get(0);
            }
            mergeSupplierOrder.setParentId(parentId);
            mergeSupplierOrder.setOrderType(OrderType.NORMAL_ORDER);
            mergeSupplierOrder.setSaleType(SaleType.WHOLESALE);

            //第三方商家发货单
            List<TradeDeliver> supplierTradeDeliverList = Lists.newArrayList();
            //第三方商家订单营销信息
            List<TradeMarketingVO> supplierTradeMarketingVOList = Lists.newArrayList();
            //第三方商家营销赠品
            List<TradeItem> supplierGiftList = Lists.newArrayList();
            //合并第三方商家订单信息
            supplierTrades.forEach(s -> {
                //商品信息合并
                if (CollectionUtils.isNotEmpty(s.getTradeDelivers())) {
                    supplierTradeDeliverList.addAll(s.getTradeDelivers());
                }
                if (CollectionUtils.isNotEmpty(s.getTradeMarketings())) {
                    supplierTradeMarketingVOList.addAll(s.getTradeMarketings());
                }
                if (CollectionUtils.isNotEmpty(s.getGifts())) {
                    supplierGiftList.addAll(s.getGifts());
                }
            });

            mergeSupplierOrder.setTradeItems(supplierItems);
            mergeSupplierOrder.setTradeDelivers(supplierTradeDeliverList);
            mergeSupplierOrder.setTradeMarketings(supplierTradeMarketingVOList);
            mergeSupplierOrder.setGifts(supplierGiftList);
            mergeSupplierOrder.setGoodsTotalNum(supplierGoodsTotalNum.get());

            /********************第三方商家订单金额赋值开始********************/
            List<TradePrice> supplierTradePriceList = supplierTrades.stream().map(t -> t.getTradePrice()).collect(Collectors.toList());
            mergeSupplierOrder.setTradePrice(TradePrice.builder()
                    /**订单应付金额*/
                    .totalPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getTotalPrice())).map(p -> p.getTotalPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**原始金额, 不作为付费金额*/
                    .originPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getOriginPrice())).map(p -> p.getOriginPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**优惠金额*/
                    .discountsPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getDiscountsPrice())).map(p -> p.getDiscountsPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**配送费用*/
                    .deliveryPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getDeliveryPrice())).map(p -> p.getDeliveryPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**订单实际支付金额*/
                    .totalPayCash(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getTotalPayCash())).map(p -> p.getTotalPayCash()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**商品总金额*/
                    .goodsPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getGoodsPrice())).map(p -> p.getGoodsPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**优惠券优惠金额*/
                    .couponPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getCouponPrice())).map(p -> p.getCouponPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**运费优惠金额*/
                    .deliveryCouponPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getDeliveryCouponPrice())).map(p -> p.getDeliveryCouponPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                    /**包装费*/
                    .packingPrice(supplierTradePriceList.stream().filter(p -> Objects.nonNull(p.getPackingPrice())).map(p -> p.getPackingPrice()).reduce(BigDecimal.ZERO, BigDecimal::add)).build());
            /********************第三方商家订单金额赋值结束********************/

        }

        /********************开始校验乡镇满10件配送********************/
        //是否需要校验 满10件店配
        AtomicReference<Boolean> checkFlag = new AtomicReference<>(false);
        AtomicReference<Boolean> flag = new AtomicReference<>(false);
        AtomicReference<Boolean> villageFlag = new AtomicReference<>(false);
        if (Objects.nonNull(platFormTrade) || Objects.nonNull(supplierTrades)) {
            checkFlag.set(true);
        }
        if (checkFlag.get()) {
            //是否有十件店配
            Trade validTrade = platFormTrade;
            if (Objects.isNull(validTrade)) {
                validTrade = trades.get(0);
            }
            Boolean verifyVillageFlag = this.verifyService.verifyVillages(validTrade, tradeGoodsTotalNum.get());
            //  flag.set(verifyVillageFlag);
            villageFlag.set(verifyVillageFlag);
            flag.set(false);//todo 乡镇件实时推送
            /**List<FreightTemplateDeliveryAreaVO> vaildContext = freightTemplateDeliveryAreaQueryProvider.queryByStoreId(
             FreightTemplateDeliveryAreaListRequest.builder()
             .storeId(validTrade.getSupplier().getStoreId())
             .build()).getContext();



             if(CollectionUtils.isNotEmpty(vaildContext)){
             List<FreightTemplateDeliveryAreaVO> tenTemplateDeliveryAreaVOS = vaildContext.stream().filter(f -> freightTemplateDeliveryType.AREATENDELIVER.equals(f.getDestinationType()))
             .collect(Collectors.toList());
             Trade validOrder = validTrade;
             if(CollectionUtils.isNotEmpty(tenTemplateDeliveryAreaVOS)){
             tenTemplateDeliveryAreaVOS.forEach(tt->{
             if(
             //乡镇满十件(免费店配)
             (Objects.nonNull(tt) && Objects.nonNull(tt.getDestinationAreaName())
             && (checkDeliveryDestination(validOrder.getConsignee().getDetailAddress(), Stream.of(tt.getDestinationAreaName()).collect(Collectors.toList()))
             || checkDeliveryDestination(validOrder.getConsignee().getAddress(), Stream.of(tt.getDestinationAreaName()).collect(Collectors.toList()))))
             ){
             if(validOrder.getDeliverWay().equals(DeliverWay.DELIVERY_HOME) && tradeGoodsTotalNum.get() < 10){
             throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "乡镇免费店配数量不足10件！");
             }else{
             log.info("乡镇订单免配送标识为true进入缓存表");
             flag.set(true);//又改为定时任务推送
             //                                flag.set(false);//乡证件改为实时推送
             }
             //                        if((tradeGoodsTotalNum.get() < 30)){
             //                            flag.set(true);
             //                        }
             }
             });
             }
             }*/
        }
        /********************结束校验乡镇满10件配送********************/

        Trade mergeOrder = null;
        List<FreightTemplateDeliveryAreaVO> contexts = new ArrayList<>();
        //订单集合大于1 且 第三方商家商品数量或平台自营商品数量小于5 才合并订单
//        if(trades.size() > 1 && (supplierGoodsTotalNum.get() < 5 || platFormGoodsTotalNum.get() < 5)){
        if (false) {
            try {
                log.info("==================================>合并订单逻辑");
                if (Objects.isNull(platFormTrade)) {
                    mergeOrder = mergeSupplierOrder;
                } else {
                    //重置订单数据信息
                    trades.clear();
                    if (Objects.nonNull(platFormTrade)) {
                        trades.add(platFormTrade);
                    }
                    if (Objects.nonNull(mergeSupplierOrder)) {
                        trades.add(mergeSupplierOrder);
                    }
                    mergeOrder = platFormTrade;

                    if (Objects.isNull(mergeOrder)) {
                        mergeOrder = trades.get(0);
                    }

                    mergeOrder.setParentId(parentId);
                    mergeOrder.setOrderType(OrderType.NORMAL_ORDER);

                    //订单商品
                    List<TradeItem> itemsList = Lists.newArrayList();
                    //发货单
                    List<TradeDeliver> tradeDeliverArrayList = Lists.newArrayList();
                    //订单营销信息
                    List<TradeMarketingVO> tradeMarketingVOArrayList = Lists.newArrayList();
                    //营销赠品
                    List<TradeItem> giftArrayList = Lists.newArrayList();
                    //商品总件数
                    AtomicReference<Long> goodsTotalNum = new AtomicReference<>(0L);

                    //合并多订单数据
                    trades.forEach(t -> {
                        log.info("合并订单商品数据==============》{}", t.getTradeItems());
                        //订单数据补全
                        t.setParentId(parentId);
                        t.setOrderType(OrderType.NORMAL_ORDER);

                        //商品信息合并
                        itemsList.addAll(t.getTradeItems());
                        if (CollectionUtils.isNotEmpty(t.getTradeDelivers())) {
                            tradeDeliverArrayList.addAll(t.getTradeDelivers());
                        }
                        if (CollectionUtils.isNotEmpty(t.getTradeMarketings())) {
                            tradeMarketingVOArrayList.addAll(t.getTradeMarketings());
                        }
                        if (CollectionUtils.isNotEmpty(t.getGifts())) {
                            giftArrayList.addAll(t.getGifts());
                        }
                        goodsTotalNum.updateAndGet(v -> v + t.getGoodsTotalNum());
                    });

                    List<FreightTemplateDeliveryAreaVO> context = freightTemplateDeliveryAreaQueryProvider.queryByStoreId(
                            FreightTemplateDeliveryAreaListRequest.builder()
                                    .storeId(mergeOrder.getSupplier().getStoreId())
                                    .build()).getContext();
                    contexts.addAll(context);
                    if (CollectionUtils.isNotEmpty(context)) {
                        List<FreightTemplateDeliveryAreaVO> tenTemplateDeliveryAreaVOS = context.stream().filter(f -> freightTemplateDeliveryType.AREATENDELIVER.equals(f.getDestinationType()))
                                .collect(Collectors.toList());
                        Trade validOrder = mergeOrder;
                        if (CollectionUtils.isNotEmpty(tenTemplateDeliveryAreaVOS)) {
                            tenTemplateDeliveryAreaVOS.forEach(tt -> {
                                if (
                                    //乡镇满十件(免费店配)
                                        (Objects.nonNull(tt) && Objects.nonNull(tt.getDestinationAreaName())
                                                && (checkDeliveryDestination(validOrder.getConsignee().getDetailAddress(), Stream.of(tt.getDestinationAreaName()).collect(Collectors.toList()))
                                                || checkDeliveryDestination(validOrder.getConsignee().getAddress(), Stream.of(tt.getDestinationAreaName()).collect(Collectors.toList()))))
                                ) {
                                    if (validOrder.getDeliverWay().equals(DeliverWay.DELIVERY_HOME) && goodsTotalNum.get() < 10) {
                                        throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "乡镇免费店配数量不足！");
                                    }
                                }
                            });
                        }
                    }
                    log.info("======================》mergeOrder itemsList:{}", itemsList);
                    log.info("======================》mergeOrder goodsNum:{}", goodsTotalNum.get());
                    mergeOrder.setTradeItems(itemsList);
                    mergeOrder.setTradeDelivers(tradeDeliverArrayList);
                    mergeOrder.setTradeMarketings(tradeMarketingVOArrayList);
                    mergeOrder.setGifts(giftArrayList);
                    mergeOrder.setGoodsTotalNum(goodsTotalNum.get());
                    log.info("合并完成后的订单商品数据信息================》{}", mergeOrder.getTradeItems());

                    List<TradePrice> tradePriceList = trades.stream().map(t -> t.getTradePrice()).collect(Collectors.toList());
                    mergeOrder.setTradePrice(TradePrice.builder()
                            /**订单应付金额*/
                            .totalPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getTotalPrice())).map(p -> p.getTotalPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**原始金额, 不作为付费金额*/
                            .originPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getOriginPrice())).map(p -> p.getOriginPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**优惠金额*/
                            .discountsPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getDiscountsPrice())).map(p -> p.getDiscountsPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**配送费用*/
                            .deliveryPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getDeliveryPrice())).map(p -> p.getDeliveryPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**订单实际支付金额*/
                            .totalPayCash(tradePriceList.stream().filter(p -> Objects.nonNull(p.getTotalPayCash())).map(p -> p.getTotalPayCash()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**商品总金额*/
                            .goodsPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getGoodsPrice())).map(p -> p.getGoodsPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**优惠券优惠金额*/
                            .couponPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getCouponPrice())).map(p -> p.getCouponPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**运费优惠金额*/
                            .deliveryCouponPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getDeliveryCouponPrice())).map(p -> p.getDeliveryCouponPrice()).reduce(BigDecimal.ZERO, BigDecimal::add))
                            /**包装费*/
                            .packingPrice(tradePriceList.stream().filter(p -> Objects.nonNull(p.getPackingPrice())).map(p -> p.getPackingPrice()).reduce(BigDecimal.ZERO, BigDecimal::add)).build());

                }
                //创建订单
                Trade result = create(mergeOrder, operator, flag.get(), villageFlag.get());
                boolean hasImg = CollectionUtils.isNotEmpty(result.getTradeItems());
                resultList.add(new TradeCommitResult(result.getId(),
                        result.getParentId(), result.getTradeState(),
                        result.getPaymentOrder(), result.getTradePrice().getTotalPrice(),
                        result.getOrderTimeOut(),
                        result.getSupplier().getStoreName(),
                        result.getSupplier().getIsSelf(),
                        hasImg ? result.getTradeItems().get(0).getPic() : null));
            } catch (Exception e) {
                log.error("commit trade error,trade={}", mergeOrder, e);
                if (e instanceof SbcRuntimeException) {
                    throw e;
                } else {
                    throw new SbcRuntimeException("K-020010");
                }
            }
        } else {
            //清理订单数据，合并自营、零售及第三方商家订单数据
            trades.clear();
            //批发 自营
            if (Objects.nonNull(platFormTrade)) {
                trades.add(platFormTrade);
            }
            //批发 第三方商家
            if (Objects.nonNull(mergeSupplierOrder)) {
                trades.add(mergeSupplierOrder);
            }
            //零售
            if (Objects.nonNull(retailTrade)) {
                trades.add(retailTrade);
            }
            //散批
            if (Objects.nonNull(bulkTrade)) {
                trades.add(bulkTrade);
            }
            //存在id重复问题，不想找原因
            //去重
            log.info("trades.size()"+trades.size());
            Map<String,Trade> tradeMap = trades.stream().collect(
                    Collectors.toMap(Trade::getId,Function.identity(),(a,b)->a)
            );
            trades = tradeMap.values().stream().collect(Collectors.toList());
            log.info("trades.size()++1"+trades.size());

            List<Trade> finalTrades = trades;
            trades.forEach(
                    trade -> {
                        //创建订单
                        try {
                            trade.setParentId(parentId);
                            trade.setOrderType(OrderType.NORMAL_ORDER);

                            Trade result = create(trade, operator, flag.get(), villageFlag.get());
                            boolean hasImg = CollectionUtils.isNotEmpty(result.getTradeItems());
                            BigDecimal bigDecimalStream = result.getTradeItems().stream()
                                    .filter(tradeItem -> tradeItem.getSplitPrice() != null && tradeItem.getSplitPrice().compareTo(BigDecimal.ZERO) > 0)
                                    .map(TradeItem::getSplitPrice)
                                    .reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
                            if(Objects.nonNull(result.getTradePrice().getDeliveryPrice())){
                                bigDecimalStream = bigDecimalStream.add(result.getTradePrice().getDeliveryPrice());
                            }
                            if(Objects.nonNull(result.getTradePrice().getPackingPrice())){
                                bigDecimalStream = bigDecimalStream.add(result.getTradePrice().getPackingPrice());
                            }
                            resultList.add(new TradeCommitResult(result.getId(),
                                    result.getParentId(), result.getTradeState(),
                                    result.getPaymentOrder(), bigDecimalStream,
                                    result.getOrderTimeOut(),
                                    result.getSupplier().getStoreName(),
                                    result.getSupplier().getIsSelf(),
                                    hasImg ? result.getTradeItems().get(0).getPic() : null));
                        } catch (Exception e) {
                            log.error("commit trade error,trade={}", trade, e);
                            if (e instanceof SbcRuntimeException) {
                                throw e;
                            } else {
                                throw new SbcRuntimeException("K-020010");
                            }
                        }
                    }
            );
        }


//        log.info("=================trades=========, {}", JSONObject.toJSONString(trades));

        //查询自营订单 删除重复代码 沿用新代码 update by jiangxin 20211125
//        Trade platformTrade = trades.stream().filter(t -> com.wanmi.sbc.common.enums.CompanyType.PLATFORM.equals(t.getSupplier().getCompanyType()))
//                .findFirst().orElse(null);

//        if (Objects.nonNull(mergeOrder)){
//            trades.clear();
//            trades.add(mergeOrder);
//        }else{
//            if (Objects.nonNull(mergeSupplierOrder)){
//                trades.clear();
//                trades.add(mergeSupplierOrder);
//                if (Objects.nonNull(platFormTrade)){
//                    trades.add(platFormTrade);
//                }
//            }
//        }
        //获取订单组第一个订单
        Trade firstTrade = trades.stream().findFirst().get();
        // 批量修改优惠券状态
        List<CouponCodeBatchModifyDTO> dtoList = new ArrayList<>();
        trades.forEach(trade -> {

            //订单数据补全
            if (Objects.isNull(trade.getTradeState())) {
                trade.setTradeState(firstTrade.getTradeState());
            }
            if (Objects.nonNull(platFormTrade)) {
                if (Objects.isNull(trade.getTradeState())) {
                    trade.setTradeState(platFormTrade.getTradeState());
                }
                if (Objects.isNull(trade.getParentId())) {
                    trade.setParentId(platFormTrade.getParentId());
                }
            }

            updateCouponState(dtoList, trade);

        });

        modifyWalletBalance(trades, false);

        if (dtoList.size() > 0) {
            couponCodeProvider.batchModify(CouponCodeBatchModifyRequest.builder().modifyDTOList(dtoList).build());
        }

        log.info("========================================= trades =========================================, {}", JSONObject.toJSONString(trades));

//        trades.stream().forEach(trade -> {
//            //订单数据补全
//            if(Objects.nonNull(platformTrade)){
//                if(Objects.isNull(trade.getTradeState())){
//                    trade.setTradeState(platformTrade.getTradeState());
//                }
//
//            }
//
//            MessageMQRequest messageMQRequest = new MessageMQRequest();
//            if (!AuditState.REJECTED.equals(trade.getTradeState().getAuditState())) {
//                Map<String, Object> map = new HashMap<>();
//                map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
//                map.put("id", trade.getId());
////                map.put("activityType",trade.getActivityType());
////                log.info("======================= activityType :{}===========================",trade.getActivityType());
//                if (AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
//                    messageMQRequest.setNodeCode(OrderProcessType.ORDER_COMMIT_SUCCESS.getType());
//                    map.put("node", OrderProcessType.ORDER_COMMIT_SUCCESS.toValue());
//                } else {
//                    messageMQRequest.setNodeCode(OrderProcessType.ORDER_COMMIT_SUCCESS_CHECK.getType());
//                    map.put("node", OrderProcessType.ORDER_COMMIT_SUCCESS_CHECK.toValue());
//                }
//                messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
//                messageMQRequest.setParams(Lists.newArrayList(trade.getTradeItems().get(0).getSkuName()));
//                messageMQRequest.setPic(trade.getTradeItems().get(0).getPic());
//                messageMQRequest.setRouteParam(map);
//                messageMQRequest.setCustomerId(trade.getBuyer().getId());
//                messageMQRequest.setMobile(trade.getBuyer().getAccount());
//                orderProducerService.sendMessage(messageMQRequest);
//            }
//        });
        //付款后再推ERP
        if (kingdeeOpenState && false) {
//            if(trades.size() == 1){
//                mergeOrder = trades.stream().findFirst().get();
//            }
//            //是否有十件店配
//            AtomicReference<Boolean> flag = new AtomicReference<>(false);
//            if(CollectionUtils.isNotEmpty(contexts)) {
//                List<FreightTemplateDeliveryAreaVO> tenTemplateDeliveryAreaVOS = contexts.stream().filter(f -> freightTemplateDeliveryType.AREATENDELIVER.equals(f.getDestinationType()))
//                                                                                        .collect(Collectors.toList());
//                Trade validOrder = mergeOrder;
//                if (CollectionUtils.isNotEmpty(tenTemplateDeliveryAreaVOS)) {
//                    tenTemplateDeliveryAreaVOS.forEach(tt -> {
//                        if (//乡镇满十件(免费店配)
//                                (Objects.nonNull(tt) && Objects.nonNull(tt.getDestinationAreaName())
//                                        && (checkDeliveryDestination(validOrder.getConsignee().getDetailAddress(), Stream.of(tt.getDestinationAreaName()).collect(Collectors.toList()))
//                                        || checkDeliveryDestination(validOrder.getConsignee().getAddress(), Stream.of(tt.getDestinationAreaName()).collect(Collectors.toList()))))
//                        ) {
//                            flag.set(true);
//                        }
//                    });
//                }
//            }
//            if (flag.get()) {
//                //加入缓存表中
//                logger.info("TradeService.createBatch cache orderId:{}",mergeOrder.getId());
//                TradeCachePushKingdeeOrder cachePushKingdeeOrder = TradeCachePushKingdeeOrder.builder()
//                                                                                             .orderCode(mergeOrder.getId())
//                                                                                             .orderStatus(0)
//                                                                                             .pushStatus(0)
//                                                                                             .createTime(LocalDateTime.now())
//                                                                                             .updateTime(LocalDateTime.now())
//                                                                                             .build();
//                tradeCachePushKingdeeOrderRepository.save(cachePushKingdeeOrder);
//            }
            //向金蝶push订单数据 需要改为异步
//            if (!orderkingdeeCheck(mergeOrder)) {
//                throw new SbcRuntimeException("K-020010");
//            }
//            logger.info("TradeService.createBatch tradeId:{}", mergeOrder.getId());
//            orderProducerService.kingdeePushOrder(mergeOrder, 1 * 10L);
            trades.stream().forEach(trade -> {
                pushSaleOrderToErp(trade);
            });
        }

        //ares埋点-订单-用户创建订单(同时发送多笔订单)
//        orderAresService.dispatchFunction("addOrderList", trades);
        return resultList;
    }

    public void pushSaleOrderToErp(Trade trade) {
        logger.info("TradeService.createBatch tradeId:{}", trade.getId());
        if(!orderCommonService.erpCanTrade(trade)){
            return;
        }
        if (Objects.nonNull(trade.getActivityType()) && trade.getActivityType().equals(TradeActivityTypeEnum.STOCKUP.toActivityType())) {
            if (StringUtils.isEmpty(trade.getLogistics()) || trade.getLogistics().equals("01")) {
                log.info("TradeService.createBatch logistics:{}", trade.getId());
                orderProducerService.kingdeePushOrder(trade.getId(), 0L);
            }
        } else {

            log.info("TradeService.createBatch shoppingCart tid:{}", trade.getId());
            orderProducerService.shoppingCartKingdeePushOrder(trade.getId(), 0L);
        }
    }

    /**
     * 余额修改
     * - 订单生成余额扣除
     * - 订单取消, 自动取消, 余额增加
     *
     * @param trades
     * @param increaseDeductionFlag true增加 false扣减
     */
    public void modifyWalletBalance(List<Trade> trades, Boolean increaseDeductionFlag) {
        boolean b = trades.stream().anyMatch(trade -> trade.getTradePrice().getBalancePrice() != null && trade.getTradePrice().getBalancePrice().compareTo(BigDecimal.ZERO) > 0);
        if (!b) {
            return;
        }
        Trade tradeTem = trades.stream().filter(trade -> trade.getBuyer() != null && trade.getBuyer().getId() != null).findFirst().orElseThrow(() -> new SbcRuntimeException("没有找到购买人信息, 请重新检查"));
        //用户余额信息
        CusWalletVO cusWalletVO = walletQueryProvider.getBalanceByCustomerId(WalletByCustomerIdQueryRequest.builder().customerId(tradeTem.getBuyer().getId()).build())
                .getContext().getCusWalletVO();

        log.info("=====订单信息=====>> trades:{}", JSONObject.toJSONString(trades));
        log.info("=====余额信息=====>> customerWalletVO:{}", JSONObject.toJSONString(cusWalletVO));

        // 订单总金额
        BigDecimal totalPrice = BigDecimal.ZERO;
        for (Trade trade : trades) {
            List<TradeItem> tradeItems = trade.getTradeItems();
            TradePrice tradePrice = trade.getTradePrice();
            Buyer buyer = trade.getBuyer();

            if (!(tradePrice.getBalancePrice() != null && tradePrice.getBalancePrice().compareTo(BigDecimal.ZERO) > 0)) {
                continue;
            }

            //totalPrice = totalPrice.add(tradePrice.getBalancePrice());
            totalPrice = tradePrice.getBalancePrice();

            AddWalletRecordRecordRequest request = new AddWalletRecordRecordRequest();

            //交易备注
            String tradeRemark = !increaseDeductionFlag ? WalletDetailsType.DEDUCTION_ORDER_DEDUCTION.getDesc() + "-" + trade.getId() : WalletDetailsType.INCREASE_ORDER_CANCEL.getDesc() + "-" + trade.getId();
            //备注
            String remark = !increaseDeductionFlag ? WalletDetailsType.DEDUCTION_ORDER_DEDUCTION.getDesc() + "-" + trade.getId() : WalletDetailsType.INCREASE_ORDER_CANCEL.getDesc() + "-" + trade.getId();
            //交易类型【1充值，2提现，3余额支付】
            WalletRecordTradeType tradeType = !increaseDeductionFlag ? WalletRecordTradeType.BALANCE_PAY : WalletRecordTradeType.RECHARGE;
            //收支类型 [1 收入, 2支出]
            com.wanmi.sbc.wallet.bean.enums.BudgetType budgetType = !increaseDeductionFlag ? com.wanmi.sbc.wallet.bean.enums.BudgetType.EXPENDITURE : com.wanmi.sbc.wallet.bean.enums.BudgetType.INCOME;
            //最新余额
            BigDecimal balance = !increaseDeductionFlag ? cusWalletVO.getBalance().subtract(tradePrice.getBalancePrice()) : cusWalletVO.getBalance().add(tradePrice.getBalancePrice());
            String activityType = trade.getActivityType();

            request.setTradeRemark(tradeRemark);
            request.setCustomerAccount(buyer.getAccount());
            request.setRelationOrderId(trade.getId());
            request.setTradeType(tradeType);
            request.setBudgetType(budgetType);
            request.setDealPrice(trade.getTradePrice().getBalancePrice());
            request.setRemark(remark);
//                request.setDealTime(LocalDateTime.now());
            request.setCurrentBalance(cusWalletVO.getBalance());
            request.setTradeState(com.wanmi.sbc.wallet.bean.enums.TradeStateEnum.PAID);
            request.setPayType(1);
            request.setBalance(balance);
            request.setActivityType(activityType);

            /*BaseResponse<AddWalletRecordResponse> result = walletRecordProvider.addWalletRecord(request);
            if (!result.getCode().equals(ResultCode.SUCCESSFUL)) {
                throw new SbcRuntimeException("余额执行操作失败, 请重新操作! ");
            }*/

            if (totalPrice.compareTo(BigDecimal.ZERO) > 0) {

                WalletRequest walletRequest = WalletRequest.builder()
                        .customerId(buyer.getId())
                        .expenseAmount(totalPrice)
                        .customerAccount(buyer.getAccount()).build();

                String balanceResultCode = "";
                if (!increaseDeductionFlag) {
                    //扣除余额
                    balanceResultCode = customerWalletProvider.orderByGiveStore(CustomerWalletOrderByRequest.builder()
                            .customerId(buyer.getId())
                            .customerAccount(request.getCustomerAccount())
                            .storeId(trade.getSupplier().getStoreId().toString())
                            .balance(totalPrice)
                            .relationOrderId(request.getRelationOrderId())
                            .remark(request.getRemark())
                            .tradeRemark(request.getTradeRemark())
                            .dealTime(LocalDateTime.now())
                            .walletRecordTradeType(WalletRecordTradeType.BALANCE_PAY)
                            .build()).getCode();
                }

                if (!balanceResultCode.equals(ResultCode.SUCCESSFUL)) {
                    throw new SbcRuntimeException("余额执行操作失败, 请重新操作! ");
                }
            }
        }
    }


    /**
     * 校验推送参数
     *
     * @param trade
     * @return
     */
    private Boolean orderkingdeeCheck(Trade trade) {
        if (StringUtils.isEmpty(trade.getBuyer().getAccount())) {
            logger.info("TradeService.pushSalesOrderkingdee Lack FCustId");
            return false;
        }
        if (trade.getTradePrice().getDeliveryPrice() == null) {
            logger.info("TradeService.pushSalesOrderkingdee Lack FFreight");
            return false;
        }
        if (StringUtils.isEmpty(trade.getBuyer().getEmployeeId())) {
            logger.info("TradeService.pushSalesOrderkingdee Lack FSalerId");
            return false;
        }
        if (trade.getConsignee().getProvinceId() == null) {
            logger.info("TradeService.pushSalesOrderkingdee Lack ProvinceId");
            return false;
        }
        if (trade.getConsignee().getCityId() == null) {
            logger.info("TradeService.pushSalesOrderkingdee Lack CityId");
            return false;
        }
        if (trade.getConsignee().getAreaId() == null) {
            logger.info("TradeService.pushSalesOrderkingdee Lack AreaId");
            return false;
        }
        if (StringUtils.isEmpty(trade.getConsignee().getDetailAddress())) {
            logger.info("TradeService.pushSalesOrderkingdee Lack DetailAddress");
            return false;
        }
        if (trade.getDeliverWay() == null) {
            logger.info("TradeService.pushSalesOrderkingdee Lack DeliverWay");
            return false;
        }
        //暂时去掉销售类型订单校验，不兼容囤货
//        if (Objects.isNull(trade.getSaleType())) {
//            logger.info("TradeService.pushSalesOrderkingdee Lack SaleType");
//            return false;
//        }
        return true;
    }

    /**
     * 提交积分订单
     *
     * @param trade    积分订单
     * @param operator 操作人
     * @return 订单提交结果
     */
    @Transactional
    @LcnTransaction
    public PointsTradeCommitResult createPointsTrade(Trade trade, Operator operator) {
        PointsTradeCommitResult commitResult = null;

        //创建订单
        try {
            Trade result = createPoints(trade, operator);
            commitResult = new PointsTradeCommitResult(result.getId(), result.getTradePrice().getPoints());
        } catch (Exception e) {
            log.error("commit points trade error,trade={}", trade, e);
            if (e instanceof SbcRuntimeException) {
                throw e;
            } else {
                throw new SbcRuntimeException("K-020010");
            }
        }

        // 增加客户积分明细 扣除积分
        customerPointsDetailSaveProvider.add(CustomerPointsDetailAddRequest.builder()
                .customerId(trade.getBuyer().getId())
                .type(OperateType.DEDUCT)
                .serviceType(PointsServiceType.POINTS_EXCHANGE)
                .points(trade.getTradePrice().getPoints())
                .content(JSONObject.toJSONString(Collections.singletonMap("orderNo", trade.getId())))
                .build());

        // 扣除积分商品库存
        pointsGoodsSaveProvider.minusStock(PointsGoodsMinusStockRequest.builder().stock(trade.getTradeItems().get(0)
                .getNum()).pointsGoodsId(trade.getTradeItems().get(0).getPointsGoodsId()).build());

        //ares埋点-订单-用户创建订单(同时发送多笔订单)
        orderAresService.dispatchFunction("addOrderList", trade);
        return commitResult;
    }

    /**
     * 创建订单和订单组
     */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> createBatchWithGroup(List<Trade> trades, TradeGroup tradeGroup, Operator operator) {
        // 1.保存订单及订单组信息
        if (StringUtils.isEmpty(tradeGroup.getId())) {
            tradeGroup.setId(UUIDUtil.getUUID());
        }

        tradeGroupService.addTradeGroup(tradeGroup);
        trades.forEach(trade -> trade.setGroupId(tradeGroup.getId()));
        List<TradeCommitResult> resultList = this.createBatch(trades, operator);
        //todo 这里可以异步
        // 2.修改优惠券状态
        List<CouponCodeBatchModifyDTO> dtoList = new ArrayList<>();
        TradeCouponVO tradeCoupon = tradeGroup.getCommonCoupon();
        dtoList.add(CouponCodeBatchModifyDTO.builder()
                .couponCodeId(tradeCoupon.getCouponCodeId())
                .orderCode(null)
                .useStatus(DefaultFlag.YES).build());
        couponCodeProvider.batchModify(CouponCodeBatchModifyRequest.builder().modifyDTOList(dtoList).build());
        return resultList;
    }

    /**
     * 订单改价
     *
     * @param request  包含修改后的订单总价和运费价格
     * @param tid      订单编号
     * @param operator 操作人信息
     */
    @Transactional
    @LcnTransaction
    public void changePrice(TradePriceChangeRequest request, String tid, Operator operator) {
        //1.获取旧订单信息,并校验当前状态是否可修改
        Trade trade = this.detail(tid);
        if (trade.getTradeState().getPayState() == PayState.PAID) {
            throw new SbcRuntimeException("K-050212");
        }
        BaseResponse<PayTradeRecordCountResponse> response = payQueryProvider.getTradeRecordCountByOrderOrParentCode(new
                TradeRecordCountByOrderOrParentCodeRequest(trade.getId(), trade.getParentId()));
        long tradeRecordCount = response.getContext().getCount();
        if (tradeRecordCount > 0) {
            throw new SbcRuntimeException("K-050211");
        }

        //2.校验客户有效性
        verifyService.verifyCustomer(trade.getBuyer().getId());
        //3.改价
        TradePrice tradePrice = trade.getTradePrice();
        BigDecimal oldDeliveryPrice = tradePrice.getDeliveryPrice() == null ? BigDecimal.ZERO : tradePrice
                .getDeliveryPrice();
        //3.1 重置特价和运费
        tradePrice.setDeliveryPrice(request.getFreight());
        tradePrice.setPrivilegePrice(request.getTotalPrice());
        tradePrice.setSpecial(true);
        tradePrice.setEnableDeliveryPrice(request.getFreight() != null);
        BigDecimal freight = request.getFreight() == null ? BigDecimal.ZERO : request.getFreight();
        //3.2 重置原价 原始商品总额+新运费
        tradePrice.setOriginPrice(tradePrice.getOriginPrice().subtract(oldDeliveryPrice).add(freight));
        //3.3 重置均摊价和应付金额
        tradeItemService.clacSplitPrice(trade.getTradeItems(), tradePrice.getPrivilegePrice());
        // 3.4. 已计算好均摊价后，如果有分销商品，重新赋值分销商品的实付金额
        if (CollectionUtils.isNotEmpty(trade.getDistributeItems())) {
            // 如果有分销商品
            this.reCalcDistributionItem(trade);
        }
        tradePrice.setTotalPrice(tradePrice.getPrivilegePrice().add(freight));//应付金额 = 特价+运费

        //4.在s2b模式下 如果存在支付单，删除，创建一笔新的支付单
        if (osUtil.isS2b() && trade.getTradeState().getAuditState().equals(AuditState.CHECKED)) {
            if (Objects.nonNull(trade.getPayOrderId())) {
                payOrderService.deleteByPayOrderId(trade.getPayOrderId());
                receivableService.deleteReceivables(Collections.singletonList(trade.getPayOrderId()));
            }
            //创建支付单
            Optional<PayOrder> optional = payOrderService.generatePayOrderByOrderCode(
                    new PayOrderGenerateRequest(trade.getId(),
                            trade.getBuyer().getId(),
                            trade.getTradePrice().getTotalPrice(),
                            trade.getTradePrice().getPoints(),
                            PayType.valueOf(trade.getPayInfo().getPayTypeName()),
                            trade.getSupplier().getSupplierId(),
                            trade.getTradeState().getCreateTime(),
                            OrderType.NORMAL_ORDER));

            trade.getTradeState().setPayState(PayState.NOT_PAID);
            optional.ifPresent(payOrder -> trade.setPayOrderId(payOrder.getPayOrderId()));
        }

        //7.状态变更,订单修改入库
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(trade.getId())
                .operator(operator)
                .data(trade)
                .event(TradeEvent.REMEDY)
                .build();
        tradeFSMService.changeState(stateRequest);
    }

    /**
     * 订单改价后，重新计算分销商品的佣金
     *
     * @param trade
     */
    public void reCalcDistributionItem(Trade trade) {
        // 如果有分销商品
        IteratorUtils.zip(trade.getDistributeItems(), trade.getTradeItems(),
                (collect1, levels1) -> collect1.getGoodsInfoId().equals(levels1.getSkuId()),
                (collect2, levels2) -> {
                    collect2.setActualPaidPrice(levels2.getSplitPrice());
                    collect2.setCommission(levels2.getSplitPrice().multiply(levels2.getCommissionRate()));
                    levels2.setDistributionCommission(collect2.getCommission());
                }
        );
        // 重新计算订单总佣金
        BigDecimal totalCommission = trade.getDistributeItems().stream().map(item -> item.getCommission())
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        trade.setCommission(totalCommission);
    }

    /**
     * 订单改价
     *
     * @param request  包含修改后的订单总价和运费价格
     */
    @Transactional
    @LcnTransaction
    public BaseResponse changeItemPrice(TradeModifyPriceRequest request) {
        String tid = request.getTid();
        Operator operator = request.getOperator();
        //1.获取旧订单信息,并校验当前状态是否可修改
        Trade trade = this.detail(tid);
        if(Objects.isNull(trade)){
            return BaseResponse.error("订单["+tid+"]不存在");
        }
        if (trade.getTradeState().getPayState() == PayState.NOT_PAID && (trade.getTradeState().getFlowState()==FlowState.AUDIT || trade.getTradeState().getFlowState()==FlowState.INIT)) {

        }else{
            return BaseResponse.error("订单当前状态不允许修改价格");
        }
        //存在支付记录不允许改价
        BaseResponse<PayTradeRecordCountResponse> response = payQueryProvider.getTradeRecordCountByOrderOrParentCode(new
                TradeRecordCountByOrderOrParentCodeRequest(trade.getId(), trade.getParentId()));
        long tradeRecordCount = response.getContext().getCount();
        if (tradeRecordCount > 0) {
            return BaseResponse.error("存在已支付的记录，不允许修改");
        }

        //2.校验客户有效性
        verifyService.verifyCustomer(trade.getBuyer().getId());

        ///3.改价订单原下单数据
        List<TradeItem> dbItemsData = trade.getTradeItems();
        List<TradeItemDTO> changeedTradeItems = request.getTradeConfirmItemDTO().getTradeItems();
        boolean canChanged = false;
        for(TradeItemDTO tradeItemDTO : changeedTradeItems){
            for(TradeItem dbItem :dbItemsData){
                if(dbItem.getOid().equals(tradeItemDTO.getOid()) && dbItem.getSkuId().equals(tradeItemDTO.getSkuId()) && dbItem.getDevanningId().equals(tradeItemDTO.getDevanningId())){
                    dbItem.setPrice(tradeItemDTO.getChangedPrice());
                    dbItem.setChangedPrice(tradeItemDTO.getChangedPrice());
                    BigDecimal itemsGoodsAmount = dbItem.getChangedPrice().multiply(dbItem.getBNum());
                    if(CollectionUtils.isNotEmpty(dbItem.getMarketingSettlements())){
                        BigDecimal goodsLeveprice = dbItem.getLevelPrice().multiply(dbItem.getBNum());
                        for(TradeItem.MarketingSettlement marketingSettlement:dbItem.getMarketingSettlements()) {
                            BigDecimal marketAmount = goodsLeveprice.subtract(marketingSettlement.getSplitPrice());//商品分摊的营销
                            itemsGoodsAmount = itemsGoodsAmount.subtract(marketAmount);//减去优惠券分摊金额
                        }
                    }

                    if(CollectionUtils.isNotEmpty(dbItem.getCouponSettlements())){
                        for(TradeItem.CouponSettlement couponSettlement:dbItem.getCouponSettlements()) {
                            itemsGoodsAmount = itemsGoodsAmount.subtract(couponSettlement.getReducePrice());//减去优惠券分摊金额
                            couponSettlement.setSplitPrice(itemsGoodsAmount);
                        }
                    }
                    if(CollectionUtils.isNotEmpty(dbItem.getWalletSettlements())){
                        for(TradeItem.WalletSettlement walletSettlement:dbItem.getWalletSettlements()) {
                            itemsGoodsAmount = itemsGoodsAmount.subtract(walletSettlement.getReduceWalletPrice());//减去鲸币分摊金额
                            walletSettlement.setSplitPrice(itemsGoodsAmount);
                        }
                    }
                    dbItem.setSplitPrice(itemsGoodsAmount);
                    if(dbItem.getSplitPrice().compareTo(BigDecimal.ZERO)<1){
                        return BaseResponse.error("改价后商品["+dbItem.getSkuName()+"]实付要大于0");
                    }
                    dbItem.setPriceChanged(1);
                    canChanged = true;
                    break;
                }
            }
        }
        if(!canChanged){
            logger.info("改价失败.[{}]",JSONObject.toJSONString(request));
            return BaseResponse.error("改价失败，不存在需要改价的商品");
        }
        trade.getTradePrice().setGoodsPrice(BigDecimal.ZERO);
        trade.getTradeItems().forEach(item->{
            BigDecimal buyItemPrice = item.getPrice().multiply(item.getBNum());
            trade.getTradePrice().setGoodsPrice(trade.getTradePrice().getGoodsPrice().add(buyItemPrice));
        });
        BigDecimal reduce = trade.getTradeItems().stream().map(TradeItem::getSplitPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal blancePrice = trade.getTradePrice().getBalancePrice()==null?BigDecimal.ZERO:trade.getTradePrice().getBalancePrice();
        trade.getTradePrice().setTotalPrice(reduce.add(trade.getTradePrice().getPackingPrice()).add(trade.getTradePrice().getDeliveryPrice()).add(blancePrice));
        //4.在s2b模式下 如果存在支付单，删除，创建一笔新的支付单
        if (osUtil.isS2b() && trade.getTradeState().getAuditState().equals(AuditState.CHECKED)) {
            createPayOrder(trade);
        }
        //5.增加订单修改记录
        trade.appendTradeEventLog(new TradeEventLog(operator, "订单", "修改商品成交单价", LocalDateTime.now()));

        //6.状态变更,订单修改入库
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(trade.getId())
                .operator(operator)
                .data(trade)
                .event(TradeEvent.REMEDY)
                .build();
        tradeFSMService.changeState(stateRequest);
        //7.改价
        inventoryDetailSamountTradeProvider.updateGoodsShareMoney(InventoryDetailSamountTradeRequest.builder().tradeItemVOS(KsBeanUtil.convert(trade.getTradeItems(), TradeItemVO.class)).oid(trade.getId()).build());
        return BaseResponse.SUCCESSFUL();
    }

    /**
     * 修改订单
     *
     * @param request
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public void remedy(TradeRemedyRequest request, Operator operator, StoreInfoResponse storeInfoResponse) {
        //1.获取旧订单信息,并校验当前状态是否可修改
        Trade trade = this.detail(request.getTradeId());
        if (trade.getTradeState().getPayState() == PayState.PAID) {
            throw new SbcRuntimeException("K-050212");
        }

        BaseResponse<PayTradeRecordCountResponse> response = payQueryProvider.getTradeRecordCountByOrderOrParentCode(new
                TradeRecordCountByOrderOrParentCodeRequest(trade.getId(), trade.getParentId()));
        long tradeRecordCount = response.getContext().getCount();
        if (tradeRecordCount > 0) {
            throw new SbcRuntimeException("K-050211");
        }

        //2.校验客户有效性
        verifyService.verifyCustomer(trade.getBuyer().getId());

        //批量新增旧订单商品，赠品库存
        List<GoodsInfoPlusStockDTO> plusStockList = trade.getTradeItems().stream().map(i -> {
            GoodsInfoPlusStockDTO dto = new GoodsInfoPlusStockDTO();
            dto.setStock(BigDecimal.valueOf(i.getNum()));
            dto.setGoodsInfoId(i.getSkuId());
            return dto;
        }).collect(Collectors.toList());

        trade.getGifts().forEach(i -> {
            GoodsInfoPlusStockDTO dto = new GoodsInfoPlusStockDTO();
            dto.setStock(BigDecimal.valueOf(i.getNum()));
            dto.setGoodsInfoId(i.getSkuId());
            plusStockList.add(dto);
        });

        if (CollectionUtils.isNotEmpty(plusStockList)) {
            GoodsInfoBatchPlusStockRequest plusStockRequest = GoodsInfoBatchPlusStockRequest.builder()
                    .stockList(plusStockList).build();
            goodsInfoProvider.batchPlusStock(plusStockRequest);
        }


        //4.校验与包装待修改的订单信息
        trade.getSupplier().setFreightTemplateType(storeInfoResponse.getFreightTemplateType());
        trade = this.wrapperBackendRemedyTrade(trade, operator, request);

        //5.减商品,赠品库存
        verifyService.subSkuListStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(),trade);
        verifyService.subSkuListStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(),trade);

        //6.在s2b模式下 如果存在支付单，删除，创建一笔新的支付单
        if (osUtil.isS2b() && trade.getTradeState().getAuditState().equals(AuditState.CHECKED)) {
            if (Objects.nonNull(trade.getPayOrderId())) {
                this.createPayOrder(trade);
            }
        }

        //7.状态变更,订单修改入库
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(trade.getId())
                .operator(operator)
                .data(trade)
                .event(TradeEvent.REMEDY)
                .build();
        tradeFSMService.changeState(stateRequest);
    }


    /**
     * 修改订单-部分修改
     *
     * @param request           修改订单请求对象
     * @param operator          操作人
     * @param storeInfoResponse 店铺信息
     */
    @Transactional
    @LcnTransaction
    public void remedyPart(TradeRemedyRequest request, Operator operator, StoreInfoResponse storeInfoResponse) {
        //1.获取旧订单信息,并校验当前状态是否可修改
        Trade trade = this.detail(request.getTradeId());
        if (trade.getTradeState().getPayState() == PayState.PAID) {
            throw new SbcRuntimeException("K-050212");
        }

        BaseResponse<PayTradeRecordCountResponse> response = payQueryProvider.getTradeRecordCountByOrderOrParentCode(new
                TradeRecordCountByOrderOrParentCodeRequest(trade.getId(), trade.getParentId()));
        long tradeRecordCount = response.getContext().getCount();
        if (tradeRecordCount > 0) {
            throw new SbcRuntimeException("K-050211");
        }

        // 2.校验客户有效性
//        verifyService.verifyCustomer(trade.getBuyer().getId());

        // 3.将新数据设置到旧订单trade对象中（包括收货信息、发票信息、特价、运费信息）
        request.getInvoice().setOrderInvoiceId(
                Objects.nonNull(trade.getInvoice()) ?
                        trade.getInvoice().getOrderInvoiceId() : null);
        trade.setConsignee(this.wrapperConsignee(request.getConsigneeId(), request.getConsigneeAddress(),
                request.getConsigneeUpdateTime(), request.getConsignee()));
        //发票信息(必须在收货地址下面-因为使用临时发票收货地,却未填写的时候,将使用订单商品收货地址作为发票收货地)
        trade.setInvoice(this.wrapperTradeInvoice(request.getInvoice(), request.getInvoiceConsignee(),
                trade.getConsignee()));
        trade.setDeliverWay(request.getDeliverWay());
        if (request.getPayType() != null) {
            trade.setPayInfo(PayInfo.builder()
                    .payTypeId(String.format("%d", request.getPayType().toValue()))
                    .payTypeName(request.getPayType().name())
                    .desc(request.getPayType().getDesc())
                    .build());
        }
        trade.setBuyerRemark(request.getBuyerRemark());
        trade.setSellerRemark(request.getSellerRemark());
        trade.setEncloses(request.getEncloses());
        trade.setRequestIp(operator.getIp());
        TradePrice tradePrice = trade.getTradePrice();
        TradePrice newTradePrice = request.getTradePrice();
        tradePrice.setPrivilegePrice(newTradePrice.getPrivilegePrice());
        tradePrice.setEnableDeliveryPrice(newTradePrice.isEnableDeliveryPrice());
        tradePrice.setTotalPrice(tradePrice.getTotalPrice().subtract(tradePrice.getDeliveryPrice()));
        tradePrice.setDeliveryPrice(newTradePrice.getDeliveryPrice());

        // 4.如果取消特价的情况，则要重新计算totalPrice和tradeItem的splitPrice
        if (newTradePrice.isSpecial() == false && tradePrice.isSpecial() == true) {
            trade.getTradeItems().forEach(tradeItem -> {
                BigDecimal splitPrice = tradeItem.getLevelPrice().multiply(
                        new BigDecimal(tradeItem.getNum())).setScale(2, BigDecimal.ROUND_HALF_UP);
                List<TradeItem.MarketingSettlement> marketings = tradeItem.getMarketingSettlements();
                List<TradeItem.CouponSettlement> coupons = tradeItem.getCouponSettlements();
                if (!CollectionUtils.isEmpty(coupons)) {
                    splitPrice = coupons.get(coupons.size() - 1).getSplitPrice();
                } else if (!CollectionUtils.isEmpty(marketings)) {
                    splitPrice = marketings.get(marketings.size() - 1).getSplitPrice();
                }
                tradeItem.setSplitPrice(splitPrice);
            });
            BigDecimal totalPrice = trade.getTradeItems().stream()
                    .map(TradeItem::getSplitPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
            tradePrice.setTotalPrice(totalPrice);
        }
        tradePrice.setSpecial(newTradePrice.isSpecial());

        // 5.计算运费
        trade.getSupplier().setFreightTemplateType(storeInfoResponse.getFreightTemplateType());

        BigDecimal deliveryPrice = tradePrice.getDeliveryPrice();
        if (tradePrice.getDeliveryPrice() == null) {
            deliveryPrice = this.calcTradeFreight(trade.getConsignee(), trade.getSupplier(), trade.getDeliverWay(),
                    tradePrice.getTotalPrice(), trade.getTradeItems(), trade.getGifts());
            tradePrice.setDeliveryPrice(deliveryPrice);
        }

        // 6.计算订单总价
        tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(deliveryPrice));
        if (tradePrice.isSpecial()) {
            trade.getTradeItems().forEach(tradeItem ->
                    tradeItem.setSplitPrice(tradeItem.getLevelPrice().multiply(
                            new BigDecimal(tradeItem.getNum())).setScale(2, BigDecimal.ROUND_HALF_UP))
            );
            // 6.1 计算特价均摊价
            tradeItemService.clacSplitPrice(trade.getTradeItems(), tradePrice.getPrivilegePrice());

            // 6.2 已计算好均摊价后，如果有分销商品，重新赋值分销商品的实付金额
            if (CollectionUtils.isNotEmpty(trade.getDistributeItems())) {
                // 如果有分销商品
                this.reCalcDistributionItem(trade);
            }
            tradePrice.setTotalPrice(tradePrice.getPrivilegePrice().add(deliveryPrice));//应付金额 = 特价+运费
        } else {
            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(deliveryPrice));//应付金额 = 应付+运费
        }

        // 7.在s2b模式下 如果存在支付单，删除，创建一笔新的支付单
        if (osUtil.isS2b() && trade.getTradeState().getAuditState().equals(AuditState.CHECKED)) {
            if (Objects.nonNull(trade.getPayOrderId())) {
                this.createPayOrder(trade);
            }
        }

        //8.状态变更,订单修改入库
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(trade.getId())
                .operator(operator)
                .data(trade)
                .event(TradeEvent.REMEDY)
                .build();
        tradeFSMService.changeState(stateRequest);
    }


    /**
     * 取消订单
     *
     * @param stid
     * @param operator
     */
    @Transactional(rollbackFor = Exception.class)
    @LcnTransaction
    public void cancel(String  stid, Operator operator) {
        String[] split = stid.split(",");
        ArrayList<String> list1 = new ArrayList<String>(split.length);
        Collections.addAll(list1,split);
        list1.forEach(tid->{
            Trade trade = detail(tid);
            Platform platform = operator.getPlatform();
            if (!Platform.SUPPLIER.equals(platform) && !trade.getBuyer().getId().equals(operator.getUserId())) {
                throw new SbcRuntimeException("K-050100", new Object[]{tid});
            }
            if (trade.getTradeState().getFlowState() == FlowState.VOID) {
                throw new SbcRuntimeException("K-050202");
            }
            if (trade.getTradeState().getPayState() == PayState.PAID) {
                throw new SbcRuntimeException("K-050202");
            }
            if (trade.getTradeState().getDeliverStatus() != DeliverStatus.NOT_YET_SHIPPED) {
                throw new SbcRuntimeException("K-050203");
            }
            if (trade.getTradeState().getAuditState() == AuditState.CHECKED) {
                //删除支付单
                payOrderService.deleteByPayOrderId(trade.getPayOrderId());
            }

            //提货订单
            if (TradeActivityTypeEnum.STOCKUP.toActivityType().equals(trade.getActivityType())) {
                //查询关联表中的数据
                List<String> skuIds = trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
                List<PileStockRecordAttachment> stockRecordAttachmentList = pileStockRecordAttachmentRepostory.findStockRecordTidAndSkuid(trade.getId(), skuIds);
                //查询囤货记录表
                List<Long> stockRecordId = stockRecordAttachmentList.stream().map(PileStockRecordAttachment::getStockRecordId).collect(Collectors.toList());
                List<PileStockRecord> stockRecordList = pileStockRecordRepository.findAllById(stockRecordId);
                //释放囤货数量
                String customerId = trade.getBuyer().getId();
                List<TradeItem> tradeItems = trade.getTradeItems();
                tradeItems.stream().forEach(tradeItem -> {
                    String spuId = tradeItem.getSpuId();
                    String skuId = tradeItem.getSkuId();
                    //购买数量
                    Long num = tradeItem.getNum();
                    //通过spuId+skuId+用户id查询囤货表的数据看看是不是有多个，有多个就根据时间减他妈的
                    List<PilePurchase> pilePurchases = pilePurchaseRepository.queryPilePurchase(customerId, spuId, skuId);
                    if (CollectionUtils.isNotEmpty(pilePurchases)) {
                        PilePurchase purchase = pilePurchases.stream().findFirst().get();
                        purchase.setGoodsNum(purchase.getGoodsNum() + num);
                        //加完以后
                        pilePurchaseRepository.save(purchase);
                    }
                });

                //加库存
                addSkuStock(trade);
                //扣除乡镇件库存
                if (trade.getVillageFlag()) {
                    historyTownShipOrderService.reduceTownStock(trade.getId());
                    historyTownShipOrderService.CancelTownStock(trade.getId());
//                verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
//                verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
                }
                //状态变更
                StateRequest stateRequest = StateRequest
                        .builder()
                        .tid(trade.getId())
                        .operator(operator)
                        .event(TradeEvent.VOID)
                        .data("用户取消订单")
                        .build();
                tradeFSMService.changeState(stateRequest);

//            //推送给wms取消退单
//            if (wmsAPIFlag) {
//                //拼团订单取消拼团时不需要推送
//                if (!(Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag()) && AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
//                    if (!pushCancelOrder(trade)) {
//                        throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "提货订单取消失败，仓库已拣货！");
//                    }
//                }
//            }
                if (stockRecordAttachmentList.size() == 0) {
                    List<PileStockRecord> pileStockRecordList = new ArrayList<>();
                    trade.getTradeItems().stream().forEach(tradeItem -> {
                        String spuId = tradeItem.getSpuId();
                        String skuId = tradeItem.getSkuId();
                        //加入囤货流水
                        BigDecimal realPay = tradeItem.getSplitPrice().divide(new BigDecimal(tradeItem.getNum()), 2, BigDecimal.ROUND_HALF_UP);
                        PileStockRecord pileStockRecord = PileStockRecord.builder()
                                .goodsId("Q")
                                .goodsInfoId(skuId)
                                .customerId(customerId)
                                .stockRecordNum(tradeItem.getNum())
                                .stockRecordRemainingNum(0L)
                                .stockRecordPrice(realPay)
                                .orderCode(trade.getId())
                                .isUse(0L)
                                .createTime(LocalDateTime.now())
                                .updateTime(LocalDateTime.now())
                                .build();
                        pileStockRecordList.add(pileStockRecord);
                    });
                    pileStockRecordRepository.saveAll(pileStockRecordList);
                } else {
                    stockRecordAttachmentList.stream().forEach(pileStockRecordAttachment -> {
                        stockRecordList.stream().forEach(pileStockRecord -> {
                            if (pileStockRecordAttachment.getStockRecordId().equals(pileStockRecord.getStockRecordId()) && pileStockRecordAttachment.getTid().equals(trade.getId())) {
                                Long num = pileStockRecord.getStockRecordRemainingNum();
                                Long attachment = pileStockRecordAttachment.getNum();
                                pileStockRecord.setStockRecordRemainingNum(num - attachment);
                                pileStockRecord.setUpdateTime(LocalDateTime.now());
                                if (pileStockRecord.getIsUse() == 1 && (pileStockRecord.getStockRecordNum() - pileStockRecord.getStockRecordRemainingNum()) > 0) {
                                    pileStockRecord.setIsUse(0L);
                                }
                            }
                        });
                    });
                    pileStockRecordRepository.saveAll(stockRecordList);
                }

            } else {//购物车订单
                if (kingdeeOpenState) {//判断是否开启新金蝶
                    if (!cancelOrder(trade)) {
                        throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败,请稍后重试");
                    }
                    //是否在满十件记录
                    TradeCachePushKingdeeOrder tradeCachePushKingdeeOrder = tradeCachePushKingdeeOrderRepository.findByCachePushKingdeeOrder(tid);
                    if (Objects.nonNull(tradeCachePushKingdeeOrder)) {
                        tradeCachePushKingdeeOrderRepository.updateCachePushKingdeeOrderStatus(LocalDateTime.now(), tradeCachePushKingdeeOrder.getPushKingdeeId());
                    } else {
                        if (wmsAPIFlag) {
                            //拼团订单取消拼团时不需要推送
                            if (!(Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag()) && AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
                                log.info("pushCancelOrder(trade)------------->" + JSONObject.toJSONString(trade));
                                //线下订单未支付已推送到WMS,取消时也需要推送WMS
                                if (!pushCancelOrder(trade)) {
                                    throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败,请稍后重试");
                                }
                            }
                        }
                    }
                }
                //是否是秒杀抢购商品订单
                if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
                    flashSaleGoodsOrderAddStock(trade);
                } else {
                    //扣除乡镇件库存
                    if (trade.getVillageFlag()) {
                        historyTownShipOrderService.reduceTownStock(trade.getId());
                        historyTownShipOrderService.CancelTownStock(trade.getId());
//                    verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
//                    verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
                    } else {
                        //释放库存
                        addSkuStock(trade);
                    }
                    //释放营销限购库存
                    this.calMarketGoodsNum(trade.getTradeItems(), true);
                }


                //恢复可提商品库存
                trade.getTradeItems().forEach(item -> {
                    log.info("恢复可提商品库存----------->" + JSONObject.toJSONString(item.getPickGoodsList()));
                    if (CollectionUtils.isNotEmpty(item.getPickGoodsList())) {
                        item.getPickGoodsList().forEach(var -> {
                            NewPileTrade detail = newPileTradeService.detail(var.getNewPileOrderNo());
                            if (detail.getTradeState().getFlowState().equals(NewPileFlowState.COMPLETED)) {
                                detail.getTradeState().setFlowState(NewPileFlowState.PICK_PART);
                                newPileTradeService.updateTrade(detail);
                            }
                            goodsPickStockRepository.addStockByGoodsInfoIdNewPileTradeNo(var.getNum(), var.getGoodsInfoId(), var.getNewPileOrderNo());
                        });
                    }
                });
                //恢复可提商品金额
                inventoryDetailSamountProvider.updateInventoryByTakeIdBack(InventoryDetailSamountRequest.builder().takeId(trade.getId()).build());

                if (!trade.getTradeState().getFlowState().equals(FlowState.VOID)) {
                    //状态变更
                    StateRequest stateRequest = StateRequest
                            .builder()
                            .tid(trade.getId())
                            .operator(operator)
                            .event(TradeEvent.VOID)
                            .data("用户取消订单")
                            .build();
                    tradeFSMService.changeState(stateRequest);
                }

                // 退优惠券
                returnCoupon(tid);
                log.info("退单错误========1");
                //取消拼团订单
                grouponOrderService.cancelGrouponOrder(trade);
                log.info("退单错误========2");
                // 取消供应商订单
                providerTradeService.providerCancel(tid, operator, false);
                log.info("退单错误========4");
                //DONE: 退款开关，取消囤货提货订单：用户取消订单
                if (trade.getActivityType().equals(TradeActivityTypeEnum.NEWPICKTRADE.toActivityType())) {
                    RefundFactory.getTradeRefundImpl(RefundFactory.TradeRefundType.NEW_PICK_CANCEL)
                            .refund(trade, null);
                } else {
                    RefundFactory.getTradeRefundImpl(RefundFactory.TradeRefundType.TRADE_CANCEL)
                            .refund(trade, null);
                }

            }
            updateStatusForTradeCancel(trade);
        });
    }


    /**
     * 订单审核
     *
     * @param tid
     * @param auditState 审核 | 驳回
     * @param reason     驳回原因，用于审核驳回
     * @param operator   操作人
     */
    @Transactional
    @LcnTransaction
    public void audit(String tid, AuditState auditState, String reason, Operator operator) {
        if (operator.getPlatform() != Platform.BOSS && operator.getPlatform() != Platform.SUPPLIER &&
                operator.getPlatform() != Platform.PLATFORM) {
            throw new SbcRuntimeException("K-000014");
        }

        //订单驳回释放库存
        Trade trade = detail(tid);
//        if (trade.getTradeState().getAuditState() != AuditState.NON_CHECKED) {
//            throw new SbcRuntimeException("K-050316");
//        }
        if (AuditState.CHECKED.equals(auditState)
                && isLogistics(trade.getDeliverWay())
                && (Objects.isNull(trade.getLogisticsCompanyInfo())
                || StringUtils.isBlank(trade.getLogisticsCompanyInfo().getId()))) {
            throw new SbcRuntimeException("K-180002");
        }
        //查询关联表中的数据
        List<String> skuIds = trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
        if (auditState == AuditState.REJECTED) {
            if (Objects.nonNull(trade) && trade.getActivityType().equals(TradeActivityTypeEnum.STOCKUP.toActivityType())) {
                List<PileStockRecordAttachment> stockRecordAttachmentList = pileStockRecordAttachmentRepostory.findStockRecordTidAndSkuid(trade.getId(), skuIds);
                //查询囤货记录表
                List<Long> stockRecordId = stockRecordAttachmentList.stream().map(PileStockRecordAttachment::getStockRecordId).collect(Collectors.toList());
                List<PileStockRecord> stockRecordList = pileStockRecordRepository.findAllById(stockRecordId);
                //释放囤货数量
                String customerId = trade.getBuyer().getId();
                List<TradeItem> tradeItems = trade.getTradeItems();
                List<PileStockRecord> pileStockRecordList = new ArrayList<>();
                tradeItems.stream().forEach(tradeItem -> {
                    String spuId = tradeItem.getSpuId();
                    String skuId = tradeItem.getSkuId();
                    //购买数量
                    Long num = tradeItem.getNum();
                    //通过spuId+skuId+用户id查询囤货表的数据看看是不是有多个，有多个就根据时间减他妈的
                    List<PilePurchase> pilePurchases = pilePurchaseRepository.queryPilePurchase(customerId, spuId, skuId);
                    if (CollectionUtils.isNotEmpty(pilePurchases)) {
                        PilePurchase purchase = pilePurchases.stream().findFirst().get();
                        purchase.setGoodsNum(purchase.getGoodsNum() + num);
                        //加完以后
                        pilePurchaseRepository.save(purchase);
                        //关联表没有数据
                        if (stockRecordAttachmentList.size() == 0) {
                            //加入囤货流水
                            BigDecimal realPay = tradeItem.getSplitPrice().divide(new BigDecimal(tradeItem.getNum()), 2, BigDecimal.ROUND_HALF_UP);
                            PileStockRecord pileStockRecord = PileStockRecord.builder()
                                    .goodsId("Q")
                                    .goodsInfoId(skuId)
                                    .customerId(customerId)
                                    .stockRecordNum(tradeItem.getNum())
                                    .stockRecordRemainingNum(0L)
                                    .stockRecordPrice(realPay)
                                    .orderCode(trade.getId())
                                    .isUse(0L)
                                    .createTime(LocalDateTime.now())
                                    .updateTime(LocalDateTime.now())
                                    .build();
                            pileStockRecordList.add(pileStockRecord);
                        }
                    }
                });
                if (stockRecordAttachmentList.size() == 0 && pileStockRecordList.size() > 0) {
                    pileStockRecordRepository.saveAll(pileStockRecordList);
                } else {
                    //通过关联表，添加囤货数量
                    stockRecordAttachmentList.stream().forEach(pileStockRecordAttachment -> {
                        stockRecordList.stream().forEach(pileStockRecord -> {
                            if (pileStockRecordAttachment.getStockRecordId().equals(pileStockRecord.getStockRecordId())) {
                                Long num = pileStockRecord.getStockRecordRemainingNum();
                                Long attachment = pileStockRecordAttachment.getNum();
                                pileStockRecord.setStockRecordRemainingNum(num - attachment);
                                pileStockRecord.setUpdateTime(LocalDateTime.now());
                                if (pileStockRecord.getIsUse() == 1 && (pileStockRecord.getStockRecordNum() - pileStockRecord.getStockRecordRemainingNum()) > 0) {
                                    pileStockRecord.setIsUse(0L);
                                }
                            }
                        });
                    });
                    pileStockRecordRepository.saveAll(stockRecordList);
                }
            }

            //已打回 如果是已打回状态需要将payOrder的pay_order_status转态改成1
            PayOrder payOrder = payOrderService.findPayOrderByOrderCode(tid).orElse(null);
            if (Objects.nonNull(payOrder) && Objects.nonNull(payOrder.getPayOrderId())) {
                payOrderService.updatePayOrder(payOrder.getPayOrderId(), PayOrderStatus.NOTPAY);
            }

            //驳回时吧支付状态改成未付款
            trade.getTradeState().setPayState(PayState.NOT_PAID);
            trade.getTradeState().setObsoleteReason(reason);
            //扣除乡镇件库存
            if (trade.getVillageFlag()) {
                verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
                verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
            } else {
                addSkuStock(trade);
            }
        } else {
            this.createPayOrder(trade);
        }
        //如果当前为自提订单且审核通过需要扭转订单状态
        boolean pickUpAndChecked = auditState.equals(AuditState.CHECKED) && trade.getDeliverWay().equals(DeliverWay.PICK_SELF);
        //是否是先货后款
        boolean goodsFirst = Objects.equals(auditState, AuditState.CHECKED)
                && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        PickUpRecord pickUpRecord = new PickUpRecord();
        //满足两个条件生成自提码存入数据库
        if (pickUpAndChecked) {
            if (goodsFirst) {
                pickUpRecord = this.sendPickUpCode(trade);
                trade.getTradeWareHouse().setPickUpCode(pickUpRecord.getPickUpCode());
                pickUpRecordService.add(pickUpRecord);
            }
        }
        //不是新版本提货
        if (!trade.getActivityType().equals(TradeActivityTypeEnum.NEWPICKTRADE.toActivityType())) {
            //物流状态新增最后付款时间
            if (isLogistics(trade.getDeliverWay())) {
                Boolean needTimeOut = Objects.equals(auditState, AuditState.CHECKED) &&
                        trade.getPaymentOrder() == PaymentOrder.PAY_FIRST;

                if (needTimeOut) {
                    // 先货后款情况下，查询订单是否开启订单失效时间设置
                    ConfigVO timeoutCancelConfig = tradeCacheService.getTradeConfigByType(ConfigType.ORDER_SETTING_TIMEOUT_CANCEL);
                    Integer timeoutSwitch = timeoutCancelConfig.getStatus();
                    if (timeoutSwitch == 1) {
                        // 查询设置中订单超时时间
                        Integer min =
                                Integer.valueOf(JSON.parseObject(timeoutCancelConfig.getContext()).get("hour").toString());
                        // 发送非拼团单取消订单延迟队列;
                        if (Objects.nonNull(trade.getGrouponFlag()) && !trade.getGrouponFlag()) {
                            // 线下支付默认一个小时后取消
                            if (isPayByOfflineOrIsOPK(trade)) {
                                min = 60;
                            }
                            trade.setOrderTimeOut(LocalDateTime.now().plusMinutes(min));
                            orderProducerService.cancelOrder(trade.getId(), min * 60 * 1000L);
                        }
                    }
                }
            }
        }

        tradeService.updateTrade(trade);

        if (pickUpAndChecked) {
            //订单状态扭转审核=》待自提
            StateRequest stateRequest = StateRequest
                    .builder()
                    .tid(tid)
                    .operator(operator)
                    .event(TradeEvent.PICK_UP)
                    .data(auditState)
                    .build();
            tradeFSMService.changeState(stateRequest);
        } else if (auditState == AuditState.REJECTED) {
            //审核状态是驳回修改订单状态
            //状态变更
            StateRequest stateRequest = StateRequest
                    .builder()
                    .tid(trade.getId())
                    .operator(operator)
                    .event(TradeEvent.VOID)
                    .data("审核驳回状态变更作废")
                    .build();
            tradeFSMService.changeState(stateRequest);
            //新版本提货单返还提货商品
            if (trade.getActivityType().equals(TradeActivityTypeEnum.NEWPICKTRADE.toActivityType())) {
                //恢复可提商品库存
                trade.getTradeItems().forEach(item -> {
                    log.info("恢复可提商品库存-----audit驳回------>" + JSONObject.toJSONString(item.getPickGoodsList()));
                    if (CollectionUtils.isNotEmpty(item.getPickGoodsList())) {
                        item.getPickGoodsList().forEach(var -> {
                            NewPileTrade detail = newPileTradeService.detail(var.getNewPileOrderNo());
                            if (detail.getTradeState().getFlowState().equals(NewPileFlowState.COMPLETED)) {
                                detail.getTradeState().setFlowState(NewPileFlowState.PICK_PART);
                                newPileTradeService.updateTrade(detail);
                            }
                            goodsPickStockRepository.addStockByGoodsInfoIdNewPileTradeNo(var.getNum(), var.getGoodsInfoId(), var.getNewPileOrderNo());
                        });
                    }
                });
                //恢复可提商品金额
                inventoryDetailSamountProvider.updateInventoryByTakeIdBack(InventoryDetailSamountRequest.builder().takeId(trade.getId()).build());
            }
        } else {
            //订单状态扭转
            StateRequest stateRequest = StateRequest
                    .builder()
                    .tid(tid)
                    .operator(operator)
                    .event(TradeEvent.AUDIT)
                    .data(auditState)
                    .build();
            tradeFSMService.changeState(stateRequest);
        }

        if (auditState == AuditState.REJECTED) {
            // 退优惠券
            returnCoupon(tid);
            //释放营销限购数量
            this.calMarketGoodsNum(trade.getTradeItems(), true);
        }
        //订单审核通过/未通过发送通知消息
        MessageMQRequest messageMQRequest = new MessageMQRequest();
        List<String> params = new ArrayList<>();
        params.add(trade.getTradeItems().get(0).getSkuName());
        Map<String, Object> map = new HashMap<>();
        map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
        map.put("id", trade.getId());
        if (AuditState.CHECKED.equals(auditState)) {
            messageMQRequest.setNodeCode(OrderProcessType.ORDER_CHECK_PASS.getType());
            map.put("node", OrderProcessType.ORDER_CHECK_PASS.toValue());
        } else {
            messageMQRequest.setNodeCode(OrderProcessType.ORDER_CHECK_NOT_PASS.getType());
            map.put("node", OrderProcessType.ORDER_CHECK_NOT_PASS.toValue());
            params.add(reason);
        }
        messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
        messageMQRequest.setParams(params);
        messageMQRequest.setRouteParam(map);
        messageMQRequest.setPic(trade.getTradeItems().get(0).getPic());
        messageMQRequest.setCustomerId(trade.getBuyer().getId());
        messageMQRequest.setMobile(trade.getBuyer().getAccount());
        orderProducerService.sendMessage(messageMQRequest);


        //自提码推送
        if (goodsFirst && pickUpAndChecked) {
           /* smsSendUtil.send(SmsTemplate.CUSTOMER_PASSWORD, new String[]{trade.getConsignee().getPhone()},
                    trade.getId(), pickUpRecord.getPickUpCode());*/
            this.sendPickUpMessage(trade);
        }

        if (auditState == AuditState.REJECTED) {
            if (kingdeeOpenState) {
                //取消订单，金蝶
                if (!cancelOrder(trade)) {
                    throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败");
                }
                //是否在满十件记录
                TradeCachePushKingdeeOrder tradeCachePushKingdeeOrder = tradeCachePushKingdeeOrderRepository.findByCachePushKingdeeOrder(tid);
                if (Objects.nonNull(tradeCachePushKingdeeOrder)) {
                    tradeCachePushKingdeeOrderRepository.updateCachePushKingdeeOrderStatus(LocalDateTime.now(), tradeCachePushKingdeeOrder.getPushKingdeeId());
                } else {
                    //2种情况   第一种除物流以外的配送方式都要推送wms 第二种如果是物流并且logistics 为01 也要推送wms
                    if (!isLogistics(trade.getDeliverWay()) || (isLogistics(trade.getDeliverWay()) && !StringUtils.isEmpty(trade.getLogistics()) && trade.getLogistics().equals("01")))
                        if (!(Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag())) {
                            //取消订单发送给wms
                            if (wmsAPIFlag) {
                                if (!pushCancelOrder(trade)) {
                                    throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败，仓库已拣货！");
                                }
                            }
                        }
                }
            }


        }
        // 6.推送订单
        if (kingdeeOpenState) {
            //是否在满十件记录
            TradeCachePushKingdeeOrder tradeCachePushKingdeeOrder = tradeCachePushKingdeeOrderRepository.findByCachePushKingdeeOrder(tid);
            if (Objects.nonNull(tradeCachePushKingdeeOrder)) {
                tradeCachePushKingdeeOrderRepository.updateCachePushKingdeeOrderStatus(LocalDateTime.now(), tradeCachePushKingdeeOrder.getPushKingdeeId());
            } else {
                if (wmsAPIFlag && AuditState.CHECKED.equals(auditState)) {
                    //拼团在订单那提交的时候不推送，在成团时推送
                    if (Objects.isNull(trade.getGrouponFlag()) || !trade.getGrouponFlag()) {
                        List<PileStockRecordAttachment> stockRecordAttachmentList = pileStockRecordAttachmentRepostory.findStockRecordTidAndSkuid(trade.getId(), skuIds);
                        if (CollectionUtils.isNotEmpty(stockRecordAttachmentList)) {
                            Long stockNum = trade.getTradeItems().stream().mapToLong(TradeItem::getNum).sum();
                            Long deliveryNum = stockRecordAttachmentList.stream().mapToLong(PileStockRecordAttachment::getNum).sum();
                            if (!stockNum.equals(deliveryNum)) {
                                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "提货数量" + stockNum + "件，不等于发货数量" + deliveryNum + "件，请联系客服处理！");
                            }
                            Trade pushWmsTrade = KsBeanUtil.convert(trade, Trade.class);
                            //新订单商品items
                            List<TradeItem> newTradeItems = new ArrayList<>();
                            //需要删除的商品items
                            List<TradeItem> removeTradeItems = new ArrayList<>();
                            pushWmsTrade.getTradeItems().forEach(tradeItem -> {
                                //过滤出此商品的提货明细记录
                                List<PileStockRecordAttachment> filterList = stockRecordAttachmentList.stream().filter(s -> s.getSkuId().equals(tradeItem.getSkuId())).collect(Collectors.toList());
                                //囤货明细记录大于1
                                if (CollectionUtils.isNotEmpty(filterList) && filterList.size() > 1) {
                                    filterList.forEach(f -> {
                                        //新订单商品item
                                        TradeItem newTradeItem = KsBeanUtil.convert(tradeItem, TradeItem.class);
                                        newTradeItem.setPrice(f.getPrice());
                                        newTradeItem.setVipPrice(f.getPrice());
                                        newTradeItem.setSplitPrice(f.getPrice().multiply(BigDecimal.valueOf(f.getNum())).setScale(2, BigDecimal.ROUND_HALF_UP));
                                        newTradeItem.setOriginalPrice(f.getPrice());
                                        newTradeItem.setPileOrderCode(f.getOrderCode());
                                        newTradeItem.setNum(f.getNum());
                                        newTradeItems.add(newTradeItem);
                                    });
                                    removeTradeItems.add(tradeItem);
                                } else {
                                    if (CollectionUtils.isNotEmpty(filterList)) {
                                        PileStockRecordAttachment filter = filterList.get(0);
                                        tradeItem.setPileOrderCode(filter.getOrderCode());
                                    } else {
                                        throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "囤货明细副表记录异常，请联系客服！");
                                    }
                                }
                            });
                            //删除原有订单商品明细记录
                            if (CollectionUtils.isNotEmpty(removeTradeItems)) {
                                pushWmsTrade.getTradeItems().removeAll(removeTradeItems);
                            }
                            //添加拆分后的订单商品明细记录
                            if (CollectionUtils.isNotEmpty(newTradeItems)) {
                                pushWmsTrade.getTradeItems().addAll(newTradeItems);
                            }
                            log.info("====================提货待选物流订单推送wms信息：{}", pushWmsTrade);
                            this.pushWMSOrder(pushWmsTrade, false, trade.getNewVilageFlag());
                            if(trade.getTradeState().getPayState().equals(PayState.PAID)){
                                //如果订单已支付，需要补推支付状态到支付WMS
                                this.pushConfirmOrder(trade);
                            }
                        } else {
                            if (isPayByOfflineOrIsOPK(trade)) {
                                log.info("线下支付订单或囤货提货单下单时推送WMS:{}", trade.getId());
                                this.pushWMSOrder(trade, false, trade.getNewVilageFlag());
                            }
                        }
                    }
                }
            }
        }

        // 同步审核供应商订单
        // providerTradeService.providerAudit(tid, reason, auditState);

    }

    private void addSkuStock(Trade trade) {
        //TODO: 2023-5-20 秒杀取消订单？ 返还库存? 待测试
//        if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
        if (isPayByOfflineOrIsOPK(trade)) {
            verifyService.addSkuListStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(), trade);
            verifyService.addSkuListStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(), trade);
            return;
        }

        //线上支付的订单：释放锁定库存，关闭支付单
        cancelPay(Collections.singletonList(trade.getId()));
    }

    /**
     * 组装自提码参数
     */
    private PickUpRecord sendPickUpCode(Trade trade) {
        String verifyCode = RandomStringUtils.randomNumeric(6);
        return PickUpRecord.builder().storeId(trade.getSupplier().getStoreId())
                .tradeId(trade.getId()).pickUpCode(verifyCode).pickUpFlag(DefaultFlag.NO)
                .delFlag(DeleteFlag.NO).contactPhone(trade.getConsignee().getPhone()).createTime(LocalDateTime.now()).build();
    }

    /**
     * auditAction 创建支付单
     *
     * @param trade trade
     */
    private void createPayOrder(Trade trade) {
        if (trade.getPayOrderId() != null) {
            payOrderService.deleteByPayOrderId(trade.getPayOrderId());
            receivableService.deleteReceivables(Collections.singletonList(trade.getPayOrderId()));
        }
        //创建支付单
        Optional<PayOrder> optional = payOrderService.generatePayOrderByOrderCode(
                new PayOrderGenerateRequest(trade.getId(),
                        trade.getBuyer().getId(),
                        trade.getTradePrice().getTotalPrice(),
                        trade.getTradePrice().getPoints(),
                        PayType.valueOf(trade.getPayInfo().getPayTypeName()),
                        trade.getSupplier().getSupplierId(),
                        trade.getTradeState().getCreateTime(),
                        trade.getOrderType()));

        trade.getTradeState().setPayState(PayState.NOT_PAID);
        optional.ifPresent(payOrder -> trade.setPayOrderId(payOrder.getPayOrderId()));
    }

    /**
     * 订单回审
     *
     * @param tid
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public void retrial(String tid, Operator operator) {
        Boolean orderAuditSwitch = auditQueryProvider.isSupplierOrderAudit().getContext().isAudit();

        if (!orderAuditSwitch) {
            throw new SbcRuntimeException("K-050133");
        }
        //作废支付单
        Trade trade = detail(tid);
        if (trade.getTradeState().getPayState() != PayState.NOT_PAID) {
            throw new SbcRuntimeException("K-050127");
        }
        BaseResponse<PayTradeRecordCountResponse> response = payQueryProvider.getTradeRecordCountByOrderOrParentCode(new
                TradeRecordCountByOrderOrParentCodeRequest(trade.getId(), trade.getParentId()));
        long tradeRecordCount = response.getContext().getCount();
        if (tradeRecordCount > 0) {
            throw new SbcRuntimeException("K-050128");
        }
        payOrderService.deleteByPayOrderId(trade.getPayOrderId());
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(tid)
                .operator(operator)
                .event(TradeEvent.RE_AUDIT)
                .build();
        tradeFSMService.changeState(stateRequest);
    }

    /**
     * 批量审核
     *
     * @param ids      ids
     * @param audit    审核状态
     * @param reason   驳回原因，用于审核驳回
     * @param operator 审核人信息
     */
    @Transactional
    @LcnTransaction
    public void batchAudit(String[] ids, AuditState audit, String reason, Operator operator) {
        if (ArrayUtils.isNotEmpty(ids)) {
            Stream.of(ids).forEach(id -> audit(id, audit, reason, operator));
        }
    }

    @SuppressWarnings("unused")
    public void confirmRemedySellerRemark(String tid, String sellerRemark, Operator operator) {
        mongoTccHelper.confirm();
    }

    @SuppressWarnings("unused")
    public void cancelRemedySellerRemark(String tid, String sellerRemark, Operator operator) {
        mongoTccHelper.cancel();
    }

    /**
     * 修改卖家备注
     *
     * @param tid
     * @param sellerRemark
     */
    @TccTransaction
    public void remedySellerRemark(String tid, String sellerRemark, Operator operator) {
        //1、查找订单信息
        Trade trade = detail(tid);
        trade.setSellerRemark(sellerRemark);
        trade.appendTradeEventLog(new TradeEventLog(operator, "修改备注", "修改卖家备注", LocalDateTime.now()));
        //保存
        tradeService.updateTrade(trade);
        this.operationLogMq.convertAndSend(operator, "修改备注", "修改卖家备注");
    }

    /**
     * 添加日志
     *
     * @param tid
     * @param sellerRemark
     */
    @TccTransaction
    public void addTradeEventLog(String tid, String title, String sellerRemark, Operator operator) {
        //1、查找订单信息
        Trade trade = detail(tid);
        trade.appendTradeEventLog(new TradeEventLog(operator, title, sellerRemark, LocalDateTime.now()));
        //保存
        tradeService.updateTrade(trade);
        this.operationLogMq.convertAndSend(operator, title, sellerRemark);
    }


    /**
     * 查询订单
     *
     * @param tid
     */
    public Trade detail(String tid) {
        Trade trade = tradeRepository.findById(tid).orElse(null);
        if (Objects.isNull(trade)) {
            return null;
        }
        return trade;
    }

    /**
     * 查询订单
     *
     * @param tid
     */
    public TradeVO detailVO(String tid) {
        Trade trade = tradeRepository.findById(tid).orElse(null);
        if (Objects.isNull(trade)) {
            return null;
        }

        if (!TradeActivityTypeEnum.NEWPICKTRADE.toActivityType().equals(trade.getActivityType())) {
            return KsBeanUtil.convert(trade, TradeVO.class);
        }

        //拆分pickGoodsList,计算实付金额
        fillPickGoodsList(trade);
        //填充整单交易金额
        fillTradePrice(trade);

        TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
        tradeVO.getTradePrice().setDiscountOfJingTie(tradeVO.getTradePrice().getBalancePrice());
        //填充鲸贴返回类型和返回金额
        fillReturnBalance(tradeVO);
        return tradeVO;
    }

    /**
     * 填充整单交易金额
     *
     * @param trade
     */
    public void fillTradePrice(Trade trade) {
        InventoryDetailSamountRequest inventoryDetailSamountRequest = InventoryDetailSamountRequest.builder().takeId(trade.getId()).build();
        List<InventoryDetailSamountVO> inventoryDetailSamountVOS = Optional.ofNullable(inventoryDetailSamountProvider.getInventoryByTakeId(inventoryDetailSamountRequest))
                .map(BaseResponse::getContext)
                .map(InventoryDetailSamountResponse::getInventoryDetailSamountVOS)
                .orElse(Lists.newArrayList());
        if (org.apache.commons.collections.CollectionUtils.isNotEmpty(inventoryDetailSamountVOS)) {
            Map<Integer, BigDecimal> collect = inventoryDetailSamountVOS.stream()
                    .collect(Collectors.groupingBy(
                            InventoryDetailSamountVO::getMoneyType,
                            Collectors.reducing(BigDecimal.ZERO, InventoryDetailSamountVO::getAmortizedExpenses, BigDecimal::add)
                    ));
            BigDecimal rmb = Optional.ofNullable(collect.get(0)).orElse(BigDecimal.ZERO);     // 金钱类型 0是余额 1真实的钱
            BigDecimal jintie = Optional.ofNullable(collect.get(1)).orElse(BigDecimal.ZERO);  // 金钱类型 0是余额 1真实的钱
            BigDecimal paidPrice = rmb.add(jintie); //实付商品金额（囤货已支付）

            TradePrice tradePrice = trade.getTradePrice();
            BigDecimal deliveryPrice = Objects.isNull(tradePrice.getDeliveryPrice()) ? BigDecimal.ZERO : tradePrice.getDeliveryPrice();

            tradePrice.setGoodsPrice(Optional.ofNullable(trade).map(Trade::getTradePrice).map(TradePrice::getGoodsPrice).orElse(BigDecimal.ZERO)); // 商品金额待处理
            tradePrice.setPaidPrice(paidPrice);
            tradePrice.setBalancePrice(jintie);
            tradePrice.setTotalPayCash(paidPrice);
            tradePrice.setTotalPrice(paidPrice.add(deliveryPrice));
        }
    }

    /**
     * 填充鲸贴返回类型和返回金额
     *
     * @param trade
     */
    private void fillReturnBalance(TradeVO trade) {
        // 查询鲸贴返回类型和返回金额
        BaseResponse<WalletRecordResponse> walletRecordResponse = walletRecordProvider
                .getWalletRecordByRelationOrderId(QueryWalletRecordByRelationOrderIdRequest.builder().relationOrderId(trade.getId()).build());
        if(Objects.nonNull(walletRecordResponse)){
            Optional.ofNullable(walletRecordResponse.getContext()).ifPresent(response -> {
                WalletRecordVO recordVO = response.getWalletRecordVO();
                //鲸贴为收入时,显示返回金额
                if(Objects.nonNull(recordVO) && BudgetType.INCOME.equals(recordVO.getBudgetType())){
                    trade.setReturnAmountOfJingTie(Objects.nonNull(recordVO.getDealPrice()) ? recordVO.getDealPrice() : BigDecimal.ZERO);
                }else{
                    trade.setReturnAmountOfJingTie(BigDecimal.ZERO);
                }
            });
        }
        Long provinceId = trade.getConsignee().getProvinceId();
        if(provinceId == 430000){
            trade.setReturnTypeOfJingTie(1);
        }else{
            trade.setReturnTypeOfJingTie(0);
        }
    }

    /**
     * 拆分pickGoodsList,计算实付金额
     *
     * @param trade
     */
    public void fillPickGoodsList(Trade trade) {
        //获取分摊金额
        InventoryDetailSamountRequest request = new InventoryDetailSamountRequest();
        request.setTakeId(trade.getId());
        BaseResponse<InventoryDetailSamountResponse> inventoryByTakeIdResp = inventoryDetailSamountProvider.getInventoryByTakeId(request);

        Map<String, BigDecimal> collectPriceMap = inventoryByTakeIdResp.getContext().getInventoryDetailSamountVOS().stream().collect(
                Collectors.groupingBy(item -> item.getNewPileTradeId() + ":" + item.getGoodsInfoId(),
                        Collectors.reducing(BigDecimal.ZERO, InventoryDetailSamountVO::getAmortizedExpenses, BigDecimal::add)));
        collectPriceMap.forEach((k, v) -> {
            BigDecimal tmpPrice = new BigDecimal(String.valueOf(v)).setScale(2, RoundingMode.HALF_UP);
            collectPriceMap.put(k, tmpPrice);
        });

        // 设置商品来源(囤货单),一个商品来源多个订单时拆分多个项
        List<TradeItem> tradeItems = trade.getTradeItems();
        List<TradeItem> newTradeItems = new ArrayList<>();
        for (TradeItem tradeItem : tradeItems) {
            // 获取商品来源(囤货单
            List<PickGoodsDTO> pickGoodsList = tradeItem.getPickGoodsList();
            if(CollectionUtils.isNotEmpty(pickGoodsList)){
                for (PickGoodsDTO pickGoodsDTO : pickGoodsList) {
                    TradeItem newTradeItem = KsBeanUtil.convert(tradeItem, TradeItem.class);
                    newTradeItem.setPickGoodsList(Arrays.asList(pickGoodsDTO));
                    newTradeItem.setNum(pickGoodsDTO.getNum());
                    //设置实付金额
                    newTradeItem.setSplitPrice(collectPriceMap.getOrDefault(pickGoodsDTO.getNewPileOrderNo() + ":" + pickGoodsDTO.getGoodsInfoId(), BigDecimal.ZERO));
                    newTradeItems.add(newTradeItem);
                }
            }
        }
        if(!newTradeItems.isEmpty()){
            trade.setTradeItems(newTradeItems);
        }
    }

    /**
     * 查 parentId 对于订单集合
     *
     * @param parentId
     */
    public Trade detailByParentId(String parentId) {
        List<Trade> tradeList = tradeRepository.findListByParentId(parentId);
        Trade trade = tradeList.stream().findFirst().get();
        if (Objects.isNull(trade.getTradePrice().getBalancePrice())) {
            trade.getTradePrice().setBalancePrice(BigDecimal.ZERO);
        }
        tradeList.stream().filter(t -> !t.getId().equals(trade.getId())).forEach(
                d -> {
                    trade.getTradeItems().addAll(d.getTradeItems());
                    trade.getTradePrice().setTotalPrice(trade.getTradePrice().getTotalPrice().add(d.getTradePrice().
                            getTotalPrice()));
                    if (Objects.nonNull(d.getTradePrice().getBalancePrice())) {
                        trade.getTradePrice().setBalancePrice(trade.getTradePrice().getBalancePrice().add(d.getTradePrice().getBalancePrice()));
                    }
                }
        );
        return trade;
    }

    /**
     * 查询订单集合
     *
     * @param tids
     */
    public List<Trade> details(List<String> tids) {
        return org.apache.commons.collections4.IteratorUtils.toList(tradeRepository.findAllById(tids).iterator());
    }

    /**
     * 根据父订单号查询订单
     *
     * @param parentTid
     */
    public List<Trade> detailsByParentId(String parentTid) {
        return tradeRepository.findListByParentId(parentTid);
    }

    /**
     * 发货
     *
     * @param tid
     * @param tradeDeliver
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public String deliver(String tid, TradeDeliver tradeDeliver, Operator operator) {
        Trade trade = detail(tid);
        if(DeliverStatus.isShipped(trade.getTradeState().getDeliverStatus())){
            throw new SbcRuntimeException("K-050315");
        }
        //TODO: 日志待删除
        log.info("===============>> trade: {}", JSONObject.toJSONString(trade));
        //是否开启订单审核
        if (auditQueryProvider.isSupplierOrderAudit().getContext().isAudit() && trade.getTradeState().getAuditState()
                != AuditState.CHECKED) {
            //只有已审核订单才能发货
            throw new SbcRuntimeException("K-050317");
        }
        // 先款后货并且未支付的情况下禁止发货
        if (trade.getPaymentOrder() == PaymentOrder.PAY_FIRST && trade.getTradeState().getPayState() == PayState.NOT_PAID && trade.getPayInfo().getPayTypeId().equals(0)) {
            throw new SbcRuntimeException("K-050318");
        }
        if (verifyAfterProcessing(tid)) {
            throw new SbcRuntimeException("K-050114", new Object[]{tid});
        }
        log.info("===============>> trade: {}", JSONObject.toJSONString(trade));
        if(DeliverWay.isLogistics(trade.getDeliverWay())){
            LogisticsInfo logisticsCompanyInfo = trade.getLogisticsCompanyInfo();
            if(null!=logisticsCompanyInfo && tradeDeliver.getLogistics()!=null) {
                tradeDeliver.getLogistics().setLogisticCompanyName(logisticsCompanyInfo.getLogisticsCompanyName());
                tradeDeliver.getLogistics().setLogisticStandardCode(logisticsCompanyInfo.getCompanyNumber());
            }
        }
        if(DeliverWay.DELIVERY_TO_STORE==trade.getDeliverWay()){
            if(!orderCommonService.selfOrder(trade)){
                Consignee consignee = trade.getConsignee();
                resetConsigneeById(consignee);
                FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_5 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_5);
                FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_10 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_10);
                boolean villageFlag = isToStoreVillageFlag(consignee.getCityId(),consignee.getTwonId());
                Long freightFreeNumber = villageFlag?platDeliveryToStoreCfg_10.getFreightFreeNumber():platDeliveryToStoreCfg_5.getFreightFreeNumber();
                double totalTradeDeliveryNum = getShippingItemsSum(tradeDeliver.getShippingItems());
                if(totalTradeDeliveryNum<freightFreeNumber){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"订单"+tid+"不允许发货，配送方式为【配送到店】的"+(villageFlag?"乡镇件":"")+"最低数量"+platDeliveryToStoreCfg_5.getFreightFreeNumber()+"件起");
                }
            }
            TradeDeliver dbTradeDeliver =KsBeanUtil.convert(trade.getTradeDelivers().get(0),TradeDeliver.class);
            trade.setTradeDelivers(new ArrayList<>(0));
            updateTradeDelivers(trade);
            dbTradeDeliver.setDeliverTime(tradeDeliver.getDeliverTime());
            dbTradeDeliver.getLogistics().setShipmentSiteId(tradeDeliver.getLogistics().getShipmentSiteId());
            dbTradeDeliver.getLogistics().setShipmentSiteName(tradeDeliver.getLogistics().getShipmentSiteName());
            if(dbTradeDeliver.getLogistics().getShipmentSiteId()!=null){
                dbTradeDeliver.getLogistics().setLogisticPhone(localTmsCarrierService.getShipmentSiteById(dbTradeDeliver.getLogistics().getShipmentSiteId()).getContactPhone());
            }
            if(orderCommonService.selfOrder(trade)) {
                dbTradeDeliver.getLogistics().setLogisticNo(tradeDeliver.getLogistics().getLogisticNo());
            }
            dbTradeDeliver.getLogistics().setEncloses(tradeDeliver.getLogistics().getEncloses());
            tradeDeliver.setLogistics(dbTradeDeliver.getLogistics());
        }
        if(DeliverWay.isExpressSelfPaid(trade.getDeliverWay())){
            TradeDeliver dbTradeDeliver =KsBeanUtil.convert(trade.getTradeDelivers().get(0),TradeDeliver.class);
            trade.setTradeDelivers(new ArrayList<>(0));
            updateTradeDelivers(trade);
            dbTradeDeliver.setDeliverTime(tradeDeliver.getDeliverTime());
            dbTradeDeliver.getLogistics().setShipmentSiteId(tradeDeliver.getLogistics().getShipmentSiteId());
            dbTradeDeliver.getLogistics().setShipmentSiteName(tradeDeliver.getLogistics().getShipmentSiteName());
            if(dbTradeDeliver.getLogistics().getShipmentSiteId()!=null){
                /*StoreShippingAddressQueryDTO addressQueryDTO = new StoreShippingAddressQueryDTO();
                addressQueryDTO.setId(Long.parseLong(dbTradeDeliver.getLogistics().getShipmentSiteId()));
                List<StoreShippingAddressVO> shippingAddressVOList = storeQueryProvider.listShippingAddress(addressQueryDTO).getContext();
                if(CollectionUtils.isNotEmpty(shippingAddressVOList)) {
                    dbTradeDeliver.getLogistics().setLogisticPhone(shippingAddressVOList.get(0).getShippingPhone());
                }*/
            }
            if(orderCommonService.selfOrder(trade)) {
                dbTradeDeliver.getLogistics().setLogisticNo(tradeDeliver.getLogistics().getLogisticNo());
            }
            dbTradeDeliver.getLogistics().setEncloses(tradeDeliver.getLogistics().getEncloses());
            tradeDeliver.setLogistics(dbTradeDeliver.getLogistics());
        }
        if(DeliverWay.TO_DOOR_PICK!=trade.getDeliverWay() && DeliverWay.DELIVERY_TO_STORE!=trade.getDeliverWay()) {
            checkLogisticsNo(tradeDeliver.getLogistics().getLogisticNo(), tradeDeliver.getLogistics()
                    .getLogisticStandardCode());
        }
        // 生成ID
        tradeDeliver.setDeliverId(generatorService.generate("TD"));
        tradeDeliver.setStatus(DeliverStatus.NOT_YET_SHIPPED);
        tradeDeliver.setTradeId(tid);
        tradeDeliver.setProviderName(trade.getSupplier().getSupplierName());
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(tid)
                .operator(operator)
                .data(tradeDeliver)
                .event(TradeEvent.DELIVER)
                .build();
        tradeFSMService.changeState(stateRequest);
        log.info("===============>> trade: {}", JSONObject.toJSONString(detail(tid)));
        //支持欠货发货
        this.checkItemNum(tid, tradeDeliver.getShippingItems());
        //发货完成发送通知消息
        Map<String, Object> map = new HashMap<>();
        map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
        map.put("id", tid);
        map.put("node", OrderProcessType.ORDER_SEND_GOODS.toValue());
        MessageMQRequest messageMQRequest = new MessageMQRequest();
        messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
        messageMQRequest.setNodeCode(OrderProcessType.ORDER_SEND_GOODS.getType());
        String skuName = StringUtils.EMPTY;
        String pic = StringUtils.EMPTY;
        if (CollectionUtils.isNotEmpty(tradeDeliver.getShippingItems())) {
            skuName = tradeDeliver.getShippingItems().get(0).getItemName();
            pic = tradeDeliver.getShippingItems().get(0).getPic();
        }
        messageMQRequest.setParams(Lists.newArrayList(skuName));
        messageMQRequest.setRouteParam(map);
        messageMQRequest.setCustomerId(trade.getBuyer().getId());
        messageMQRequest.setPic(pic);
        messageMQRequest.setMobile(trade.getBuyer().getAccount());
        orderProducerService.sendMessage(messageMQRequest);
        return tradeDeliver.getDeliverId();
    }

    @Transactional
    public String deliver2(String tid, TradeDeliver tradeDeliver, Operator operator) {

        Trade trade = detail(tid);
        log.info("==================== 1.supplierDeliver tradeInfo : {} ", trade);
        //是否开启订单审核
        if (auditQueryProvider.isSupplierOrderAudit().getContext().isAudit() && trade.getTradeState().getAuditState()
                != AuditState.CHECKED) {
            //只有已审核订单才能发货
            throw new SbcRuntimeException("当前订单尚未通过审核，暂不支持发货: K-050317");
        }
        // 先款后货并且未支付的情况下禁止发货
        if (trade.getPaymentOrder() == PaymentOrder.PAY_FIRST && trade.getTradeState().getPayState() == PayState.NOT_PAID && trade.getPayInfo().getPayTypeId().equals(0)) {
            throw new SbcRuntimeException("当前订单为先款后货，但尚未支付，暂不支持发货: K-050318");
        }
        if (verifyAfterProcessing(tid)) {
            throw new SbcRuntimeException("订单{0}已申请售后，暂时不能发货 : K-050114", new Object[]{tid});
        }
        /*if (!DeliverWay.LOGISTICS.equals(trade.getDeliverWay())){
            checkLogisticsNo(tradeDeliver.getLogistics().getLogisticNo(), tradeDeliver.getLogistics()
                    .getLogisticStandardCode());
        }*/
        trade.getTradeItems().forEach(t -> {
            if (Objects.nonNull(t.getDevanningId())) {
                tradeDeliver.getShippingItems().forEach(o -> {
                    if (t.getSkuId().equals(o.getSkuId())) {
                        o.setDevanningId(t.getDevanningId());
                    }
                });
            }
        });

        // 生成ID
        tradeDeliver.setDeliverId(generatorService.generate("TD"));
        tradeDeliver.setStatus(DeliverStatus.NOT_YET_SHIPPED);
        tradeDeliver.setTradeId(tid);
        tradeDeliver.setProviderName(trade.getSupplier().getSupplierName());
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(tid)
                .operator(operator)
                .data(tradeDeliver)
                .event(TradeEvent.DELIVER)
                .build();
        tradeFSMService.changeState(stateRequest);

        this.checkItemNum(tid, tradeDeliver.getShippingItems());

        return tradeDeliver.getDeliverId();
    }

    @Transactional
    @LcnTransaction
    public void checkItemNum(String tid, List<ShippingItem> shippingItems) {
        Trade trade = detail(tid);
        //比对发货数量 组装数据产生退货单信息
        List<ReturnItemDTO> dtos=new ArrayList<>();

        Map<String, TradeItem> tradeItemMap = trade.getTradeItems().stream().collect(Collectors.toMap(TradeItem::getSkuNo,
                Function.identity(),(oldValue,newValue)->newValue));

        Map<Long, TradeItem> DevanningTradeItemMap = Maps.newHashMap();

        TradeItem item = trade.getTradeItems().stream().findAny().orElse(null);

        if(Objects.nonNull(item.getDevanningId())){
            DevanningTradeItemMap = trade.getTradeItems().stream().collect(Collectors.toMap(TradeItem::getDevanningId,
                    Function.identity()));
        }

        BigDecimal chargebackTotalPrice=BigDecimal.ZERO;
        double totalTradeDeliveryNum = getShippingItemsSum(shippingItems);
        log.info("~~~~~~wms发货数:" + totalTradeDeliveryNum);
        boolean isAlloutStock = true;
        for(ShippingItem shippingItemVO : shippingItems){
            if(isAlloutStock){
                isAlloutStock =shippingItemVO.getItemNum().compareTo(0L)==0;//都为0，全部缺货
            }
            if(Objects.nonNull(shippingItemVO.getDevanningId())){
                //拆箱订单
                TradeItem tradeItem = DevanningTradeItemMap.get(shippingItemVO.getDevanningId());
                if (tradeItem==null){
                    break;
                }
                if ( shippingItemVO.getItemNum() < tradeItem.getNum()) {
                    Long outStock=tradeItem.getNum() - shippingItemVO.getItemNum();//缺货数量
                    BigDecimal splitPrice = tradeItem.getSplitPrice();//平摊价格
                    BigDecimal refundAmount = splitPrice.divide(BigDecimal.valueOf(tradeItem.getNum()), 10, BigDecimal.ROUND_HALF_UP)
                            .multiply(BigDecimal.valueOf(outStock)).setScale(2, BigDecimal.ROUND_DOWN);
                    if (outStock == tradeItem.getNum()) {
                        refundAmount = splitPrice;
                    }
                    dtos.add( ReturnItemDTO.builder()
                            .skuId(tradeItem.getSkuId())
                            .devanningId(tradeItem.getDevanningId())
                            .skuName(tradeItem.getSkuName())
                            .skuNo(tradeItem.getSkuNo())
                            .specDetails(tradeItem.getSpecDetails())
                            .price(tradeItem.getPrice())
                            .splitPrice(refundAmount)
                            .orderSplitPrice(splitPrice)
                            .num(BigDecimal.valueOf(outStock))
                            .addStep(tradeItem.getAddStep()).build());
                    chargebackTotalPrice=chargebackTotalPrice.add(refundAmount);
                }
            }else{
                //正常订单
                TradeItem tradeItem = tradeItemMap.get(shippingItemVO.getSkuNo());
                if (tradeItem==null){
                    break;
                }
                if ( shippingItemVO.getItemNum() < tradeItem.getNum()) {
                    Long outStock=tradeItem.getNum() - shippingItemVO.getItemNum();
                    BigDecimal splitPrice = tradeItem.getSplitPrice();
                    BigDecimal refundAmount = splitPrice.divide(BigDecimal.valueOf(tradeItem.getNum()), 10, BigDecimal.ROUND_HALF_UP)
                            .multiply(BigDecimal.valueOf(outStock)).setScale(2, BigDecimal.ROUND_DOWN);
                    if (outStock == tradeItem.getNum()) {
                        refundAmount = splitPrice;
                    }
                    dtos.add( ReturnItemDTO.builder()
                            .skuId(tradeItem.getSkuId())
                            .skuName(tradeItem.getSkuName())
                            .skuNo(tradeItem.getSkuNo())
                            .specDetails(tradeItem.getSpecDetails())
                            .price(tradeItem.getPrice())
                            .splitPrice(refundAmount)
                            .orderSplitPrice(splitPrice)
                            .num(BigDecimal.valueOf(outStock))
                            .addStep(tradeItem.getAddStep()).build());
                    chargebackTotalPrice=chargebackTotalPrice.add(refundAmount);
                }
            }
        }
        //缺货
        tradeItemMap=tradeItemMap.entrySet().stream().filter(r ->
                        !shippingItems.stream().map(ShippingItem::getSkuNo).collect(Collectors.toList())
                                .contains(r.getKey()))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        if(Objects.nonNull(tradeItemMap)){
            for(String skuNo:tradeItemMap.keySet()){
                TradeItem tradeItem = tradeItemMap.get(skuNo);
                if (Objects.nonNull(tradeItem)){
                    Long outStock=tradeItem.getNum();
                    BigDecimal splitPrice = tradeItem.getSplitPrice();
                    dtos.add( ReturnItemDTO.builder()
                            .skuId(tradeItem.getSkuId())
                            .skuName(tradeItem.getSkuName())
                            .skuNo(tradeItem.getSkuNo())
                            .specDetails(tradeItem.getSpecDetails())
                            .price(tradeItem.getPrice())
                            .splitPrice(splitPrice)
                            .orderSplitPrice(splitPrice)
                            .num(BigDecimal.valueOf(outStock))
                            .addStep(tradeItem.getAddStep()).build());
                    chargebackTotalPrice=chargebackTotalPrice.add(splitPrice);
                }
            }
        }
        double refundAmount = 0;
        if(!isAlloutStock) {
            log.info("开始调TMS发货[{}]",tid);
            if(DeliverWay.isDeliveryToStore(trade.getDeliverWay())) {
                TmsOrderThirdDeliveryDTO rData = localTmsOrderService.updateStatusForTradeSupplierDeliver(trade);
                if (rData != null) {
                    if (StringUtils.isNotBlank(rData.getThirdPartyDeliveryOrderNo()) && !rData.getThirdPartyDeliveryOrderNo().equals(trade.getTradeDelivers().get(0).getLogistics().getLogisticNo())) {
                        trade.getTradeDelivers().get(0).getLogistics().setLogisticNo(rData.getThirdPartyDeliveryOrderNo());
                        updateTradeLogisticNO(trade.getId(), rData.getThirdPartyDeliveryOrderNo());
                    }
                    refundAmount = rData.getRefundAmount();
                }
            }
            if(DeliverWay.isExpressSelfPaid(trade.getDeliverWay())) {
               /* ExpressOrderThirdDeliveryDTO rData = localExpressOrderService.updateStatusForTradeSupplierDeliver(trade);
                if (rData != null) {
                    if (StringUtils.isNotBlank(rData.getThirdOrderNo()) && !rData.getThirdOrderNo().equals(trade.getTradeDelivers().get(0).getLogistics().getLogisticNo())) {
                        trade.getTradeDelivers().get(0).getLogistics().setLogisticNo(rData.getThirdOrderNo());
                        updateTradeLogisticNO(trade.getId(), rData.getThirdOrderNo());
                    }
                    refundAmount = rData.getRefundAmount();
                }*/
            }
            log.info("结束调TMS发货[{}]",tid);
        }
        log.info("wms货物不足自动生成退单，chargebackTotalPrice" + chargebackTotalPrice+"TID:"+tid);
//        if (chargebackTotalPrice.compareTo(BigDecimal.ZERO) == 1) {   }
        log.info("wms货物不足自动生成退单，订单号:" + tid);
        TradeOutRequest build = TradeOutRequest.builder()
                .returnOrderDTO(ReturnOrderDTO.builder()
                        .tid(tid)
                        .returnPrice(ReturnPriceDTO.builder()
                                .applyPrice(BigDecimal.ZERO)
                                .actualReturnPrice(chargebackTotalPrice)
                                .deliveryPrice(BigDecimal.valueOf(refundAmount))
                                .applyStatus(false).build())
                        .returnReason(ReturnReason.WMSAUTOMATICRETURN)
                        .returnItems(dtos)
                        .build()).build();
        if (CollectionUtils.isNotEmpty(dtos)){
            log.info("wms货物不足生产者传入信息[{}]",JSONObject.toJSONString(build));
            orderProducerService.wmsAutoChargeback(build);
        }
    }

    private static double getShippingItemsSum(List<ShippingItem> shippingItems) {
        return shippingItems.stream().mapToDouble(ShippingItem::getItemNum).sum();
    }

    /**
     * 验证订单是否存在售后申请
     *
     * @param tid
     * @return true|false:存在售后，阻塞订单进程|不存在售后，订单进程正常
     */
    public boolean verifyAfterProcessing(String tid) {
        List<ReturnOrder> returnOrders = returnOrderRepository.findByTid(tid);
        if (!CollectionUtils.isEmpty(returnOrders)) {
            // 查询是否存在正在进行中的退单(不是作废,不是拒绝退款,不是已结束)
            Optional<ReturnOrder> optional = returnOrders.stream().filter(item -> item.getReturnFlowState() !=
                    ReturnFlowState.VOID
                    && item.getReturnFlowState() != ReturnFlowState.REJECT_REFUND
                    && item.getReturnFlowState() != ReturnFlowState.COMPLETED).findFirst();
            if (optional.isPresent()) {
                return true;
            }

        }
        return false;
    }

    /**
     * 确认收货
     *
     * @param tid
     * @param operator
     */
    @LcnTransaction
    public void confirmReceive(String tid, Operator operator) {
        Trade trade = detail(tid);
        /**
         * zhouzhenguo
         *  2023-07-18 定位正式环境订单无法自动确认收货
         *      原因：订单自动确认收货，历史订单由于 trade.buyer.account 信息为空，导致订单自动确认收货失败。
         *  当订单购买人信息为空时，不执行确认收货逻辑
         */
        if (trade == null || trade.getBuyer() == null || StringUtils.isEmpty(trade.getBuyer().getAccount())) {
            logger.warn("订单 {} 购买人信息为空 {}", trade.getId(), JSON.toJSONString(trade.getBuyer()));
            return;
        }
        TradeEvent event;
        if (trade.getTradeState().getPayState() == PayState.PAID) {
            event = TradeEvent.COMPLETE;
        } else {
            event = TradeEvent.CONFIRM;
        }
        StateRequest stateRequest = StateRequest
                .builder()
                .data(trade)
                .tid(tid)
                .operator(operator)
                .event(event)
                .build();
        tradeFSMService.changeState(stateRequest);
        if(DeliverWay.isDeliveryToStore(trade.getDeliverWay())) {
            localTmsOrderService.updateStatusForTradeBuyerReceive(trade);
        }else if (DeliverWay.isExpressSelfPaid(trade.getDeliverWay())){
            //localExpressOrderService.updateStatusForTradeBuyerReceive(trade);
        }
        // 发送订单完成MQ消息
        if (trade.getTradeState().getPayState() == PayState.PAID) {
            orderProducerService.sendMQForOrderComplete(tid);

            Map<String, Object> map = new HashMap<>();
            map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
            map.put("node", OrderProcessType.ORDER_COMPILE.toValue());
            MessageMQRequest messageMQRequest = new MessageMQRequest();
            messageMQRequest.setNodeCode(OrderProcessType.ORDER_COMPILE.getType());
            messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
            messageMQRequest.setParams(Lists.newArrayList(trade.getTradeItems().get(0).getSkuName()));
            messageMQRequest.setRouteParam(map);
            messageMQRequest.setCustomerId(trade.getBuyer().getId());
            messageMQRequest.setPic(trade.getTradeItems().get(0).getPic());
            messageMQRequest.setMobile(trade.getBuyer().getAccount());
            orderProducerService.sendMessage(messageMQRequest);
        }
    }

    /**
     * 退货 | 退款
     *
     * @param tid
     * @param operator
     */
    public void returnOrder(String tid, Operator operator) {
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(tid)
                .operator(operator)
                .event(TradeEvent.REFUND)
                .build();
        tradeFSMService.changeState(stateRequest);
    }

    /**
     * 作废订单
     *
     * @param tid
     * @param operator
     */
    public void voidTrade(String tid, Operator operator) {
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(tid)
                .operator(operator)
                .event(TradeEvent.VOID)
                .data("已全部退货或退款")
                .build();
        tradeFSMService.changeState(stateRequest);

        Trade trade = detail(tid);
        // 判断是否是退款订单，并且有分销员id和分销商品
        if (Objects.nonNull(trade.getRefundFlag()) && trade.getRefundFlag()
                && trade.getTradeState().getPayState() == PayState.PAID
                && StringUtils.isNotBlank(trade.getDistributorId())
                && CollectionUtils.isNotEmpty(trade.getDistributeItems())) {
            // trade对象转tradeVO对象
            TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
            // 订单作废后，发送MQ消息
            orderProducerService.sendMQForOrderRefundVoid(tradeVO);
        }
    }

    /**
     * 退单作废后的订单状态扭转
     *
     * @param tid
     * @param operator
     */
    public void reverse(String tid, Operator operator, ReturnType returnType) {
        Trade trade = detail(tid);
        if (trade.getTradeState().getFlowState() != FlowState.VOID) {
            return;
        }
        TradeEvent event;
        Object data;
        if (returnType == ReturnType.RETURN) {
            event = TradeEvent.REVERSE_RETURN;
            data = trade;
        } else {
            event = TradeEvent.REVERSE_REFUND;
            data = AuditState.CHECKED;
        }
        StateRequest stateRequest = StateRequest
                .builder()
                .tid(tid)
                .operator(operator)
                .event(event)
                .data(data)
                .build();
        tradeFSMService.changeState(stateRequest);
    }


    /**
     * 查询全部订单
     *
     * @param request
     * @return
     */
    public List<Trade> queryAll(TradeQueryRequest request) {
        return mongoTemplate.find(new Query(request.getWhereCriteria()), Trade.class);
    }


    /**
     * 发货记录作废
     *
     * @param tid
     * @param deliverId
     * @param operator
     */
    public void deliverRecordObsolete(String tid, String deliverId, Operator operator) {
        StateRequest stateRequest = StateRequest.builder()
                .tid(tid)
                .operator(operator)
                .data(deliverId)
                .event(TradeEvent.OBSOLETE_DELIVER)
                .build();
        tradeFSMService.changeState(stateRequest);

    }

    @SuppressWarnings("unused")
    public void confirmSaveInvoice(String tid, Invoice invoice) {
        mongoTccHelper.confirm();
    }

    @SuppressWarnings("unused")
    public void cancelSaveInvoice(String tid, Invoice invoice) {
        mongoTccHelper.cancel();
    }

    /**
     * 保存发票信息
     *
     * @param tid
     * @param invoice
     */
    @LcnTransaction
    public void saveInvoice(String tid, Invoice invoice) {
        Trade trade = detail(tid);
        trade.setInvoice(invoice);
        tradeService.updateTrade(trade);
    }


    /**
     * 支付作废
     *
     * @param tid
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public void payRecordObsolete(String tid, Operator operator) {
        Trade trade = detail(tid);
        //删除对账记录
        accountRecordProvider.deleteByOrderCodeAndType(
                AccountRecordDeleteByOrderCodeAndTypeRequest.builder().orderCode(trade.getId())
                        .accountRecordType(AccountRecordType.INCOME).build()
        );
        if (trade.getTradeState().getPayState() == PayState.NOT_PAID) {
            throw new SbcRuntimeException("K-050125", new Object[]{"作废支付"});
        }
        trade.getTradePrice().setTotalPayCash(null);
        if (trade.getTradeState().getFlowState() == FlowState.COMPLETED) {
            //已完成订单，扭转流程状态与支付状态
            StateRequest stateRequest = StateRequest.builder()
                    .tid(tid)
                    .operator(operator)
                    .event(TradeEvent.OBSOLETE_PAY)
                    .build();
            tradeFSMService.changeState(stateRequest);
        } else {
            //进行中订单，只扭转付款状态
            trade.getTradeState().setPayState(PayState.NOT_PAID);
            trade.getTradeState().setPayTime(null);
            //添加操作日志
            String detail = String.format("订单[%s]支付记录已作废，当前支付状态[%s],操作人：%s", trade.getId(),
                    trade.getTradeState().getPayState().getDescription(), operator.getName());
            trade.appendTradeEventLog(TradeEventLog
                    .builder()
                    .operator(operator)
                    .eventType(TradeEvent.OBSOLETE_PAY.getDescription())
                    .eventDetail(detail)
                    .eventTime(LocalDateTime.now())
                    .build());
            tradeService.updateTrade(trade);
            this.operationLogMq.convertAndSend(operator, TradeEvent.OBSOLETE_PAY.getDescription(), detail);
        }
    }

    /**
     * 线上订单支付回调
     *
     * @param trade
     * @param payOrderOld
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public void payCallBackOnline(Trade trade, PayOrder payOrderOld, Operator operator) {
        try {
            if (payOrderOld.getReceivable() == null) {
                BaseResponse<PayTradeRecordResponse> response;
                if (trade.getPayInfo().isMergePay()) {
                    response = payQueryProvider.getTradeRecordByOrderCode(new
                            TradeRecordByOrderCodeRequest(trade.getParentId()));
                } else {
                    response = payQueryProvider.getTradeRecordByOrderCode(new
                            TradeRecordByOrderCodeRequest(trade.getId()));
                }
                PayChannelItemResponse chanelItemResponse = payQueryProvider.getChannelItemById(new
                        ChannelItemByIdRequest(response.getContext().getChannelItemId())).getContext();
                ReceivableAddRequest param = new ReceivableAddRequest(trade.getPayOrderId(),Arrays.asList(trade.getPayOrderId()), LocalDateTime.now()
                        .toString()
                        , trade.getSellerRemark(), 0L, chanelItemResponse.getName(), chanelItemResponse.getId(), null);
                addReceivable(param, operator.getPlatform()).ifPresent(payOrder ->
                        //订单状态变更
                        payCallBack(trade.getId(), payOrder.getPayOrderPrice(), operator, PayWay.valueOf
                                (chanelItemResponse
                                        .getChannel().toUpperCase()))
                );
            } else {
                log.info("The {} order number has been pasted", trade.getId());
            }
        } catch (SbcRuntimeException e) {
            logger.error("The {} order status modifies the exception.error={}", trade.getId(), e);
            throw new SbcRuntimeException(e.getErrorCode(), e.getParams());
        }
    }

    /**
     * 线上订单支付回调
     *
     * @param trade
     * @param payOrderOld
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public void payCallBackOnlineNewPile(NewPileTrade trade, PayOrder payOrderOld, Operator operator) {
        try {
            if (payOrderOld.getReceivable() == null) {
                BaseResponse<PayTradeRecordResponse> response;
                if (trade.getPayInfo().isMergePay()) {
                    response = payQueryProvider.getTradeRecordByOrderCode(new
                            TradeRecordByOrderCodeRequest(trade.getParentId()));
                } else {
                    response = payQueryProvider.getTradeRecordByOrderCode(new
                            TradeRecordByOrderCodeRequest(trade.getId()));
                }
                PayChannelItemResponse chanelItemResponse = payQueryProvider.getChannelItemById(new
                        ChannelItemByIdRequest(response.getContext().getChannelItemId())).getContext();
                ReceivableAddRequest param = new ReceivableAddRequest(trade.getPayOrderId(),Arrays.asList(trade.getPayOrderId()), LocalDateTime.now()
                        .toString()
                        , trade.getSellerRemark(), 0L, chanelItemResponse.getName(), chanelItemResponse.getId(), null);
                addReceivable(param, operator.getPlatform()).ifPresent(payOrder ->
                        //订单状态变更
                        newPileTradeService.payCallBack(trade.getId(), payOrder.getPayOrderPrice(), operator, PayWay.valueOf
                                (chanelItemResponse
                                        .getChannel().toUpperCase()))
                );
            } else {
                log.info("The {} order number has been pasted", trade.getId());
            }
        } catch (SbcRuntimeException e) {
            logger.error("The {} order status modifies the exception.error={}", trade.getId(), e);
            throw new SbcRuntimeException(e.getErrorCode(), e.getParams());
        }
    }

    /**
     * 查询销售订单对应的支付单
     *
     * @param payCode
     * @return
     */
    public TradePushKingdeePayOrder selectPushKingdeePayOrder(String payCode) {
        if (StringUtils.isNotEmpty(payCode)) {
            return tradePushKingdeePayRepository.selectPushKingdeePayOrder(payCode);
        }
        return null;
    }

    /**
     * 在加入延时队列前先插入一条支付数据
     *
     * @param trade
     * @param payOrders
     * @param payWay
     */
    public void savePayOrder(Trade trade, PayOrderResponse payOrders, PayWay payWay) {
        logger.info("TradeService.savePayOrder req PayOrderId:{} payType:{} PayOrderRealPayPrice:{}", trade.getParentId(), payOrders.getPayType(), payOrders.getPayOrderRealPayPrice());
        //查询支付记录中是否有支付单
        Integer number = tradePushKingdeePayRepository.selectPushKingdeePayOrderNumber(payOrders.getPayOrderId());
        if (number == 0) {
            TradePushKingdeePayOrder tradePushKingdeePayOrder = new TradePushKingdeePayOrder();
            tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
            tradePushKingdeePayOrder.setOrderCode(trade.getId());
            tradePushKingdeePayOrder.setPayType(payWay.toValue());
            tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.CREATE.toStatus());
            tradePushKingdeePayOrder.setCreateTime(LocalDateTime.now());
            tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
            if (payOrders.getPayType().equals(PayType.OFFLINE)) {
                tradePushKingdeePayOrder.setPracticalPrice(payOrders.getPayOrderRealPayPrice());
            } else {
                tradePushKingdeePayOrder.setPracticalPrice(payOrders.getTotalPrice());
            }
            tradePushKingdeePayRepository.saveAndFlush(tradePushKingdeePayOrder);
        }
    }

    /**
     * 向金蝶push支付单
     *
     * @param trade
     * @param payOrders
     */
    @Transactional
    public Boolean pushPayOrderKingdee(Trade trade, PayOrderResponse payOrders, PayWay payWay) {
        if(!orderCommonService.erpCanTrade(trade)){
            return true;
        }
        //查询是否为线下订单，是重新赋实付金额
        PayOrder pay = payOrderRepository.findById(trade.getPayOrderId())
                .orElseThrow(() -> new SbcRuntimeException("K-070001"));
        if (Objects.nonNull(pay) && pay.getPayType() == PayType.OFFLINE
                && Objects.nonNull(pay.getPayOrderRealPayPrice()) && pay.getPayOrderRealPayPrice().compareTo(BigDecimal.ZERO) == 1) {
            payOrders.setTotalPrice(pay.getPayOrderRealPayPrice());
        }
        log.info("TradeService.pushPayOrderKingdee ActivityType:{} TotalPrice:{} tid:{}", trade.getActivityType(), payOrders.getTotalPrice(), trade.getId());
        if (StringUtils.isNotEmpty(trade.getActivityType()) && trade.getActivityType().equals(TradeActivityTypeEnum.STOCKUP.toActivityType())) {
            if (StringUtils.isNotEmpty(trade.getLogistics()) && trade.getLogistics().equals("02")) {
                orderProducerService.kingdeePushOrder(trade.getId(), 10 * 1000L);
                return false;
            }
        }
        BigDecimal price = BigDecimal.ZERO;
        if (payOrders.getTotalPrice().compareTo(BigDecimal.ZERO) == 0) {
            //运费为0 且不为物流
            logger.info("TradeService.pushPayOrderKingdee not push kingdee id:{}", trade.getId());
            return false;
        } else {
            price = payOrders.getTotalPrice().setScale(6, RoundingMode.DOWN);
            // 配送到店的订单 不能推送运费部分 231103
            if (Objects.equals(payWay, PayWay.CCB)) {
                DeliverWay deliverWay = trade.getDeliverWay();
                if (Objects.nonNull(deliverWay) && Objects.equals(deliverWay, DeliverWay.DELIVERY_TO_STORE)) {
                    BigDecimal deliveryPrice = trade.getTradePrice().getDeliveryPrice();
                    if (Objects.nonNull(deliveryPrice) && deliveryPrice.compareTo(BigDecimal.ZERO) > 0) {
                        log.info("配送到店推送ERP收款单,总金额：{},运费：{}", price.toPlainString(), deliveryPrice.toPlainString());
                        price = price.subtract(deliveryPrice);
                        log.info("配送到店推送ERP收款单,实推金额：{}", price.toPlainString());
                        if (price.compareTo(BigDecimal.ZERO) < 1) {
                            return false;
                        }
                    }
                }
            }
        }

        // 建行支付要佣金和商家金额 要分开推送erp 不分开推了 230807
        /*BigDecimal commission = BigDecimal.ZERO;
        if (Objects.equals(payWay, PayWay.CCB)) {
            String tradeId = trade.getId();
            String payOrderNo = trade.getPayOrderNo();
            CcbPayOrderRecordResponse record = ccbPayProvider.queryCcbPayOrderRecord(tradeId, payOrderNo).getContext();
            if (Objects.nonNull(record) && Objects.nonNull(record.getCommission()) && record.getCommission().compareTo(BigDecimal.ZERO) > 0) {
                price = record.getTxnAmt().setScale(6, BigDecimal.ROUND_DOWN);
                payOrders.setTotalPrice(price);
                commission = record.getCommission();
            }
        }
        if (commission.compareTo(BigDecimal.ZERO) > 0) {
            PayOrderResponse payOrdersCommission = new PayOrderResponse();
            payOrdersCommission.setPayOrderId(payOrders.getPayOrderId() + "YJ");
            payOrdersCommission.setTotalPrice(commission);
            this.pushPayOrderCommissionKingdee(trade, payOrdersCommission, payWay);
        }*/
        logger.info("TradeService.pushPayOrderKingdee req PayOrderId:{} totalPrice:{}", payOrders.getPayOrderId(),
                price);
        Boolean resultState = false;
        //查询支付记录中是否有支付单
        Integer number = tradePushKingdeePayRepository.selectPushKingdeePayOrderNumber(payOrders.getPayOrderId());
        TradePushKingdeePayOrder tradePushKingdeePayOrder = new TradePushKingdeePayOrder();
        tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.CREATE.toStatus());
        try {
            if (!checkPayOrderKingdee(trade, payOrders, payWay, tradePushKingdeePayOrder)) {
                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PARAMETERERROR.toStatus());
                return resultState;
            }
            KingdeePayOrder payOrder = new KingdeePayOrder();
            String fdate =  null != trade.getTradeState().getPayTime() ? DateUtil.getDate(trade.getTradeState().getPayTime()) : DateUtil.nowDate();
            // 业务时间使用惠市宝清算时间
            if (StringUtils.isNotBlank(trade.getPayOrderNo())) {
                CcbPayRecordResponse ccbPayRecordResponse = ccbPayProvider.queryCcbPayRecordByPayOrderNo(trade.getPayOrderNo()).getContext();
                if (Objects.nonNull(ccbPayRecordResponse) && Objects.nonNull(ccbPayRecordResponse.getClrgDt())) {
                    fdate =  DateUtil.getDate(DateUtil.parseDate(ccbPayRecordResponse.getClrgDt(), DateUtil.FMT_TIME_5));
                }
            }
            payOrder.setFDate(fdate);
            // payOrder.setFDate(null != trade.getTradeState().getCreateTime() ? DateUtil.getDate(trade.getTradeState().getCreateTime()) : DateUtil.nowDate());
            payOrder.setOrderNumber(trade.getId());
            Map FCustId = new HashMap();
            FCustId.put("FNumber", trade.getBuyer().getAccount());
            payOrder.setFCustId(FCustId);
            Map FPAYORGID = new HashMap();
            FPAYORGID.put("FNumber", kingdeeOrganization);
            payOrder.setFPAYORGID(FPAYORGID);//收款组织
            //收款方式
            if (payWay.equals(PayWay.CASH)) {
                payOrder.setFColType("线下");
            } else {
                payOrder.setFColType("线上");
            }
            List<KingdeePayOrderSettlement> freceivebillentry = new ArrayList<>();
            KingdeePayOrderSettlement payOrderSettlement = new KingdeePayOrderSettlement();
            Map FSETTLETYPEID = new HashMap();
            List<Receivable> receivableList = receivableRepository.findByDelFlagAndPayOrderId(DeleteFlag.NO, trade.getPayOrderId());
            if (payWay.equals(PayWay.CASH)) {
                //线下支付
                FSETTLETYPEID.put("FNumber", "offlinepay");
                if (CollectionUtils.isNotEmpty(receivableList)) {
                    Receivable receivable = receivableList.stream().findFirst().orElse(null);
                    OfflineAccountGetByIdRequest offlineAccountGetByIdRequest = new OfflineAccountGetByIdRequest();
                    offlineAccountGetByIdRequest.setOfflineAccountId(receivable.getOfflineAccountId());
                    BaseResponse<OfflineAccountGetByIdResponse> offlineAccountResponse = offlineQueryProvider.getById(offlineAccountGetByIdRequest);
                    if (Objects.nonNull(offlineAccountResponse) && Objects.nonNull(offlineAccountResponse.getContext())) {
                        OfflineAccountGetByIdResponse offlineAccount = offlineAccountResponse.getContext();
                        if (StringUtils.isNotBlank(offlineAccount.getBankCode())) {
                            FSETTLETYPEID.put("FNumber", offlineAccount.getBankCode());
                        }
                    }
                }
            } else {
                FSETTLETYPEID.put("FNumber", payWay.toValue());
            }
            /**
             *
             * 结算方式需要修改
             * */
            payOrderSettlement.setFSETTLETYPEID(FSETTLETYPEID);//结算方式
            payOrderSettlement.setFRECTOTALAMOUNTFOR(price.toString());

            //销售订单号
            payOrderSettlement.setF_ora_YDDH(trade.getId());

            log.info("收款单推金蝶----->" + JSONObject.toJSONString(trade.getPayWay()));
            //使用银行卡,先下支付不用传银行卡，是先下支付trade.getPayWay()为空
            Map FACCOUNTID = new HashMap();
            if (trade.getPayWay() != null && trade.getPayWay().equals(PayWay.ALIPAY)) {
                FACCOUNTID.put("FNumber", kingdeeAlipay);
                payOrderSettlement.setFACCOUNTID(FACCOUNTID);
            } else if (trade.getPayWay() != null && trade.getPayWay().equals(PayWay.WECHAT)) {
                FACCOUNTID.put("FNumber", kingdeeWechat);
                payOrderSettlement.setFACCOUNTID(FACCOUNTID);
            } else if (trade.getPayWay() != null && trade.getPayWay().equals(PayWay.UNIONPAY)) {
                FACCOUNTID.put("FNumber", kingdeeUnionpay);
                payOrderSettlement.setFACCOUNTID(FACCOUNTID);
            } else if (trade.getPayWay() != null && trade.getPayWay().equals(PayWay.CCB)) {
                FACCOUNTID.put("FNumber", kingdeeBocomPay);
                payOrderSettlement.setFACCOUNTID(FACCOUNTID);
            }

            //线下支付将收款银行信息推到金蝶
            if (Objects.nonNull(pay) && pay.getPayType().equals(PayType.OFFLINE)) {
                if (CollectionUtils.isNotEmpty(receivableList)) {
                    Receivable receivable = receivableList.stream().findFirst().orElse(null);
                    OfflineAccountGetByIdRequest offlineAccountGetByIdRequest = new OfflineAccountGetByIdRequest();
                    offlineAccountGetByIdRequest.setOfflineAccountId(receivable.getOfflineAccountId());
                    BaseResponse<OfflineAccountGetByIdResponse> offlineAccountResponse = offlineQueryProvider.getById(offlineAccountGetByIdRequest);
                    if (Objects.nonNull(offlineAccountResponse) && Objects.nonNull(offlineAccountResponse.getContext())) {
                        OfflineAccountGetByIdResponse offlineAccount = offlineAccountResponse.getContext();
                        if (StringUtils.isNotBlank(offlineAccount.getBankCode())) {
                            FACCOUNTID.put("FNumber", offlineAccount.getBankNo());
                        }
                    }
                }
                payOrderSettlement.setFACCOUNTID(FACCOUNTID);
            }
            freceivebillentry.add(payOrderSettlement);
            payOrder.setFRECEIVEBILLENTRY(freceivebillentry);

            //登录财务系统
            Map<String, Object> requestLogMap = new HashMap<>();
            requestLogMap.put("user", kingdeeUser);
            requestLogMap.put("pwd", kingdeePwd);
            String loginToken = kingdeeLoginUtils.userLoginKingdee(requestLogMap, loginUrl);
            if (StringUtils.isNotEmpty(loginToken)) {
                //提交财务单
                Map<String, Object> requestMap = new HashMap<>();
                requestMap.put("Model", payOrder);
                log.info("收款单推金蝶---实际推送内容-->" + JSONObject.toJSONString(payOrder));
                HttpCommonResult httpCommonResult = HttpCommonUtil.postHeader(payUrl, requestMap, loginToken);

                KingDeeResult kingDeeResult = JSONObject.parseObject(httpCommonResult.getResultData(), KingDeeResult.class);
                logger.info("TradeService.pushPayOrderKingdee result1:{} code:{}", httpCommonResult.getResultData(), kingDeeResult.getCode());
                if (Objects.nonNull(kingDeeResult) && kingDeeResult.getCode().equals("0")) {
                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PUSHSUCCESS.toStatus());
                    resultState = true;
                } else {
                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
                }
                tradePushKingdeePayOrder.setInstructions(httpCommonResult.getResultData());
            } else {
                logger.error("TradeService.pushPayOrderKingdee push kingdee error");
                String res = "金蝶登录失败";
                tradePushKingdeePayOrder.setInstructions(res);
                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
            }
        } catch (Exception e) {
            logger.error("TradeService.pushPayOrderKingdee error:{}", e);
            String res = "金蝶推送失败";
            tradePushKingdeePayOrder.setInstructions(res);
            tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
        } finally {
            if (number == 0) {
                tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
                tradePushKingdeePayOrder.setOrderCode(trade.getId());
                tradePushKingdeePayOrder.setPayType(payWay.toValue());
                tradePushKingdeePayOrder.setCreateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
                if (payOrders.getPayType().equals(PayType.OFFLINE)) {
                    tradePushKingdeePayOrder.setPracticalPrice(payOrders.getPayOrderRealPayPrice());
                } else {
                    tradePushKingdeePayOrder.setPracticalPrice(payOrders.getTotalPrice());
                }
                tradePushKingdeePayRepository.saveAndFlush(tradePushKingdeePayOrder);
            } else {
                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
                tradePushKingdeePayRepository.updatePushKingdeePayOrderState(tradePushKingdeePayOrder);
            }
            return resultState;
        }
    }

    public void pushPayOrderCommissionKingdee(Trade trade, PayOrderResponse payOrders,PayWay payWay, String fdate, String companyCodeNew, String suffix) {

        log.info("收款单推佣金送金蝶 单号:{},佣金:{}", trade.getId(), payOrders.getTotalPrice());

        Integer number = tradePushKingdeePayRepository.selectPushKingdeePayOrderNumber(payOrders.getPayOrderId());
        TradePushKingdeePayOrder tradePushKingdeePayOrder = new TradePushKingdeePayOrder();
        tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.CREATE.toStatus());
        String tid = trade.getId() + suffix;
        try {
            if (!checkPayOrderKingdee(trade, payOrders, payWay, tradePushKingdeePayOrder)) {
                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PARAMETERERROR.toStatus());
            }
            KingdeePayOrder payOrder = new KingdeePayOrder();
            payOrder.setFDate(StringUtils.isNotBlank(fdate) ? fdate : DateUtil.nowDate());
            payOrder.setOrderNumber(tid);
            Map FCustId = new HashMap();

            log.info("收款单推佣金送金蝶 单号:{},商家编码:{}", tid, companyCodeNew);

            FCustId.put("FNumber", companyCodeNew);
            payOrder.setFCustId(FCustId);
            Map FPAYORGID = new HashMap();
            FPAYORGID.put("FNumber", kingdeeOrganization);
            payOrder.setFPAYORGID(FPAYORGID);//收款组织
            //收款方式
            payOrder.setFColType("线上");

            List<KingdeePayOrderSettlement> freceivebillentry = new ArrayList<>();
            KingdeePayOrderSettlement payOrderSettlement = new KingdeePayOrderSettlement();
            Map FSETTLETYPEID = new HashMap();
            FSETTLETYPEID.put("FNumber", payWay.toValue());

            payOrderSettlement.setFSETTLETYPEID(FSETTLETYPEID);//结算方式
            payOrderSettlement.setFRECTOTALAMOUNTFOR(payOrders.getTotalPrice().toString());

            //销售订单号
            payOrderSettlement.setF_ora_YDDH(tid);

            Map FACCOUNTID = new HashMap();

            FACCOUNTID.put("FNumber", kingdeeCcbpay);
            payOrderSettlement.setFACCOUNTID(FACCOUNTID);

            freceivebillentry.add(payOrderSettlement);
            payOrder.setFRECEIVEBILLENTRY(freceivebillentry);

            //登录财务系统
            Map<String, Object> requestLogMap = new HashMap<>();
            requestLogMap.put("user", kingdeeUser);
            requestLogMap.put("pwd", kingdeePwd);
            String loginToken = kingdeeLoginUtils.userLoginKingdee(requestLogMap, loginUrl);
            if (StringUtils.isNotEmpty(loginToken)) {
                //提交财务单
                Map<String, Object> requestMap = new HashMap<>();
                requestMap.put("Model", payOrder);
                log.info("收款佣金单推金蝶---实际推送内容-->" + JSONObject.toJSONString(payOrder));
                HttpCommonResult httpCommonResult = HttpCommonUtil.postHeader(payUrl, requestMap, loginToken);

                KingDeeResult kingDeeResult = JSONObject.parseObject(httpCommonResult.getResultData(), KingDeeResult.class);
                log.info("TradeService.pushPayOrderCommissionKingdee result1:{} code:{}", httpCommonResult.getResultData(), kingDeeResult.getCode());
                if (Objects.nonNull(kingDeeResult) && kingDeeResult.getCode().equals("0")) {
                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PUSHSUCCESS.toStatus());
                } else {
                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
                }
                tradePushKingdeePayOrder.setInstructions(httpCommonResult.getResultData());
            } else {
                log.error("TradeService.pushPayOrderCommissionKingdee push kingdee error");
                String res = "金蝶登录失败";
                tradePushKingdeePayOrder.setInstructions(res);
                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
            }
        } catch (Exception e) {
            log.error("TradeService.pushPayOrderCommissionKingdee error:", e);
            String res = "金蝶推送失败";
            tradePushKingdeePayOrder.setInstructions(res);
            tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
        } finally {
            if (number == 0) {
                tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
                tradePushKingdeePayOrder.setOrderCode(tid);
                tradePushKingdeePayOrder.setPayType(payWay.toValue());
                tradePushKingdeePayOrder.setCreateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setPracticalPrice(payOrders.getTotalPrice());
                tradePushKingdeePayRepository.saveAndFlush(tradePushKingdeePayOrder);
            } else {
                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
                tradePushKingdeePayRepository.updatePushKingdeePayOrderState(tradePushKingdeePayOrder);
            }
        }
    }

    public void pushPayOrderFreightKingdee(Trade trade, PayOrderResponse payOrders,PayWay payWay, String fdate) {

        log.info("收款单推运费送金蝶 单号:{},运费:{}", trade.getId(), payOrders.getTotalPrice());

        Integer number = tradePushKingdeePayRepository.selectPushKingdeePayOrderNumber(payOrders.getPayOrderId());
        TradePushKingdeePayOrder tradePushKingdeePayOrder = new TradePushKingdeePayOrder();
        tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.CREATE.toStatus());
        String tid = trade.getId() + "YF";
        try {
            if (!checkPayOrderKingdee(trade, payOrders, payWay, tradePushKingdeePayOrder)) {
                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PARAMETERERROR.toStatus());
            }
            KingdeePayOrder payOrder = new KingdeePayOrder();
            payOrder.setFDate(StringUtils.isNotBlank(fdate) ? fdate : DateUtil.nowDate());
            payOrder.setOrderNumber(tid);
            Map FCustId = new HashMap();

            Long supplierId = trade.getSupplier().getSupplierId();
            String companyCodeNew = companyInfoQueryProvider.getCompanyInfoById(CompanyInfoByIdRequest.builder().companyInfoId(supplierId).build()).getContext().getCompanyCodeNew();
            log.info("收款单推运费送金蝶 单号:{},商家编码:{}", tid, companyCodeNew);

            FCustId.put("FNumber", companyCodeNew);
            payOrder.setFCustId(FCustId);
            Map FPAYORGID = new HashMap();
            FPAYORGID.put("FNumber", kingdeeOrganization);
            payOrder.setFPAYORGID(FPAYORGID);//收款组织
            //收款方式
            payOrder.setFColType("线上");

            List<KingdeePayOrderSettlement> freceivebillentry = new ArrayList<>();
            KingdeePayOrderSettlement payOrderSettlement = new KingdeePayOrderSettlement();
            Map FSETTLETYPEID = new HashMap();
            FSETTLETYPEID.put("FNumber", payWay.toValue());

            payOrderSettlement.setFSETTLETYPEID(FSETTLETYPEID);//结算方式
            payOrderSettlement.setFRECTOTALAMOUNTFOR(payOrders.getTotalPrice().toString());

            //销售订单号
            payOrderSettlement.setF_ora_YDDH(tid);

            Map FACCOUNTID = new HashMap();

            FACCOUNTID.put("FNumber", kingdeeCcbpay);
            payOrderSettlement.setFACCOUNTID(FACCOUNTID);

            freceivebillentry.add(payOrderSettlement);
            payOrder.setFRECEIVEBILLENTRY(freceivebillentry);

            //登录财务系统
            Map<String, Object> requestLogMap = new HashMap<>();
            requestLogMap.put("user", kingdeeUser);
            requestLogMap.put("pwd", kingdeePwd);
            String loginToken = kingdeeLoginUtils.userLoginKingdee(requestLogMap, loginUrl);
            if (StringUtils.isNotEmpty(loginToken)) {
                //提交财务单
                Map<String, Object> requestMap = new HashMap<>();
                requestMap.put("Model", payOrder);
                log.info("收款佣金单推金蝶---实际推送内容-->" + JSONObject.toJSONString(payOrder));
                HttpCommonResult httpCommonResult = HttpCommonUtil.postHeader(payUrl, requestMap, loginToken);

                KingDeeResult kingDeeResult = JSONObject.parseObject(httpCommonResult.getResultData(), KingDeeResult.class);
                log.info("TradeService.pushPayOrderFreightKingdee result1:{} code:{}", httpCommonResult.getResultData(), kingDeeResult.getCode());
                if (Objects.nonNull(kingDeeResult) && kingDeeResult.getCode().equals("0")) {
                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PUSHSUCCESS.toStatus());
                } else {
                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
                }
                tradePushKingdeePayOrder.setInstructions(httpCommonResult.getResultData());
            } else {
                log.error("TradeService.pushPayOrderFreightKingdee push kingdee error");
                String res = "金蝶登录失败";
                tradePushKingdeePayOrder.setInstructions(res);
                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
            }
        } catch (Exception e) {
            log.error("TradeService.pushPayOrderFreightKingdee error:", e);
            String res = "金蝶推送失败";
            tradePushKingdeePayOrder.setInstructions(res);
            tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
        } finally {
            if (number == 0) {
                tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
                tradePushKingdeePayOrder.setOrderCode(tid);
                tradePushKingdeePayOrder.setPayType(payWay.toValue());
                tradePushKingdeePayOrder.setCreateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setPracticalPrice(payOrders.getTotalPrice());
                tradePushKingdeePayRepository.saveAndFlush(tradePushKingdeePayOrder);
            } else {
                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
                tradePushKingdeePayOrder.setPayCode(payOrders.getPayOrderId());
                tradePushKingdeePayRepository.updatePushKingdeePayOrderState(tradePushKingdeePayOrder);
            }
        }
    }

    /**
     * 校验支付参数
     *
     * @param trade
     * @param payOrder
     * @param payWay
     * @param tradePushKingdeePayOrder
     * @return
     */
    private Boolean checkPayOrderKingdee(Trade trade, PayOrderResponse payOrder, PayWay payWay, TradePushKingdeePayOrder tradePushKingdeePayOrder) {
        if (trade.getId() == null) {
            logger.info("TradeService.pushPayOrderKingdee Lack tId");
            tradePushKingdeePayOrder.setInstructions("Lack tId");
            return false;
        }
        if (StringUtils.isEmpty(trade.getBuyer().getAccount())) {
            logger.info("TradeService.pushPayOrderKingdee Lack FCustId");
            tradePushKingdeePayOrder.setInstructions("Lack FCustId");
            return false;
        }
        if (payWay == null) {
            logger.info("TradeService.pushPayOrderKingdee Lack payWay");
            tradePushKingdeePayOrder.setInstructions("Lack payWay");
            return false;
        }
//        if (trade.getPayWay() == null){
//            logger.info("TradeService.pushPayOrderKingdee Lack FSETTLETYPEID");
//            tradePushKingdeePayOrder.setInstructions("Lack FSETTLETYPEID");
//            return false;
//        }
        if (payOrder.getTotalPrice() == null) {
            logger.info("TradeService.pushPayOrderKingdee Lack FRECTOTALAMOUNTFOR");
            tradePushKingdeePayOrder.setInstructions("Lack FRECTOTALAMOUNTFOR");
            return false;
        }
        return true;
    }

    /**
     * 囤货的提货
     *
     * @param trade
     * @param payOrderOld
     * @param operator
     */
    @Transactional
    @LcnTransaction
    public void payTakeGoodCallBackOnline(Trade trade, PayOrder payOrderOld, Operator operator) {
        try {
            if (payOrderOld.getReceivable() == null) {
                BaseResponse<PayTradeRecordResponse> response;
                if (trade.getPayInfo().isMergePay()) {
                    response = payQueryProvider.getTradeRecordByOrderCode(new
                            TradeRecordByOrderCodeRequest(trade.getParentId()));
                } else {
                    response = payQueryProvider.getTradeRecordByOrderCode(new
                            TradeRecordByOrderCodeRequest(trade.getId()));
                }
                PayChannelItemResponse chanelItemResponse = payQueryProvider.getChannelItemById(new
                        ChannelItemByIdRequest(response.getContext().getChannelItemId())).getContext();
                ReceivableAddRequest param = new ReceivableAddRequest(trade.getPayOrderId(),Arrays.asList(trade.getPayOrderId()), LocalDateTime.now()
                        .toString()
                        , trade.getSellerRemark(), 0L, chanelItemResponse.getName(), chanelItemResponse.getId(), null);
                addReceivable(param, operator.getPlatform()).ifPresent(payOrder ->
                        //订单状态变更
                        payCallBack(trade.getId(), payOrder.getPayOrderPrice(), operator, PayWay.valueOf
                                (chanelItemResponse
                                        .getChannel().toUpperCase()))
                );
                logger.info("TradeService.payCallBackOnline PayOrderStatus:{}", payOrderOld.getPayOrderStatus());
//                //已支付
//                if (PayOrderStatus.PAYED.equals(payOrderOld.getPayOrderStatus())){
//                    pushPayOrderKingdee(trade,payOrderOld);
//                }
                String customerId = trade.getBuyer().getId();
                //减少囤货数量//多个商品
                List<TradeItem> tradeItems = trade.getTradeItems();
                tradeItems.stream().forEach(tradeItem -> {
                    String spuId = tradeItem.getSpuId();
                    String skuId = tradeItem.getSkuId();
                    //购买数量
                    Long num = tradeItem.getNum();
                    //通过spuId+skuId+用户id查询囤货表的数据看看是不是有多个，有多个就根据时间减他妈的
                    List<PilePurchase> pilePurchases = pilePurchaseRepository.queryPilePurchase(customerId, spuId, skuId);
                    if (CollectionUtils.isNotEmpty(pilePurchases)) {
                        for (PilePurchase pilePurchase : pilePurchases) {
                            //每一笔的购买数量从
                            Long goodsNum = pilePurchase.getGoodsNum();
                            if (goodsNum >= num) {
                                //减去提货数量并且跳出循环
                                pilePurchase.setGoodsNum(goodsNum - num);
                                break;
                            } else {
                                //当购买数量小于提货数量,清空购买数量，减少提货数量
                                pilePurchase.setGoodsNum(0L);
                                num = num - pilePurchase.getGoodsNum();
                            }
                        }
                        //减完以后
                        pilePurchaseRepository.saveAll(pilePurchases);
                    }
                });

                //配送方式：第三方物流，收货地址为外省且满30件商品时，赠送2元/箱至客户存款;
//                giveMoneyToCustomerWallet(trade);
            }
        } catch (SbcRuntimeException e) {
            logger.error("The {} order status modifies the exception.error={}", trade.getId(), e);
            throw new SbcRuntimeException(e.getErrorCode(), e.getParams());
        }
    }


    @LcnTransaction
    @Transactional
    public void payCallBackOnlineBatch(List<PayCallBackOnlineBatch> request, Operator operator) {
        request.forEach(i -> payCallBackOnline(i.getTrade(), i.getPayOrderOld(), operator));
    }

    @LcnTransaction
    @Transactional
    public void payCallBackOnlineBatchNewPile(List<PayCallBackOnlineBatch> request, Operator operator) {
        request.forEach(i -> payCallBackOnlineNewPile(i.getNewPileTrade(), i.getPayOrderOld(), operator));
    }


    @LcnTransaction
    @Transactional
    public void payTakeGoodCallBackOnlineBatch(List<PayCallBackOnlineBatch> request, Operator operator) {
        request.forEach(i -> payTakeGoodCallBackOnline(i.getTrade(), i.getPayOrderOld(), operator));
    }


    /**
     * 获取支付单
     *
     * @param payOrderId
     * @return
     */
    public PayOrder findPayOrder(String payOrderId) {
        return payOrderRepository.findById(payOrderId).orElse(null);
    }


    /**
     * 功能描述: <br>  手动推送WMS第三方接口
     * 〈〉
     *
     * @Param: []
     * @Return: void
     * @Author:
     * @Date: 2020/5/18 15:58
     */
    @LcnTransaction
    public void pushWMSOrder(String tid) {
        Trade trade = detail(tid);
        if (Objects.isNull(trade)) {
            throw new SbcRuntimeException();
        }

        if (wmsAPIFlag && AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
            //拼团在订单那提交的时候不推送，在成团时推送
            if (Objects.isNull(trade.getGrouponFlag()) || !trade.getGrouponFlag()) {
                try {
                    this.pushWMSOrder(trade, false, trade.getNewVilageFlag());
                } catch (Exception e) {
                    log.info("=====订单推送报错日志：" + e + ";  订单编号:" + trade.getId());
                }
            }
        }
        tradeService.updateTrade(trade);

        //扣除乡镇件库存
        if (trade.getVillageFlag()) {
            verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
            verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
        }
    }

    /**
     * 功能描述: <br>  手动推送WMS第三方接口
     * 〈〉
     *
     * @Param: []
     * @Return: void
     * @Author:
     * @Date: 2020/5/18 15:58
     */
    @LcnTransaction
    public void pushWMSOrder2(String tid) {
        Trade trade = detail(tid);
        if (Objects.isNull(trade)) {
            throw new SbcRuntimeException();
        }

        if (AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
            //拼团在订单那提交的时候不推送，在成团时推送
            if (Objects.isNull(trade.getGrouponFlag()) || !trade.getGrouponFlag()) {
                try {
                    this.pushWMSOrder2(trade, false, trade.getNewVilageFlag());
                } catch (Exception e) {
                    log.info("=====订单推送报错日志：" + e + ";  订单编号:" + trade.getId());
                }
            }
        } else {
            log.info("推送wms未完成===tid:{} ,订单状态不是已经审核", tid);
        }
        tradeService.updateTrade(trade);

        //扣除乡镇件库存
        if (trade.getVillageFlag()) {
            verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
            verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
        }
    }


    /**
     * 订单支付回调
     *
     * @param tid
     * @param payOrderPrice
     * @param operator
     */
    @Transactional(rollbackFor = Exception.class)
    @LcnTransaction
    public void payCallBack(String tid, BigDecimal payOrderPrice, Operator operator, PayWay payWay) {
        Trade trade = detail(tid);
        log.info("payCallBack---------------->" + JSONObject.toJSONString(trade));
        TradePrice tradePrice = trade.getTradePrice();
        if (payOrderPrice.compareTo(tradePrice.getTotalPrice()) != 0) {
            throw new SbcRuntimeException("K-050101", new Object[]{tid, tradePrice.getTotalPrice(), payOrderPrice});
        }

        trade.getTradePrice().setTotalPayCash(payOrderPrice);
        String eventStr = trade.getTradeState().getPayState() == PayState.UNCONFIRMED ? "确认支付" : "支付";
        if (osUtil.isS2b()) {
            trade.getTradeState().setPayState(operator.getPlatform() == Platform.PLATFORM ? PayState.PAID : PayState
                    .UNCONFIRMED);
        } else {
            trade.getTradeState().setPayState(operator.getPlatform() == Platform.BOSS ? PayState.PAID : PayState
                    .UNCONFIRMED);
        }

        if (PayType.fromValue(Integer.parseInt(trade.getPayInfo().getPayTypeId())) == PayType.ONLINE) {
            if (Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag()) {
                trade = grouponOrderService.handleGrouponOrderPaySuccess(trade);

            }
            trade.getTradeState().setPayState(PayState.PAID);
            trade.setPayWay(payWay);
            operator.setPlatform(Platform.CUSTOMER);
            operator.setName(trade.getBuyer().getName());
            operator.setAccount(trade.getBuyer().getAccount());
            operator.setUserId(trade.getBuyer().getId());

        }

        log.info("=============邀新统计开始，参数：" + trade.getTradeState().getPayState().getDescription());
        if (trade.getTradeState().getPayState() == PayState.PAID) {
            //记录邀新用户下单统计
            String employeeId = trade.getBuyer().getEmployeeId();
            log.info("=============邀新统计，参数：" + trade.getBuyer().getEmployeeId());
            //TODO:提货支付回调不统计
            if (StringUtils.isNotEmpty(trade.getBuyer().getEmployeeId()) && TradeActivityTypeEnum.TRADE.toActivityType().equals(trade.getActivityType())) {
                BigDecimal totalPrice = trade.getTradePrice().getTotalPrice();
                Long goodsTotalNum = trade.getGoodsTotalNum();
                invitationStatisticsProvider.tradeStatistics(InvitationTradeStatisticsRequest.builder().employeeId(employeeId).orderId(tid).goodsCount(goodsTotalNum).tradePrice(totalPrice).build());
            }
            PayOrderResponse payOrder = payOrderService.findPayOrderById(trade.getPayOrderId());
            //线下付款订单付款时间取实际扭转为已付款的时间
            trade.getTradeState().setPayTime(LocalDateTime.now());
            // 查询交易流水号
            BaseResponse<PayTradeRecordResponse> payTradeRecord;
            if (trade.getPayInfo().isMergePay()) {
                payTradeRecord =
                        payQueryProvider.getTradeRecordByOrderCode(new TradeRecordByOrderCodeRequest(trade.getParentId()));
            } else {
                payTradeRecord =
                        payQueryProvider.getTradeRecordByOrderCode(new TradeRecordByOrderCodeRequest(trade.getId()));
            }
            String tradeNo = Objects.isNull(payTradeRecord.getContext()) ? null :
                    payTradeRecord.getContext().getTradeNo();
            //已支付，添加对账记录
            AccountRecordAddRequest record = AccountRecordAddRequest.builder()
                    .amount(payOrderPrice)
                    .customerId(trade.getBuyer().getId())
                    .customerName(trade.getBuyer().getName())
                    .orderCode(trade.getId())
                    .tradeNo(tradeNo)
                    .orderTime(trade.getTradeState().getCreateTime())
                    .payWay(payWay)
                    .storeId(trade.getSupplier().getStoreId())
                    .supplierId(trade.getSupplier().getSupplierId())
                    .tradeTime(payOrder.getReceiveTime())
                    .type((byte) 0)
                    .build();
            accountRecordProvider.add(record);

            //已支付或者，添加订单开票
            //删除存在的开票信息
            orderInvoiceService.deleteOrderInvoiceByOrderNo(trade.getId());
            //订单开票
            this.createOrderInvoice(trade, operator);
            //推金蝶和wms都放在一个延时队列中3分钟后推送
            if (wmsAPIFlag && orderCommonService.wmsCanTrade(trade)) {
                if (Objects.isNull(trade.getGrouponFlag()) || !trade.getGrouponFlag()) {
                    if (PaymentOrder.PAY_FIRST.equals(trade.getPaymentOrder())) {
                        logger.info("TradeService.payCallBackOnline mq push pay order id:{} kingdeeOpenState", trade.getId(), kingdeeOpenState);
                        if (kingdeeOpenState && orderCommonService.erpCanTrade(trade)) {
                            //满时件不推金蝶
                            TradeCachePushKingdeeOrder tradeCachePushKingdeeOrder = tradeCachePushKingdeeOrderRepository.findByCachePushKingdeeOrder(tid);
                            if (Objects.isNull(tradeCachePushKingdeeOrder)) {
                                //老逻辑，推送wms
                                orderProducerService.pushOrderPayWMS(trade.getId());
                                trade.setWMSPushFlag(true);
//                                if(pushConfirmOrder(trade)){
//                                    trade.setWMSPushFlag(true);
//                                }else{
//                                    trade.setWMSPushFlag(false);
//                                }
                            }
                            //推新金蝶
                            pushToErpAfterPayCallBack(trade, payOrder);
                        } else {
                            //老逻辑，推送wms
                            orderProducerService.pushOrderPayWMS(trade.getId());
                            trade.setWMSPushFlag(true);
//                            //老逻辑，推送wms
//                            if(pushConfirmOrder(trade)){
//                                trade.setWMSPushFlag(true);
//                            }else{
//                                trade.setWMSPushFlag(false);
//                            }
                        }
                    }
                }
            }

            // 佣金推送ERP 收款单 非自营商家
            if (wmsAPIFlag && Objects.equals(payWay, PayWay.CCB)) {
                String tradeId = trade.getId();
                log.info("非自营商家，佣金部分推送ERP收款单：{}", tradeId);
                orderProducerService.pushCommisionToKingdee(tradeId, 2 * 60 * 1000L);
            }
            boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
            //是否是自提订单如果不是发送自提码


            if (!goodsFirst) {
                if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                    PickUpRecord pickUpRecord = this.sendPickUpCode(trade);
                    trade.getTradeWareHouse().setPickUpCode(pickUpRecord.getPickUpCode());
                    pickUpRecordService.add(pickUpRecord);
                }
            }
            //插入支付单
            this.savePayOrder(trade, payOrder, payWay);
        }
        if(DeliverWay.TO_DOOR_PICK == trade.getDeliverWay()){
            trade.getNetWorkVO().setPickNote(getToDoorPickNote(null));
        }

        if (trade.getTradeState().getFlowState() == FlowState.CONFIRMED && trade.getTradeState().getPayState() ==
                PayState.PAID) {
            // 订单支付后，发送MQ消息
            //this.sendMQForOrderPayed(trade);
            //已支付并已收货，结束订单流程
            StateRequest stateRequest = StateRequest.builder()
                    .tid(tid)
                    .operator(operator)
                    .event(TradeEvent.COMPLETE)
                    .data(trade)
                    .build();
            tradeFSMService.changeState(stateRequest);
            // 订单完成后，发送MQ消息
            this.sendMQForOrderPayedAndComplete(trade);
            //如果是自订单需要扭转为待自提
        } else if (trade.getTradeState().getFlowState() == FlowState.AUDIT
                && trade.getTradeState().getPayState() == PayState.PAID
                && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
            // 订单支付后，发送MQ消息
            this.sendMQForOrderPayed(trade);
            trade.getTradeState().setFlowState(FlowState.TOPICKUP);

            //添加操作日志
            String detail = String.format("订单[%s]已付款,待自提,操作人:%s", trade.getId(), eventStr, operator.getName());
            trade.appendTradeEventLog(TradeEventLog
                    .builder()
                    .operator(operator)
                    .eventType("订单待自提")
                    .eventTime(LocalDateTime.now())
                    .eventDetail(detail)
                    .build());
            tradeService.updateTrade(trade);
            this.operationLogMq.convertAndSend(operator, TradeEvent.PAY.getDescription(), detail);
        } else if (trade.getTradeState().getFlowState() != FlowState.CONFIRMED && trade.getTradeState().getPayState() ==
                PayState.PAID) {
            // 订单支付后，发送MQ消息
            this.sendMQForOrderPayed(trade);


            //添加操作日志
            String detail = String.format("订单[%s]已%s,操作人：%s", trade.getId(), eventStr, operator.getName());
            trade.appendTradeEventLog(TradeEventLog
                    .builder()
                    .operator(operator)
                    .eventType(TradeEvent.PAY.getDescription())
                    .eventTime(LocalDateTime.now())
                    .eventDetail(detail)
                    .build());
            tradeService.updateTrade(trade);
            this.operationLogMq.convertAndSend(operator, TradeEvent.PAY.getDescription(), detail);
        } else {
            //添加操作日志
            String detail = String.format("订单[%s]已%s,操作人：%s", trade.getId(), eventStr, operator.getName());
            trade.appendTradeEventLog(TradeEventLog
                    .builder()
                    .operator(operator)
                    .eventType(TradeEvent.PAY.getDescription())
                    .eventTime(LocalDateTime.now())
                    .eventDetail(detail)
                    .build());
            tradeService.updateTrade(trade);
            this.operationLogMq.convertAndSend(operator, TradeEvent.PAY.getDescription(), detail);
        }
        //拼团成功
        if (Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag() &&
                Objects.nonNull(trade.getTradeGroupon()) && GrouponOrderStatus.COMPLETE == trade.getTradeGroupon().getGrouponOrderStatus()) {
            StateRequest stateRequest = StateRequest
                    .builder()
                    .tid(trade.getId())
                    .operator(operator)
                    .event(TradeEvent.JOIN_GROUPON)
                    .build();
            tradeFSMService.changeState(stateRequest);
        }
        //拼团失败
        if (Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag() &&
                Objects.nonNull(trade.getTradeGroupon()) && GrouponOrderStatus.FAIL == trade.getTradeGroupon().getGrouponOrderStatus()) {
            //自动退款流程
            orderProducerService.sendGrouponOrderAutoRefund(trade);
        }
        boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        if (!goodsFirst && trade.getTradeState().getPayState() == PayState.PAID) {
            //短信推送
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                this.sendPickUpMessage(trade);
            }
        }
        if (trade.getTradeState().getPayState().equals(PayState.PAID)) {
            //购买指定商品赠券
            this.buyGoodsSendCoupon(trade.getId());
            log.info("==================热销排行MQ===================={}", trade.getId());
            //热销排行 埋点
            this.hotSaleArea(trade.getId());
        }
    }

    public void pushToErpAfterPayCallBack(Trade trade, PayOrderResponse payOrder) {
        pushSaleOrderToErp(trade);
        TradePushPayOrderGroupon pushPayOrderGroupon = new TradePushPayOrderGroupon();
        pushPayOrderGroupon.setPayCode(payOrder.getPayOrderId());
        pushPayOrderGroupon.setOrderCode(trade.getId());
        orderProducerService.delayPushingPaymentOrders(pushPayOrderGroupon);
    }

    /**
     * 热销排行榜 MQ
     *
     * @param tid
     */
    private void hotSaleArea(String tid) {
        log.info("===================>热销排行榜MQ发送开始，tid：：：{}", tid);
        orderProducerService.hotSaleArea(tid);
        log.info("===================>热销排行榜MQ发送完成，tid：：：{}", tid);
    }

    /**
     * 发送购买指定商品赠券MQ
     *
     * @param tid
     */
    private void buyGoodsSendCoupon(String tid) {
        log.info("===================>购买指定商品赠券MQ发送开始，tid：：：{}", tid);
        orderProducerService.buyGoodsSendCoupon(tid);
        log.info("===================>购买指定商品赠券MQ发送完成，tid：：：{}", tid);
    }

    private void updateProviderTrade(Trade trade) {
        String parentId = trade.getId();
        List<ProviderTrade> tradeList =
                providerTradeService.findListByParentId(parentId);
        if (CollectionUtils.isNotEmpty(tradeList)) {
            tradeList.forEach(childTradeVO -> {
                childTradeVO.getTradeState().setPayState(PayState.PAID);
                TradeUpdateRequest tradeUpdateRequest = new TradeUpdateRequest(KsBeanUtil.convert(childTradeVO, TradeUpdateDTO.class));
                providerTradeService.updateProviderTrade(tradeUpdateRequest);
            });
        }
    }


    /**
     * 发送订单支付、订单完成MQ消息
     *
     * @param trade
     */
    private void sendMQForOrderPayedAndComplete(Trade trade) {
        TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
        orderProducerService.sendMQForOrderPayedAndComplete(tradeVO);
    }

    /**
     * 订单支付后，发送MQ消息
     *
     * @param trade
     */
    private void sendMQForOrderPayed(Trade trade) {
        // trade对象转tradeVO对象
        TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
        orderProducerService.sendMQForOrderPayed(tradeVO);

        String customerId = trade.getBuyer().getId();
        String pic = trade.getTradeItems().get(0).getPic();
        String account = trade.getBuyer().getAccount();

        Map<String, Object> map = new HashMap<>();
        map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
        map.put("id", trade.getId());
        map.put("node", OrderProcessType.ORDER_PAY_SUCCESS.toValue());
        MessageMQRequest messageMQRequest = new MessageMQRequest();
        messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
        messageMQRequest.setNodeCode(OrderProcessType.ORDER_PAY_SUCCESS.getType());
        messageMQRequest.setParams(Lists.newArrayList(trade.getTradeItems().get(0).getSkuName()));
        messageMQRequest.setRouteParam(map);
        messageMQRequest.setCustomerId(customerId);
        messageMQRequest.setPic(pic);
        messageMQRequest.setMobile(account);
        orderProducerService.sendMessage(messageMQRequest);

        //推广订单节点触发
        if (trade.getDistributorId() != null) {
            map.put("type", NodeType.DISTRIBUTION.toValue());
            map.put("node", DistributionType.PROMOTE_ORDER_PAY_SUCCESS.toValue());
            List<String> params = Lists.newArrayList(trade.getDistributorName(),
                    trade.getTradeItems().get(0).getSkuName(),
                    trade.getCommission().toString());
            this.sendMessage(NodeType.DISTRIBUTION, DistributionType.PROMOTE_ORDER_PAY_SUCCESS, params,
                    map, trade.getInviteeId(), pic, account);
        }

    }

    /**
     * 0 元订单默认支付
     *
     * @param trade
     * @param payWay
     */
    @Transactional(rollbackFor = Exception.class)
    @LcnTransaction
    public boolean tradeDefaultPay(Trade trade, PayWay payWay) {
        String tid = trade.getId();
        if (Objects.isNull(trade.getTradePrice().getTotalPrice()) || trade.getTradePrice().getTotalPrice().compareTo
                (BigDecimal.ZERO) != 0) {
            throw new SbcRuntimeException("K-050407");
        }
        //0元自提订单推送短信信息
        PickUpRecord pickUpRecord = new PickUpRecord();
        boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        //是否是自提订单如果不是发送自提码
        if (!goodsFirst) {
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                pickUpRecord = this.sendPickUpCode(trade);
                trade.getTradeWareHouse().setPickUpCode(pickUpRecord.getPickUpCode());
                pickUpRecordService.add(pickUpRecord);
                //自提码刷新进订单
                this.updateTrade(trade);
            }
        }

        PayOrder payOrder = payOrderService.findPayOrderByOrderCode(tid).orElse(null);
        ReceivableAddRequest receivableAddRequest = null;
        if (Objects.nonNull(payOrder) && payOrder.getPayType() == PayType.OFFLINE) {
            receivableAddRequest = ReceivableAddRequest.builder().accountId(Constants.DEFAULT_RECEIVABLE_ACCOUNT)
                    .createTime(DateUtil.format(LocalDateTime.now(), DateUtil.FMT_TIME_1))
                    .payOrderId(trade.getPayOrderId()).build();
        } else {
            receivableAddRequest = ReceivableAddRequest.builder().payChannelId(Constants
                    .DEFAULT_RECEIVABLE_ACCOUNT).payChannel("默认支付").createTime(DateUtil.format(LocalDateTime.now(),
                    DateUtil.FMT_TIME_1))
                    .payOrderId(trade.getPayOrderId()).build();
        }
        this.addReceivable(receivableAddRequest, Platform.PLATFORM).ifPresent(pay ->
                this.payCallBack(tid, BigDecimal.ZERO,
                        Operator.builder().adminId("0").name("system").account("system").platform
                                (Platform.PLATFORM).build(), payWay)
        );
        //短信推送
        if (!goodsFirst) {
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
           /* smsSendUtil.send(SmsTemplate.CUSTOMER_PASSWORD, new String[]{trade.getConsignee().getPhone()},
                    trade.getId(), pickUpRecord.getPickUpCode());*/
                this.sendPickUpMessage(trade);
            }
        }

        return true;
    }

    /**
     * 提货 0元订单默认支付
     *
     * @param trade
     * @param payWay
     */
    @Transactional(rollbackFor = Exception.class)
    @LcnTransaction
    public boolean pileTradeDefaultPay(Trade trade, PayWay payWay) {
        String tid = trade.getId();
        if (Objects.isNull(trade.getTradePrice().getTotalPrice()) || trade.getTradePrice().getTotalPrice().compareTo
                (BigDecimal.ZERO) != 0) {
            throw new SbcRuntimeException("K-050407");
        }
        //0元自提订单推送短信信息
        PickUpRecord pickUpRecord = new PickUpRecord();
        boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        //是否是自提订单如果不是发送自提码
        if (!goodsFirst) {
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                pickUpRecord = this.sendPickUpCode(trade);
                trade.getTradeWareHouse().setPickUpCode(pickUpRecord.getPickUpCode());
                pickUpRecordService.add(pickUpRecord);
                //自提码刷新进订单
                this.updateTrade(trade);
            }
        }

        PayOrder payOrder = payOrderService.findPayOrderByOrderCode(tid).orElse(null);
        ReceivableAddRequest receivableAddRequest = null;
        if (Objects.nonNull(payOrder) && payOrder.getPayType() == PayType.OFFLINE) {
            receivableAddRequest = ReceivableAddRequest.builder().accountId(Constants.DEFAULT_RECEIVABLE_ACCOUNT)
                    .createTime(DateUtil.format(LocalDateTime.now(), DateUtil.FMT_TIME_1))
                    .payOrderId(trade.getPayOrderId()).build();
        } else {
            receivableAddRequest = ReceivableAddRequest.builder().payChannelId(Constants
                    .DEFAULT_RECEIVABLE_ACCOUNT).payChannel("默认支付").createTime(DateUtil.format(LocalDateTime.now(),
                    DateUtil.FMT_TIME_1))
                    .payOrderId(trade.getPayOrderId()).build();
        }
        this.addReceivable(receivableAddRequest, Platform.PLATFORM).ifPresent(pay ->
                this.payCallBack(tid, BigDecimal.ZERO,
                        Operator.builder().adminId("0").name("system").account("system").platform
                                (Platform.PLATFORM).build(), payWay)
        );
        //短信推送
        if (!goodsFirst) {
            if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                this.sendPickUpMessage(trade);
            }
        }

        return true;
    }

    /**
     * 0元订单批量支付
     *
     * @param trades
     * @param payWay
     * @return true|false
     */
    @Transactional(rollbackFor = Exception.class)
    @LcnTransaction
    public void tradeDefaultPayBatch(List<Trade> trades, PayWay payWay) {
        trades.forEach(i -> this.tradeDefaultPay(i, payWay));
    }

    /**
     * 新增线下收款单(包含线上线下的收款单)
     *
     * @param receivableAddRequest receivableAddRequest
     * @param platform             platform
     * @return 收款单
     */
    @Transactional(rollbackFor = SbcRuntimeException.class)
    public Optional<PayOrder> addReceivable(ReceivableAddRequest receivableAddRequest, Platform platform) {
        PayOrder payOrder = payOrderRepository.findById(receivableAddRequest.getPayOrderId()).orElse(null);
        if (Objects.isNull(payOrder) || DeleteFlag.YES.equals(payOrder.getDelFlag())) {
            throw new SbcRuntimeException("K-070001");
        }
        if (!CollectionUtils.isEmpty(receivableRepository.findByDelFlagAndPayOrderId(DeleteFlag.NO, payOrder
                .getPayOrderId()))) {
            throw new SbcRuntimeException("K-070005");
        }

        /**1.创建收款单*/
        Receivable receivable = new Receivable();
        BeanUtils.copyProperties(receivableAddRequest, receivable);
        receivable.setOfflineAccountId(receivableAddRequest.getAccountId());
        String createTime = receivableAddRequest.getCreateTime();
        // 2020-06-02T11:41:31.123
        if (createTime.contains("T")) {
            receivable.setCreateTime(LocalDateTime.parse(createTime));
        } else {
            if (createTime.length() == 10) {
                receivable.setCreateTime(LocalDateTime.of(LocalDate.parse(createTime,
                        DateTimeFormatter.ofPattern(DateUtil.FMT_DATE_1)), LocalTime.MIN));
            } else if (createTime.length() == DateUtil.FMT_TIME_1.length()) {
                receivable.setCreateTime(LocalDateTime.parse(createTime,
                        DateTimeFormatter.ofPattern(DateUtil.FMT_TIME_1)));
            } else {
                receivable.setCreateTime(LocalDateTime.parse(createTime));
            }
        }

        receivable.setDelFlag(DeleteFlag.NO);
        receivable.setReceivableNo(generatorService.generateSid());
        receivable.setPayChannel(receivableAddRequest.getPayChannel());
        receivable.setPayChannelId(receivableAddRequest.getPayChannelId());

        //这里往缓存里面写
        payOrder.setReceivable(receivableRepository.saveAndFlush(receivable));
        /**2.更改支付单状态*/
        PayOrderStatus status;
        if (osUtil.isS2b()) {
            status = platform == Platform.PLATFORM ? PayOrderStatus.PAYED : PayOrderStatus.TOCONFIRM;
        } else {
            status = platform == Platform.BOSS ? PayOrderStatus.PAYED : PayOrderStatus.TOCONFIRM;
        }
        if (PayType.ONLINE.equals(payOrder.getPayType())) {
            status = PayOrderStatus.PAYED;
        }
        payOrder.setPayOrderStatus(status);
        payOrderService.updatePayOrder(receivableAddRequest.getPayOrderId(), status);

        if (PayOrderStatus.PAYED.equals(status)) {//如果是已支付,需要增加埋点(线上付款成功 或者 Boss端添加线下付款单)
            //ares埋点-订单-用户线上支付订单 或者 Boss端添加线下付款单
            orderAresService.dispatchFunction("payOrder", payOrder, LocalDateTime.now());
        }
        return Optional.of(payOrder);
    }

    /**
     * 新增线下收款单(包含线上线下的收款单)(包含支付回调)
     *
     * @param receivableAddRequest receivableAddRequest
     * @param platform             platform
     * @return 收款单
     */
    @Transactional(rollbackFor = SbcRuntimeException.class)
    @LcnTransaction
    public void addReceivable(ReceivableAddRequest receivableAddRequest, Platform platform, Operator operator) {
        if (CollectionUtils.isEmpty(receivableAddRequest.getPayOrderIds())){
            receivableAddRequest.setPayOrderIds(Arrays.asList(receivableAddRequest.getPayOrderId()));
        }
        receivableAddRequest.getPayOrderIds().forEach(payOrderId->{
            receivableAddRequest.setPayOrderId(payOrderId);
            PayOrder payOrder = payOrderRepository.findById(payOrderId).orElse(null);
            if (Objects.isNull(payOrder) || DeleteFlag.YES.equals(payOrder.getDelFlag())) {
                throw new SbcRuntimeException("K-070001");
            }
            if (!CollectionUtils.isEmpty(receivableRepository.findByDelFlagAndPayOrderId(DeleteFlag.NO, payOrder
                    .getPayOrderId()))) {
                throw new SbcRuntimeException("K-070005");
            }

            /**1.创建收款单*/
            Receivable receivable = new Receivable();
            BeanUtils.copyProperties(receivableAddRequest, receivable);
            receivable.setOfflineAccountId(receivableAddRequest.getAccountId());
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            if (receivableAddRequest.getCreateTime().length() == 10) {
                receivable.setCreateTime(LocalDateTime.of(LocalDate.parse(receivableAddRequest.getCreateTime(),
                        formatter), LocalTime.MIN));
            } else {
                DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                receivable.setCreateTime(LocalDateTime.parse(receivableAddRequest.getCreateTime(), df));
            }
            receivable.setDelFlag(DeleteFlag.NO);
            receivable.setReceivableNo(generatorService.generateSid());
            receivable.setPayChannel(receivableAddRequest.getPayChannel());
            receivable.setPayChannelId(receivableAddRequest.getPayChannelId());

            //这里往缓存里面写
            payOrder.setReceivable(receivableRepository.saveAndFlush(receivable));
            /**2.更改支付单状态*/
            PayOrderStatus status;
            if (osUtil.isS2b()) {
                status = platform == Platform.PLATFORM ? PayOrderStatus.PAYED : PayOrderStatus.TOCONFIRM;
            } else {
                status = platform == Platform.BOSS ? PayOrderStatus.PAYED : PayOrderStatus.TOCONFIRM;
            }
            if (PayType.ONLINE.equals(payOrder.getPayType())) {
                status = PayOrderStatus.PAYED;
            }
            payOrder.setPayOrderStatus(status);
            payOrderService.updatePayOrder(payOrderId, status);

            Trade trade = detail(payOrder.getOrderCode());
            //判断是否是先货后款
            boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED)
                    && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
            String verifyCode = "";
            if (!goodsFirst && PayOrderStatus.PAYED.equals(status)) {
                //生成自提码并推送
                if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                    trade.getTradeState().setFlowState(FlowState.TOPICKUP);
                    verifyCode = RandomStringUtils.randomNumeric(6);
                    trade.getTradeWareHouse().setPickUpCode(verifyCode);
                    pickUpRecordService.add(PickUpRecord.builder().storeId(trade.getSupplier().getStoreId())
                            .tradeId(trade.getId()).pickUpCode(verifyCode).pickUpFlag(DefaultFlag.NO)
                            .delFlag(DeleteFlag.NO).contactPhone(trade.getConsignee().getPhone()).createTime(LocalDateTime.now()).build());
                    //刷新订单
                    tradeService.updateTrade(trade);
                }
            }
            Optional.of(payOrder).ifPresent(p ->
                    this.payCallBack(p.getOrderCode(), p.getPayOrderPrice(), operator, PayWay.CASH));
            //推送短信
            if (!goodsFirst && PayOrderStatus.PAYED.equals(status)) {
                //自提订单
                if (null != trade.getDeliverWay() && trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
               /* smsSendUtil.send(SmsTemplate.CUSTOMER_PASSWORD, new String[]{trade.getConsignee().getPhone()},
                        trade.getId(), verifyCode);*/
                    this.sendPickUpMessage(trade);
                }
            }
            if (PayOrderStatus.PAYED.equals(status)) {//如果是已支付,需要增加埋点(线上付款成功 或者 Boss端添加线下付款单)
                //ares埋点-订单-用户线上支付订单 或者 Boss端添加线下付款单
                orderAresService.dispatchFunction("payOrder", payOrder, LocalDateTime.now());
            }

        });

    }


    /**
     * 确认支付单
     * //todo PayService doPay
     *
     * @param payOrderIds payOrderIds
     */
    @LcnTransaction
    @Transactional
    public void confirmPayOrder(List<String> payOrderIds, Operator operator) {
        List<PayOrder> offlinePayOrders = null;
        if (CollectionUtils.isEmpty(payOrderIds)) {
            throw new SbcRuntimeException("K-020002");
        }
        // 页面不区分线上付款还是线下付款，都会传过来，这里先过滤一遍，得到线下付款的
        List<PayOrder> payOrders = payOrderRepository.findByPayOrderIds(payOrderIds);

        if (!CollectionUtils.isEmpty(payOrders)) {
            offlinePayOrders = payOrders.stream().filter(payOrder -> payOrder.getPayType() == PayType.OFFLINE)
                    .collect(Collectors.toList());
            List<String> offlineIds = offlinePayOrders.stream().map(PayOrder::getPayOrderId).collect(Collectors
                    .toList());
            if (!CollectionUtils.isEmpty(offlineIds)) {
                payOrderRepository.updatePayOrderStatus(offlineIds, PayOrderStatus.PAYED);
            }
        }
        Optional.ofNullable(offlinePayOrders).ifPresent(payOrderVOS -> payOrderVOS.forEach(e -> {
            //
            /*  Trade trade = detail(e.getOrderCode());*/
           /* //判断是否是先货后款
            boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED)
                    && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
            String verifyCode="";
            if (!goodsFirst) {
                //生成自提码并推送
                if (null!=trade.getDeliverWay()&&trade.getDeliverWay().equals(DeliverWay.PICK_SELF)){
                    trade.getTradeState().setFlowState(FlowState.TOPICKUP);
                    verifyCode = RandomStringUtils.randomNumeric(6);
                    trade.getTradeWareHouse().setPickUpCode(verifyCode);
                    pickUpRecordService.add(PickUpRecord.builder().storeId(trade.getSupplier().getStoreId())
                            .tradeId(trade.getId()).pickUpCode(verifyCode).pickUpFlag(DefaultFlag.NO)
                            .delFlag(DeleteFlag.NO).contactPhone(trade.getConsignee().getPhone()).createTime(LocalDateTime.now()).build());
                    //刷新订单
                    tradeService.updateTrade(trade);
                }
            }*/
            this.payCallBack(e.getOrderCode(), e.getPayOrderPrice(), operator, PayWay.CASH);
          /*  //推送短信
            if (!goodsFirst) {
                //自提订单
                if (null!=trade.getDeliverWay()&&trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                    *//*smsSendUtil.send(SmsTemplate.CUSTOMER_PASSWORD, new String[]{trade.getConsignee().getPhone()},
                            trade.getId(), verifyCode);*//*
                    sendPickUpMessage(trade);
                }
            }*/
        }));
        //ares埋点-订单-用户线下支付订单,商家确认
        orderAresService.dispatchFunction("offlinePayOrder", payOrders, LocalDateTime.now());
    }

    /**
     * 线下确认支付单
     * //todo PayService doPay
     *
     * @param payOrderIds payOrderIds
     */
    @LcnTransaction
    @Transactional
    public void confirmPayOrderOffline(List<OfflineSettlementVO> payOrderIds, Operator operator) {
        List<PayOrder> offlinePayOrders = null;
        if (CollectionUtils.isEmpty(payOrderIds)) {
            throw new SbcRuntimeException("K-020002");
        }
        logger.info("TradeService.confirmPayOrderOffline payOrderId：{} realPay：{}", payOrderIds.get(0).getPayOrderId(), payOrderIds.get(0).getRealPay());
        // 页面不区分线上付款还是线下付款，都会传过来，这里先过滤一遍，得到线下付款的
        List<String> offlinePayOrderId = new ArrayList<>();
        offlinePayOrderId= payOrderIds.stream().map(OfflineSettlementVO::getPayOrderId).collect(Collectors.toList());
        //offlinePayOrderId.add(payOrderIds.get(0).getPayOrderId());
        List<PayOrder> payOrders = payOrderRepository.findByPayOrderIds(offlinePayOrderId);

        if (!CollectionUtils.isEmpty(payOrders)) {
            offlinePayOrders = payOrders.stream().filter(payOrder -> payOrder.getPayType() == PayType.OFFLINE)
                    .collect(Collectors.toList());
            offlinePayOrders.stream().forEach(orders -> {
                payOrderIds.stream().forEach(payOrder -> {
                    if (Objects.nonNull(orders) && Objects.nonNull(payOrder) && orders.getPayOrderId().equals(payOrder.getPayOrderId())) {
                        payOrderRepository.updatePayOrderStatusAmountRealPay(orders.getPayOrderId(), PayOrderStatus.PAYED, payOrder.getRealPay());
                    }
                });
            });
        }
        Optional.ofNullable(offlinePayOrders).ifPresent(payOrderVOS -> payOrderVOS.forEach(e -> {
            //
            /*  Trade trade = detail(e.getOrderCode());*/
           /* //判断是否是先货后款
            boolean goodsFirst = Objects.equals(trade.getTradeState().getAuditState(), AuditState.CHECKED)
                    && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
            String verifyCode="";
            if (!goodsFirst) {
                //生成自提码并推送
                if (null!=trade.getDeliverWay()&&trade.getDeliverWay().equals(DeliverWay.PICK_SELF)){
                    trade.getTradeState().setFlowState(FlowState.TOPICKUP);
                    verifyCode = RandomStringUtils.randomNumeric(6);
                    trade.getTradeWareHouse().setPickUpCode(verifyCode);
                    pickUpRecordService.add(PickUpRecord.builder().storeId(trade.getSupplier().getStoreId())
                            .tradeId(trade.getId()).pickUpCode(verifyCode).pickUpFlag(DefaultFlag.NO)
                            .delFlag(DeleteFlag.NO).contactPhone(trade.getConsignee().getPhone()).createTime(LocalDateTime.now()).build());
                    //刷新订单
                    tradeService.updateTrade(trade);
                }
            }*/
            this.payCallBack(e.getOrderCode(), e.getPayOrderPrice(), operator, PayWay.CASH);
          /*  //推送短信
            if (!goodsFirst) {
                //自提订单
                if (null!=trade.getDeliverWay()&&trade.getDeliverWay().equals(DeliverWay.PICK_SELF)) {
                    *//*smsSendUtil.send(SmsTemplate.CUSTOMER_PASSWORD, new String[]{trade.getConsignee().getPhone()},
                            trade.getId(), verifyCode);*//*
                    sendPickUpMessage(trade);
                }
            }*/
        }));
        //ares埋点-订单-用户线下支付订单,商家确认
        orderAresService.dispatchFunction("offlinePayOrder", payOrders, LocalDateTime.now());
    }


    /**
     * 更新订单的结算状态
     *
     * @param storeId
     * @param startTime
     * @param endTime
     */
    public void updateSettlementStatus(Long storeId, Date startTime, Date endTime) {
        Criteria criteria = new Criteria();
        criteria.andOperator(Criteria.where("supplier.storeId").is(storeId)
                , new Criteria().orOperator(
                        Criteria.where("tradeState.flowState").is(FlowState.COMPLETED),
                        Criteria.where("refundFlag").is(true))
                , Criteria.where("tradeState.deliverStatus").in(Arrays.asList(DeliverStatus.SHIPPED,
                        DeliverStatus.PART_SHIPPED))
                , Criteria.where("tradeState.endTime").lt(endTime).gte(startTime)
        );

        mongoTemplate.updateMulti(new Query(criteria), new Update().set("hasBeanSettled", true), Trade.class);
    }

    /**
     * 查询订单信息作为结算原始数据
     *
     * @param storeId
     * @param startTime
     * @param endTime
     * @param pageRequest
     * @return
     */
    public List<Trade> findTradeListForSettlement(Long storeId, Date startTime, Date endTime, Pageable pageRequest) {
        Criteria criteria = new Criteria();
        criteria.andOperator(Criteria.where("supplier.storeId").is(storeId)
                , new Criteria().orOperator(
                        Criteria.where("tradeState.flowState").is(FlowState.COMPLETED),
                        Criteria.where("tradeState.flowState").is(FlowState.VOID),
                        Criteria.where("refundFlag").is(true))
                , Criteria.where("tradeState.deliverStatus").in(Arrays.asList(DeliverStatus.SHIPPED,
                        DeliverStatus.PART_SHIPPED))
                , Criteria.where("returnOrderNum").is(0)
                , Criteria.where("tradeState.finalTime").lt(endTime).gte(startTime)
        );

        return mongoTemplate.find(
                new Query(criteria).skip(pageRequest.getPageNumber() * pageRequest.getPageSize()).limit(pageRequest
                        .getPageSize())
                , Trade.class);
    }

    /**
     * 根据快照封装订单确认页信息
     *
     * @param g
     * @return
     */
    public TradeConfirmItem getPurchaseInfo(TradeItemGroup g, List<TradeItem> gifts) {
        TradeConfirmItem item = new TradeConfirmItem();
        TradePrice price = new TradePrice();
        item.setTradeItems(g.getTradeItems());
        item.setSupplier(g.getSupplier());

        //包装费设置
        if (SaleType.RETAIL.equals(g.getSaleType())) {
            price.setPackingPrice(this.setPackingPrice());
        }
        log.info("==============1" + g.getTradeItems());
        //计算商品总价
        this.handlePrice(g.getTradeItems(), price);
        log.info("==============2" + g.getTradeItems());
        //验证并计算各营销活动的优惠金额,实付金额,赠品List
        List<TradeMarketingVO> tradeMarketings = this.wrapperMarketingForConfirm(g.getTradeItems(),
                g.getTradeMarketingList());


        List<Discounts> discountsList = new ArrayList<>();
        //每个订单的多个优惠信息(满折优惠了xx,满减优惠了yy)
        item.setDiscountsPrice(discountsList);
        List<TradeMarketingVO> tempList =
                tradeMarketings.stream().filter(i -> i.getMarketingType() != MarketingType.GIFT)
                        .collect(Collectors.toList());
        tempList.forEach(i -> {
            Discounts discounts = Discounts.builder()
                    .amount(i.getDiscountsAmount())
                    .subType(i.getSubType())
                    .type(i.getMarketingType())
                    .build();
            discountsList.add(discounts);
            //设置营销商品优惠后的均摊价 (用于计算运费)
            List<TradeItem> items = item.getTradeItems().stream().filter(t -> i.getSkuIds().contains(t.getSkuId()))
                    .collect(Collectors.toList());
            tradeItemService.clacSplitPrice(items, i.getRealPayAmount());
        });

        //应付金额 = 商品总金额 - 优惠总金额
        if (!price.isSpecial()) {
            BigDecimal discountsPrice = tempList.stream().map(TradeMarketingVO::getDiscountsAmount).reduce(BigDecimal
                    .ZERO, BigDecimal::add);
            price.setTotalPrice(price.getTotalPrice().subtract(discountsPrice));
        }
        //订单应付金额、原始金额追加包装费
        if (price.getPackingPrice().compareTo(BigDecimal.ZERO) > 0) {
            price.setTotalPrice(price.getTotalPrice().add(price.getPackingPrice()));
            price.setOriginPrice(price.getTotalPrice().add(price.getPackingPrice()));
        }
        item.setTradePrice(price);
        //赠品信息
        item.setGifts(this.wrapperGifts(g.getTradeMarketingList(), tradeMarketings, gifts));
        item.setGifts(this.giftNumCheck(item.getGifts(), g.getWareId()));
        return item;
    }

    /**
     * 根据快照封装拆箱订单确认页信息
     *
     * @param g
     * @return
     */
    public TradeConfirmItem getDevanningPurchaseInfo(TradeItemGroup g, List<TradeItem> gifts) {
        TradeConfirmItem item = new TradeConfirmItem();
        TradePrice price = new TradePrice();
        item.setTradeItems(g.getTradeItems());
        item.setSupplier(g.getSupplier());

        //包装费设置
        if (SaleType.RETAIL.equals(g.getSaleType())) {
            price.setPackingPrice(this.setPackingPrice());
        }

        //计算商品总价
        this.handlePrice(g.getTradeItems(), price);
        //验证并计算各营销活动的优惠金额,实付金额,赠品List
        List<TradeMarketingVO> tradeMarketings = this.wrapperMarketingForConfirmDevanning(g.getTradeItems(),
                g.getTradeMarketingList());
        List<Discounts> discountsList = new ArrayList<>();
        //每个订单的多个优惠信息(满折优惠了xx,满减优惠了yy)
        item.setDiscountsPrice(discountsList);
        List<TradeMarketingVO> tempList =
                tradeMarketings.stream().filter(i -> i.getMarketingType() != MarketingType.GIFT)
                        .collect(Collectors.toList());
        tempList.forEach(i -> {
            Discounts discounts = Discounts.builder()
                    .amount(i.getDiscountsAmount())
                    .subType(i.getSubType())
                    .type(i.getMarketingType())
                    .build();
            discountsList.add(discounts);
            //设置营销商品优惠后的均摊价 (用于计算运费)
            List<TradeItem> items = item.getTradeItems().stream().filter(t -> i.getSkuIds().contains(t.getSkuId()))
                    .collect(Collectors.toList());
            tradeItemService.clacSplitPrice(items, i.getRealPayAmount());
        });

        //应付金额 = 商品总金额 - 优惠总金额
        if (!price.isSpecial()) {
            BigDecimal discountsPrice = tempList.stream().map(TradeMarketingVO::getDiscountsAmount).reduce(BigDecimal
                    .ZERO, BigDecimal::add);
            price.setTotalPrice(price.getTotalPrice().subtract(discountsPrice));
        }
        //订单应付金额、原始金额追加包装费
        if (price.getPackingPrice().compareTo(BigDecimal.ZERO) > 0) {
            price.setTotalPrice(price.getTotalPrice().add(price.getPackingPrice()));
            price.setOriginPrice(price.getTotalPrice().add(price.getPackingPrice()));
        }
        item.setTradePrice(price);
        //赠品信息
        item.setGifts(this.wrapperGifts(g.getTradeMarketingList(), tradeMarketings, gifts));
        item.setGifts(this.giftNumCheck(item.getGifts(), g.getWareId()));
        return item;
    }

    /**
     * 根据快照封装提货订单确认页信息
     *
     * @param g
     * @return
     */
    public TradeConfirmItem getTakePurchaseInfo(TradeItemGroup g) {
        TradeConfirmItem item = new TradeConfirmItem();
        TradePrice price = new TradePrice();
        item.setTradeItems(g.getTradeItems());
        item.setSupplier(g.getSupplier());
        //计算商品总价
        handlePilePrice(g.getTradeItems(), price);
        //验证并计算各营销活动的优惠金额,实付金额,赠品List
//        List<TradeMarketingVO> tradeMarketings = wrapperMarketingForConfirm(g.getTradeItems(),
//                g.getTradeMarketingList());
//        List<Discounts> discountsList = new ArrayList<>();
        //每个订单的多个优惠信息(满折优惠了xx,满减优惠了yy)
//        item.setDiscountsPrice(discountsList);
//        List<TradeMarketingVO> tempList =
//                tradeMarketings.stream().filter(i -> i.getMarketingType() != MarketingType.GIFT)
//                        .collect(Collectors.toList());
//        tempList.forEach(i -> {
//            Discounts discounts = Discounts.builder()
//                    .amount(i.getDiscountsAmount())
//                    .subType(i.getSubType())
//                    .type(i.getMarketingType())
//                    .build();
//            discountsList.add(discounts);
//            //设置营销商品优惠后的均摊价 (用于计算运费)
//            List<TradeItem> items = item.getTradeItems().stream().filter(t -> i.getSkuIds().contains(t.getSkuId()))
//                    .collect(Collectors.toList());
//            tradeItemService.clacSplitPrice(items, i.getRealPayAmount());
//        });

        //应付金额 = 商品总金额 - 优惠总金额

//        if (!price.isSpecial()) {
//            BigDecimal discountsPrice = tempList.stream().map(TradeMarketingVO::getDiscountsAmount).reduce(BigDecimal
//                    .ZERO, BigDecimal::add);
//            price.setTotalPrice(price.getTotalPrice().subtract(discountsPrice));
//        }
//        item.setTradePrice(price);
//        //赠品信息
//        item.setGifts(wrapperGifts(g.getTradeMarketingList(), tradeMarketings, gifts));
//        item.setGifts(giftNumCheck(item.getGifts(), g.getWareId()));
        return item;
    }

    /**
     * 包装营销信息(供确认订单使用)
     */
    public List<TradeMarketingVO> wrapperMarketingForConfirm(List<TradeItem> skus, List<TradeMarketingDTO>
            tradeMarketingRequests) {
        log.info("==============3" + skus);
        // 1.新促销规定拆箱的商品不参加营销活动,不需要合并
        for (TradeItem tradeItem : skus) {
            tradeItem.setPrice(BigDecimal.valueOf(tradeItem.getNum()).multiply(tradeItem.getPrice()));
            if (Objects.nonNull(tradeItem.getDivisorFlag()) && tradeItem.getDivisorFlag().compareTo(BigDecimal.ZERO) > 0) {
                tradeItem.setBNum(tradeItem.getDivisorFlag().multiply(BigDecimal.valueOf(tradeItem.getNum())).setScale(2, BigDecimal.ROUND_DOWN));
            } else {
                tradeItem.setBNum(BigDecimal.valueOf(tradeItem.getNum()));
            }
        }
        log.info("new sku:{}", skus);

        Map<String, BigDecimal> numCollect = skus.stream().filter(x -> {
            return Objects.nonNull(x.getDivisorFlag()) && x.getDivisorFlag().compareTo(BigDecimal.ONE) >= 0;
        }).collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getBNum, BigDecimal::add)));
        log.info("TradeService wrapperMarketingForConfirm numCollect :{}", numCollect);

        Map<String, BigDecimal> marketCollect = skus.stream().filter(x -> {
            return Objects.nonNull(x.getDivisorFlag()) && x.getDivisorFlag().compareTo(BigDecimal.ONE) >= 0;
        }).collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getPrice, BigDecimal::add)));
        log.info("TradeService wrapperMarketingForConfirm marketCollect :{}", marketCollect);

//        Map<String, BigDecimal> vipCollect = skus.stream().collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getVipPrice, BigDecimal::add)));
        skus = skus.stream().filter(x -> {
            // 移除拆箱的规格
            return Objects.nonNull(x.getDivisorFlag()) && x.getDivisorFlag().compareTo(BigDecimal.ONE) >= 0;
        }).filter(distinctByKey((p) -> (p.getSkuId()))).collect(Collectors.toList());
        // 1.构建营销插件请求对象
        List<TradeMarketingWrapperDTO> requests = new ArrayList<>();
        List<TradeMarketingVO> tradeMarketings = new ArrayList<>();
        if (!CollectionUtils.isEmpty(tradeMarketingRequests)) {

            List<TradeItem> finalSkus = skus;
            if (CollectionUtils.isNotEmpty(finalSkus)) {
                for (TradeMarketingDTO tradeMarketing : tradeMarketingRequests) {
                    List<TradeItemInfoDTO> tradeItems = finalSkus.stream()
                            .filter(s -> tradeMarketing.getSkuIds().contains(s.getSkuId()))
                            .map(t -> TradeItemInfoDTO.builder()
//                                .num(Objects.isNull(t.getDivisorFlag()) ? t.getNum() : (t.getDivisorFlag().multiply(BigDecimal.valueOf(t.getNum()))).setScale(0,BigDecimal.ROUND_DOWN).longValue())
                                    .num(numCollect.get(t.getSkuId()).setScale(0, BigDecimal.ROUND_DOWN).longValue())
                                    .price(t.getPrice())
                                    .allMarketPrice(marketCollect.get(t.getSkuId()))
//                                .allVipPrice(vipCollect.get(t.getSkuId()))
                                    .skuId(t.getSkuId())
                                    .storeId(t.getStoreId())
                                    .distributionGoodsAudit(t.getDistributionGoodsAudit())
                                    .build())
                            .collect(Collectors.toList());
                    requests.add(TradeMarketingWrapperDTO.builder()
                            .tradeMarketingDTO(tradeMarketing)
                            .tradeItems(tradeItems).build());
                }
            }
        }
        log.info("调用插件前传入的数据" + requests);

        // 2.调用营销插件，并设置满系营销信息
        if (CollectionUtils.isNotEmpty(requests)) {
            MarketingTradeBatchWrapperRequest marketingTradeBatchWrapperRequest = MarketingTradeBatchWrapperRequest.builder()
                    .wraperDTOList(requests)
                    .build();
            List<TradeMarketingWrapperVO> voList = marketingQueryProvider.batchWrapper(marketingTradeBatchWrapperRequest).getContext().getWraperVOList();
            if (CollectionUtils.isNotEmpty(voList)) {
                voList.forEach(tradeMarketingWrapperVO -> {
                    tradeMarketings.add(tradeMarketingWrapperVO.getTradeMarketing());
                });
            }
        }
        log.info("调用营销插件后算出来的数据" + tradeMarketings);
        return tradeMarketings;
    }


    /**
     * 包装营销信息(供确认订单使用) 拆箱
     */
    public List<TradeMarketingVO> wrapperMarketingForConfirmDevanning(List<TradeItem> skus, List<TradeMarketingDTO>
            tradeMarketingRequests) {

        //1.需求变动 skus有相同skuid 合并数量并且合并总金额
        for (TradeItem tradeItem : skus) {
            tradeItem.setAllMarketPrice(BigDecimal.valueOf(tradeItem.getNum()).multiply(tradeItem.getPrice()));
//            tradeItem.setVipPrice(BigDecimal.valueOf(tradeItem.getNum()).multiply(tradeItem.getVipPrice()));
            if (Objects.nonNull(tradeItem.getDivisorFlag()) && tradeItem.getDivisorFlag().compareTo(BigDecimal.ZERO) > 0) {
                tradeItem.setBNum(tradeItem.getDivisorFlag().multiply(BigDecimal.valueOf(tradeItem.getNum())).setScale(2, BigDecimal.ROUND_DOWN));
            } else {
                tradeItem.setBNum(BigDecimal.valueOf(tradeItem.getNum()));
            }
        }
        Map<String, BigDecimal> numCollect = skus.stream().filter(x -> {
            return Objects.nonNull(x.getDivisorFlag()) && x.getDivisorFlag().compareTo(BigDecimal.ONE) >= 0;
        }).collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getBNum, BigDecimal::add)));

        Map<String, BigDecimal> marketCollect = skus.stream().filter(x -> {
            return Objects.nonNull(x.getDivisorFlag()) && x.getDivisorFlag().compareTo(BigDecimal.ONE) >= 0;
        }).collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getAllMarketPrice, BigDecimal::add)));
//        Map<String, BigDecimal> vipCollect = skus.stream().collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getVipPrice, BigDecimal::add)));
        skus = skus.stream().filter(x -> {
            // 移除拆箱的规格
            return Objects.nonNull(x.getDivisorFlag()) && x.getDivisorFlag().compareTo(BigDecimal.ONE) >= 0;
        }).filter(distinctByKey((p) -> (p.getSkuId()))).collect(Collectors.toList());
        // 1.构建营销插件请求对象
        List<TradeMarketingWrapperDTO> requests = new ArrayList<>();
        List<TradeMarketingVO> tradeMarketings = new ArrayList<>();
        if (!CollectionUtils.isEmpty(tradeMarketingRequests)) {
            List<TradeItem> finalSkus = skus;
            if (CollectionUtils.isNotEmpty(finalSkus)) {
                tradeMarketingRequests.forEach(tradeMarketing -> {
                    List<TradeItemInfoDTO> tradeItems = finalSkus.stream()
                            .filter(s -> tradeMarketing.getSkuIds().contains(s.getSkuId()))
                            .map(t -> TradeItemInfoDTO.builder()
//                                .num(Objects.isNull(t.getDivisorFlag()) ? t.getNum() : (t.getDivisorFlag().multiply(BigDecimal.valueOf(t.getNum()))).setScale(0,BigDecimal.ROUND_DOWN).longValue())
                                    .num(numCollect.get(t.getSkuId()).setScale(0, BigDecimal.ROUND_DOWN).longValue())
                                    .price(t.getPrice())
                                    .allMarketPrice(marketCollect.get(t.getSkuId()))
//                                .allVipPrice(vipCollect.get(t.getSkuId()))
                                    .skuId(t.getSkuId())
                                    .storeId(t.getStoreId())
                                    .distributionGoodsAudit(t.getDistributionGoodsAudit())
                                    .build())
                            .collect(Collectors.toList());
                    requests.add(TradeMarketingWrapperDTO.builder()
                            .tradeMarketingDTO(tradeMarketing)
                            .tradeItems(tradeItems).build());
                });
            }
        }

        // 2.调用营销插件，并设置满系营销信息
        if (CollectionUtils.isNotEmpty(requests)) {
            MarketingTradeBatchWrapperRequest marketingTradeBatchWrapperRequest = MarketingTradeBatchWrapperRequest.builder()
                    .wraperDTOList(requests)
                    .build();
            List<TradeMarketingWrapperVO> voList = marketingQueryProvider.batchWrapper(marketingTradeBatchWrapperRequest).getContext().getWraperVOList();
            if (CollectionUtils.isNotEmpty(voList)) {
                voList.forEach(tradeMarketingWrapperVO -> {
                    tradeMarketings.add(tradeMarketingWrapperVO.getTradeMarketing());
                });
            }
        }

        return tradeMarketings;
    }

    public static <T> Predicate<T> distinctByKey(Function<? super T, Object> keyExtractor) {
        Map<Object, Boolean> seen = new ConcurrentHashMap<>();
        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
    }

    /**
     * 包装营销信息(供提交订单使用)
     */
    public void wrapperMarketingForCommit(Trade trade, TradeParams tradeParams, CustomerVO customerVO) {

        // 1.构建订单满系营销对象
        trade.setTradeMarketings(this.wrapperMarketingForConfirm(trade.getTradeItems(),
                tradeParams.getMarketingList()));

        // 2.构建订单优惠券对象
        if (StringUtils.isNotEmpty(tradeParams.getCouponCodeId())) {
            trade.setTradeCoupon(this.buildTradeCouponInfo(
                    trade.getTradeItems(), tradeParams.getCouponCodeId(), tradeParams.isForceCommit(),
                    StringUtils.isNotBlank(customerVO.getParentCustomerId()) ? customerVO.getParentCustomerId() : customerVO.getCustomerId()));
        }

    }

    /**
     * 包装营销信息(供提交订单使用) 拆箱
     */
    public void wrapperMarketingForCommitDevanning(Trade trade, TradeParams tradeParams, CustomerVO customerVO) {
        // 1.构建订单满系营销对象
        trade.setTradeMarketings(this.wrapperMarketingForConfirmDevanning(trade.getTradeItems(),
                tradeParams.getMarketingList()));

        // 2.构建订单优惠券对象
        if (StringUtils.isNotEmpty(tradeParams.getCouponCodeId())) {
            trade.setTradeCoupon(this.buildTradeCouponInfo(
                    trade.getTradeItems(), tradeParams.getCouponCodeId(), tradeParams.isForceCommit(),
                    StringUtils.isNotBlank(customerVO.getParentCustomerId()) ? customerVO.getParentCustomerId() : customerVO.getCustomerId()));
        }

    }


    /**
     * 调用营销插件，构造订单优惠券对象
     *
     * @return
     */
    private TradeCouponVO buildTradeCouponInfo(List<TradeItem> tradeItems, String couponCodeId,
                                               boolean forceCommit, String customerId) {
        if (CollectionUtils.isEmpty(tradeItems)) {
            return null;
        }
        // 1.查询tradeItems的storeCateIds
        List<String> goodsIds = tradeItems.stream()
                .map(TradeItem::getSpuId).distinct().collect(Collectors.toList());
        List<StoreCateGoodsRelaVO> relas =
                storeCateQueryProvider.listByGoods(new StoreCateListByGoodsRequest(goodsIds)).getContext().getStoreCateGoodsRelaVOList();
        Map<String, List<StoreCateGoodsRelaVO>> relasMap = relas.stream()
                .collect(Collectors.groupingBy(rela -> rela.getGoodsId()));

        // 2.构建营销插件请求对象
        List<TradeItemInfoDTO> tradeItemInfos = tradeItems.stream()
                .map(t -> TradeItemInfoDTO.builder()
                        .num(Objects.isNull(t.getDevanningId()) ? t.getNum()
                                : (t.getDivisorFlag().multiply(BigDecimal.valueOf(t.getNum()))
                                .setScale(0, BigDecimal.ROUND_DOWN).longValue()))
                        .price(t.getPrice())
                        .skuId(t.getSkuId())
                        .cateId(t.getCateId())
                        .storeId(t.getStoreId())
                        .brandId(t.getBrand())
                        .storeCateIds(relasMap.get(t.getSpuId()).stream()
                                .map(rela -> rela.getStoreCateId()).collect(Collectors.toList()))
                        .distributionGoodsAudit(t.getDistributionGoodsAudit())
                        .build())
                .collect(Collectors.toList());
        MarketingCouponWrapperRequest request = new MarketingCouponWrapperRequest();
        request.setCustomerId(customerId);
        request.setCouponCodeId(couponCodeId);
        request.setForceCommit(forceCommit);
        request.setTradeItems(tradeItemInfos);

        // 3.调用营销插件，查询订单优惠券对象
        MarketingCouponWrapperResponse response = marketingCouponPluginProvider.wrapper(request).getContext();
        if (response != null) {
            return response.getTradeCoupon();
        }

        return null;
    }

    /**
     * 用于编辑订单前的展示信息，包含了原订单信息和最新关联的订单商品价格（计算了会员价和级别价后的商品单价）
     *
     * @param tid tid
     * @return 返回订单与订单商品最新价格信息
     */
    public TradeRemedyDetails getTradeRemedyDetails(String tid) {
        Trade trade = detail(tid);
        TradeGoodsListVO goodsInfoResponse = this.getGoodsInfoResponse(trade);
        List<TradeItem> items = trade.getTradeItems().stream().map(i ->
                TradeItem.builder()
                        .skuId(i.getSkuId())
                        .num(i.getNum())
                        .build()).collect(Collectors.toList());
        calcGoodsPrice(items, goodsInfoResponse);
        Map<String, TradeItemPrice> tradeItemPriceMap = items.stream().map(i -> new TradeItemPrice(i.getSkuId(), i
                .getLevelPrice())).collect(Collectors.toMap(TradeItemPrice::getSkuId, Function.identity()));
        return new TradeRemedyDetails(trade, tradeItemPriceMap);
    }

    /**
     * 获取赠品信息
     * 主要是设置各赠品应赠送的数量
     *
     * @param marketingRequests
     * @param tradeMarketings
     * @param gifts             @return
     */
    private List<TradeItem> wrapperGifts(List<TradeMarketingDTO> marketingRequests,
                                         List<TradeMarketingVO> tradeMarketings, List<TradeItem> gifts) {
        if (CollectionUtils.isEmpty(gifts)) {
            return Collections.emptyList();
        }
        List<TradeItem> resultList = new ArrayList<>();
        Map<Long, TradeMarketingVO> tradeMarketingMap = tradeMarketings.stream().filter(m -> m.getMarketingType() ==
                MarketingType.GIFT)
                .collect(Collectors.toMap(TradeMarketingVO::getMarketingId, Function.identity()));

        for (TradeMarketingVO a : tradeMarketings) {
            if (a.getMarketingType() != MarketingType.GIFT) {
                //若传入的营销并非满赠,则跳过循环
                continue;
            }
            MarketingFullGiftLevelVO level = a.getGiftLevel();

            Map<String, MarketingFullGiftDetailVO> detailMap = level.getFullGiftDetailList().stream().filter(d -> a.getGiftIds().contains(d.getProductId()))
                    .collect(Collectors.toMap(MarketingFullGiftDetailVO::getProductId, Function.identity()));

            List<TradeItem> giftItems = gifts.stream().filter(g -> a.getGiftIds().contains(g.getSkuId()))
                    .collect(Collectors.toList());
            List<TradeItem> tpList = giftItems.stream().filter(x -> Objects.nonNull(detailMap.get(x.getSkuId())))
                    .map(g -> {
                        TradeItem item = new TradeItem();
                        BeanUtils.copyProperties(g, item);
                        item.setNum(detailMap.get(g.getSkuId()).getProductNum());
                        return item;
                    }).collect(Collectors.toList());
            resultList.addAll(tpList);
        }


//
//        for (TradeMarketingDTO i : marketingRequests) {
//            TradeMarketingVO marketing = tradeMarketingMap.get(i.getMarketingId());
//            if (marketing == null) {
//                //若传入的营销并非满赠,则跳过循环
//                continue;
//            }
//            MarketingFullGiftLevelVO level = marketing.getGiftLevel();
//            // 已经在营销插件中取出
////            FullGiftDetailListByMarketingIdAndLevelIdRequest request =
////                    FullGiftDetailListByMarketingIdAndLevelIdRequest.builder().build();
////            request.setMarketingId(i.getMarketingId());
////            request.setGiftLevelId(level.getGiftLevelId());
////            FullGiftDetailListByMarketingIdAndLevelIdResponse fullGiftDetailListByMarketingIdAndLevelIdResponse =
////                    fullGiftQueryProvider.listDetailByMarketingIdAndLevelId(request).getContext();
////
////            Map<String, MarketingFullGiftDetailVO> detailMap = fullGiftDetailListByMarketingIdAndLevelIdResponse
////                    .getFullGiftDetailVOList().stream().filter(d -> i.getGiftSkuIds().contains(d.getProductId()))
////                    .collect(Collectors.toMap(MarketingFullGiftDetailVO::getProductId, Function.identity()));
//
////            level.setFullGiftDetailList(new ArrayList<>(detailMap.values()));
//            Map<String, MarketingFullGiftDetailVO> detailMap = level.getFullGiftDetailList().stream().filter(d -> i.getGiftSkuIds().contains(d.getProductId()))
//                    .collect(Collectors.toMap(MarketingFullGiftDetailVO::getProductId, Function.identity()));
//            List<String> giftIds = new ArrayList<>(detailMap.keySet());
//            //校验是否满足满赠条件
//            boolean flag = i.getGiftSkuIds().stream().anyMatch(g -> !giftIds.contains(g));
//            if (flag) {
//                throw new SbcRuntimeException("K-050312");
//            }
//
//            List<TradeItem> giftItems = gifts.stream().filter(g -> i.getGiftSkuIds().contains(g.getSkuId()))
//                    .collect(Collectors.toList());
//            List<TradeItem> tpList = giftItems.stream().map(g -> {
//                TradeItem item = new TradeItem();
//                BeanUtils.copyProperties(g, item);
//                item.setNum(detailMap.get(g.getSkuId()).getProductNum());
//                return item;
//            }).collect(Collectors.toList());
//            resultList.addAll(tpList);
//        }
        return resultList;

    }

    /**
     * 平台,商家带客下单，审核关闭都要创建支付单
     *
     * @param trade
     * @param operator
     * @param orderAuditSwitch
     */
    private void createPayOrder(Trade trade, Operator operator, Boolean orderAuditSwitch) {
        log.info("operator.getPlatform======: {}", JSONObject.toJSONString(operator.getPlatform()));

        log.info("orderAuditSwitch======: {}", orderAuditSwitch);

        if (operator.getPlatform() == Platform.BOSS || operator.getPlatform() == Platform.SUPPLIER ||
                !orderAuditSwitch) {
            createPayOrder(trade);
        }
    }

    private void createOrderInvoice(Trade trade, Operator operator) {
        OrderInvoiceSaveRequest request = buildOrderInvoiceSaveRequest(trade);
        if (request == null) {
            return;
        }
        Optional<OrderInvoice> optional = orderInvoiceService.generateOrderInvoice(request, operator.getUserId(),
                InvoiceState.WAIT);
        optional.ifPresent(invoice -> trade.getInvoice().setOrderInvoiceId(invoice.getOrderInvoiceId()));
    }

    private OrderInvoiceSaveRequest buildOrderInvoiceSaveRequest(Trade trade) {
        Invoice invoice;
        if ((invoice = trade.getInvoice()) == null || trade.getInvoice().getType() == -1) {
            return null;
        }
        boolean isGeneral = invoice.getType() == 0;
        OrderInvoiceSaveRequest request = new OrderInvoiceSaveRequest();
        request.setCustomerId(trade.getBuyer().getId());
        if (Objects.nonNull(invoice.getAddress())) {
            request.setInvoiceAddress(trade.getInvoice().getContacts() + " " + trade.getInvoice().getPhone() + " " +
                    invoice.getAddress());
        } else {
            request.setInvoiceAddress(trade.getBuyer().getName() + " " + trade.getBuyer().getPhone() + " " + trade
                    .getConsignee().getDetailAddress());
        }
        request.setInvoiceTitle(isGeneral ? invoice.getGeneralInvoice().getFlag() == 0 ? null : invoice
                .getGeneralInvoice().getTitle()
                : invoice.getSpecialInvoice().getCompanyName());

        request.setInvoiceType(InvoiceType.NORMAL.fromValue(invoice.getType()));
        request.setOrderNo(trade.getId());
        request.setProjectId(invoice.getProjectId());
        request.setOrderInvoiceId(invoice.getOrderInvoiceId());
        request.setCompanyInfoId(trade.getSupplier().getSupplierId());
        request.setStoreId(trade.getSupplier().getStoreId());
        return request;
    }

    /**
     * 计算订单价格
     * 订单价格 = 商品总价 - 营销优惠总金额
     *
     * @param trade
     */
    private TradePrice calc(Trade trade) {
        TradePrice tradePriceTemp = trade.getTradePrice();
        if (tradePriceTemp == null) {
            tradePriceTemp = new TradePrice();
            trade.setTradePrice(tradePriceTemp);
        }
        final TradePrice tradePrice = tradePriceTemp;

        // 1.计算商品总价
        handlePrice(trade.getTradeItems(), tradePrice);
        List<TradeMarketingVO> list = trade.getTradeMarketings().stream().filter(i -> i.getMarketingType()
                != MarketingType.GIFT).collect(Collectors.toList());

        // 2.计算所有营销活动的总优惠金额(非满赠)
        BigDecimal discountPrice = list.stream().filter(i -> i.getMarketingType() != MarketingType.GIFT).map
                (TradeMarketingVO
                        ::getDiscountsAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
        if (trade.getTradeCoupon() != null) {
            discountPrice = discountPrice.add(trade.getTradeCoupon().getDiscountsAmount());
        }

        // 3.计算各类营销活动的优惠金额(比如:满折优惠xxx,满减优惠yyy)
        List<DiscountsPriceDetail> discountsPriceDetails = new ArrayList<>();
        list.stream().collect(Collectors.groupingBy(TradeMarketingVO::getMarketingType)).forEach((key, value) -> {
            DiscountsPriceDetail detail = DiscountsPriceDetail.builder()
                    .marketingType(key)
                    .discounts(value.stream().map(TradeMarketingVO::getDiscountsAmount).reduce(BigDecimal.ZERO,
                            BigDecimal::add))
                    .build();
            discountsPriceDetails.add(detail);
        });
        tradePrice.setDiscountsPriceDetails(discountsPriceDetails);

        // 4.设置优惠券优惠金额
        if (trade.getTradeCoupon() != null) {
            BigDecimal couponPrice = trade.getTradeCoupon().getDiscountsAmount();
            tradePrice.setCouponPrice(couponPrice);
//            discountPrice.subtract(couponPrice);
        }

        // 5.设置优惠总金额、应付金额 = 商品总金额 - 总优惠金额
        tradePrice.setDiscountsPrice(discountPrice);
        tradePrice.setTotalPrice(tradePrice.getTotalPrice().subtract(discountPrice));
        return tradePrice;
    }


    /**
     * 1.根据 订单项List 获取商品信息List
     * 2.设置该商品信息List中会用到的区间价信息
     * 3.修改商品信息List中的会员价(salePrice)
     *
     * @param trade 订单
     * @return 商品信息List
     */
    public TradeGoodsListVO getGoodsInfoResponse(Trade trade) {
        //1. 获取sku
        Buyer b = trade.getBuyer();
        GoodsInfoViewByIdsRequest goodsInfoRequest = new GoodsInfoViewByIdsRequest();
        goodsInfoRequest.setGoodsInfoIds(IteratorUtils.collectKey(trade.getTradeItems(), TradeItem::getSkuId));
        goodsInfoRequest.setIsHavSpecText(Constants.yes);
        goodsInfoRequest.setWareId(trade.getWareId());
        goodsInfoRequest.setWareHouseCode(trade.getWareHouseCode());
        GoodsInfoViewByIdsResponse idsResponse = goodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        TradeGoodsListVO response = new TradeGoodsListVO();
        response.setGoodsInfos(idsResponse.getGoodsInfos());
        response.setGoodses(idsResponse.getGoodses());
        CustomerVO customerVO = customerQueryProvider.getCustomerById(new
                CustomerGetByIdRequest(b.getId())).getContext();

        List<GoodsInfoDTO> goodsInfoDTOList = KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class);
        GoodsIntervalPriceByCustomerIdResponse intervalPriceResponse =
                goodsIntervalPriceProvider.putByCustomerId(
                        GoodsIntervalPriceByCustomerIdRequest.builder().goodsInfoDTOList(goodsInfoDTOList)
                                .customerId(customerVO.getCustomerId()).build()).getContext();
        //计算区间价
        response.setGoodsIntervalPrices(intervalPriceResponse.getGoodsIntervalPriceVOList());
        response.setGoodsInfos(intervalPriceResponse.getGoodsInfoVOList());

        //目前只计算商品的客户级别价格/客户指定价
        MarketingPluginGoodsListFilterRequest filterRequest = new MarketingPluginGoodsListFilterRequest();
        filterRequest.setGoodsInfos(KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class));
        filterRequest.setCustomerDTO(KsBeanUtil.convert(customerVO, CustomerDTO.class));
        response.setGoodsInfos(marketingPluginProvider.goodsListFilter(filterRequest).getContext().getGoodsInfoVOList());
        logger.info("TradeService.getGoodsInfoResponse response:{}", response);
        return response;
    }

    /**
     * 零售
     * 1.根据 订单项List 获取商品信息List
     * 2.设置该商品信息List中会用到的区间价信息
     * 3.修改商品信息List中的会员价(salePrice)
     *
     * @param trade 订单
     * @return 商品信息List
     */
    public TradeGoodsListVO getRetailGoodsInfoResponse(Trade trade) {
        //1. 获取sku
        Buyer b = trade.getBuyer();
        GoodsInfoViewByIdsRequest goodsInfoRequest = new GoodsInfoViewByIdsRequest();
        goodsInfoRequest.setGoodsInfoIds(IteratorUtils.collectKey(trade.getTradeItems(), TradeItem::getSkuId));
        goodsInfoRequest.setIsHavSpecText(Constants.yes);
        goodsInfoRequest.setWareId(trade.getWareId());
        goodsInfoRequest.setWareHouseCode(trade.getWareHouseCode());
        GoodsInfoViewByIdsResponse idsResponse = retailGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        TradeGoodsListVO response = new TradeGoodsListVO();
        response.setGoodsInfos(idsResponse.getGoodsInfos());
        response.setGoodses(idsResponse.getGoodses());
        CustomerVO customerVO = customerQueryProvider.getCustomerById(new
                CustomerGetByIdRequest(b.getId())).getContext();

        List<GoodsInfoDTO> goodsInfoDTOList = KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class);
        GoodsIntervalPriceByCustomerIdResponse intervalPriceResponse =
                goodsIntervalPriceProvider.putByCustomerId(
                        GoodsIntervalPriceByCustomerIdRequest.builder().goodsInfoDTOList(goodsInfoDTOList)
                                .customerId(customerVO.getCustomerId()).build()).getContext();
        //计算区间价
        response.setGoodsIntervalPrices(intervalPriceResponse.getGoodsIntervalPriceVOList());
        response.setGoodsInfos(intervalPriceResponse.getGoodsInfoVOList());

        //目前只计算商品的客户级别价格/客户指定价
        MarketingPluginGoodsListFilterRequest filterRequest = new MarketingPluginGoodsListFilterRequest();
        filterRequest.setGoodsInfos(KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class));
        filterRequest.setCustomerDTO(KsBeanUtil.convert(customerVO, CustomerDTO.class));
        response.setGoodsInfos(marketingPluginProvider.goodsListFilter(filterRequest).getContext().getGoodsInfoVOList());
        logger.info("TradeService.getGoodsInfoResponse response:{}", response);
        return response;
    }


    /**
     * 批发拆箱
     * 1.根据 订单项List 获取商品信息List
     * 2.设置该商品信息List中会用到的区间价信息
     * 3.修改商品信息List中的会员价(salePrice)
     *
     * @param trade 订单
     * @return 商品信息List
     */
    public TradeGoodsListVO getDevanningGoodsInfoResponse(Trade trade) {
        //todo  当前理解在计算费用的时候是拿goodsinfo表的salePrice  这个字段是在goodsInfoQueryProvider.listViewByIdsByMatchFlag这个接口获取goodsinfo表的market_price
        //todo  goodsInfo.setSalePrice(goodsInfo.getMarketPrice() == null ? BigDecimal.ZERO : goodsInfo.getMarketPrice());
        //todo  拆箱之后需要去devanninggoodsinfo表的MarketPrice 为了不变动之前逻辑在此处做循环遍历
        StopWatch stopWatch = new StopWatch("订单中商品信息填充明细耗费时间");
        stopWatch.start("获取批发商品明细");
        //1. 获取sku
        Buyer b = trade.getBuyer();
        GoodsInfoViewByIdsRequest goodsInfoRequest = new GoodsInfoViewByIdsRequest();
//        goodsInfoRequest.setGoodsInfoIds(IteratorUtils.collectKey(trade.getTradeItems(), TradeItem::getSkuId));
        goodsInfoRequest.setDevanningIds(IteratorUtils.collectKey(trade.getTradeItems(), TradeItem::getDevanningId));
        goodsInfoRequest.setIsHavSpecText(Constants.yes);
        goodsInfoRequest.setWareId(trade.getWareId());
        goodsInfoRequest.setWareHouseCode(trade.getWareHouseCode());
//        GoodsInfoViewByIdsResponse idsResponse = goodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();

        DevanningGoodsInfoListResponse responseDevanning = devanningGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        stopWatch.stop();
        stopWatch.start("转换数据");
        GoodsInfoViewByIdsResponse idsResponse = new GoodsInfoViewByIdsResponse();
        idsResponse.setGoodses(responseDevanning.getGoodses());
        idsResponse.setGoodsInfos(KsBeanUtil.convert(responseDevanning.getDevanningGoodsInfoVOS(), GoodsInfoVO.class));
        stopWatch.stop();
//        List<String> goodsinfoids = idsResponse.getGoodsInfos().stream().map(GoodsInfoVO::getGoodsInfoId).collect(Collectors.toList());
//        List<DevanningGoodsInfoVO> devanningGoodsInfoVOS = devanningGoodsInfoProvider.getmaxdata(DevanningGoodsInfoPageRequest.builder().goodsInfoIds(goodsinfoids).build()).getContext().getDevanningGoodsInfoVOS();
//        for (GoodsInfoVO goodsInfoVO:idsResponse.getGoodsInfos()){
//            for (DevanningGoodsInfoVO devanningGoodsInfoVO:devanningGoodsInfoVOS){
//                if (devanningGoodsInfoVO.getGoodsInfoId().equalsIgnoreCase(goodsInfoVO.getGoodsInfoId())){
//                    goodsInfoVO.setMarketPrice(devanningGoodsInfoVO.getMarketPrice());
//                    goodsInfoVO.setSalePrice(devanningGoodsInfoVO.getMarketPrice());
//                }
//            }
//        }
        stopWatch.start("获取用户");
        TradeGoodsListVO response = new TradeGoodsListVO();
        response.setGoodsInfos(idsResponse.getGoodsInfos());
        response.setGoodses(idsResponse.getGoodses());
        CustomerVO customerVO = customerQueryProvider.getCustomerById(new
                CustomerGetByIdRequest(b.getId())).getContext();
        stopWatch.stop();
        stopWatch.start("计算区间价");
        List<GoodsInfoDTO> goodsInfoDTOList = KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class);
        GoodsIntervalPriceByCustomerIdResponse intervalPriceResponse =
                goodsIntervalPriceProvider.putByCustomerId(
                        GoodsIntervalPriceByCustomerIdRequest.builder().goodsInfoDTOList(goodsInfoDTOList)
                                .customerId(customerVO.getCustomerId()).build()).getContext();
        //计算区间价
        response.setGoodsIntervalPrices(intervalPriceResponse.getGoodsIntervalPriceVOList());
        response.setGoodsInfos(intervalPriceResponse.getGoodsInfoVOList());
        stopWatch.stop();
        stopWatch.start("商品列表处理");
        //目前只计算商品的客户级别价格/客户指定价
        MarketingPluginGoodsListFilterRequest filterRequest = new MarketingPluginGoodsListFilterRequest();
        filterRequest.setGoodsInfos(KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class));
        filterRequest.setCustomerDTO(KsBeanUtil.convert(customerVO, CustomerDTO.class));
        response.setGoodsInfos(marketingPluginProvider.goodsListFilter(filterRequest).getContext().getGoodsInfoVOList());
        stopWatch.stop();
        log.info("订单中商品信息填充明细耗费时间"+stopWatch.prettyPrint());
        logger.info("TradeService.getGoodsInfoResponse response:{}", response);
        return response;
    }


    public TradeGoodsListVO getBulkGoodsInfoResponse(Trade trade) {

        //1. 获取sku
        Buyer b = trade.getBuyer();
        GoodsInfoViewByIdsRequest goodsInfoRequest = new GoodsInfoViewByIdsRequest();
//        goodsInfoRequest.setGoodsInfoIds(IteratorUtils.collectKey(trade.getTradeItems(), TradeItem::getSkuId));
        goodsInfoRequest.setGoodsInfoIds(IteratorUtils.collectKey(trade.getTradeItems(), TradeItem::getSkuId));
        goodsInfoRequest.setIsHavSpecText(Constants.yes);
        goodsInfoRequest.setWareId(trade.getWareId());
        goodsInfoRequest.setWareHouseCode(trade.getWareHouseCode());
//        GoodsInfoViewByIdsResponse idsResponse = goodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
        GoodsInfoViewByIdsResponse responseDevanning = bulkGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();
//        DevanningGoodsInfoListResponse responseDevanning = devanningGoodsInfoQueryProvider.listViewByIdsByMatchFlag(goodsInfoRequest).getContext();

        GoodsInfoViewByIdsResponse idsResponse = new GoodsInfoViewByIdsResponse();
        idsResponse.setGoodses(responseDevanning.getGoodses());
        idsResponse.setGoodsInfos(KsBeanUtil.convert(responseDevanning.getGoodsInfos(), GoodsInfoVO.class));
//        List<String> goodsinfoids = idsResponse.getGoodsInfos().stream().map(GoodsInfoVO::getGoodsInfoId).collect(Collectors.toList());
//        List<DevanningGoodsInfoVO> devanningGoodsInfoVOS = devanningGoodsInfoProvider.getmaxdata(DevanningGoodsInfoPageRequest.builder().goodsInfoIds(goodsinfoids).build()).getContext().getDevanningGoodsInfoVOS();
//        for (GoodsInfoVO goodsInfoVO:idsResponse.getGoodsInfos()){
//            for (DevanningGoodsInfoVO devanningGoodsInfoVO:devanningGoodsInfoVOS){
//                if (devanningGoodsInfoVO.getGoodsInfoId().equalsIgnoreCase(goodsInfoVO.getGoodsInfoId())){
//                    goodsInfoVO.setMarketPrice(devanningGoodsInfoVO.getMarketPrice());
//                    goodsInfoVO.setSalePrice(devanningGoodsInfoVO.getMarketPrice());
//                }
//            }
//        }
        TradeGoodsListVO response = new TradeGoodsListVO();
        response.setGoodsInfos(idsResponse.getGoodsInfos());
        response.setGoodses(idsResponse.getGoodses());
        CustomerVO customerVO = customerQueryProvider.getCustomerById(new
                CustomerGetByIdRequest(b.getId())).getContext();

        List<GoodsInfoDTO> goodsInfoDTOList = KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class);
        GoodsIntervalPriceByCustomerIdResponse intervalPriceResponse =
                goodsIntervalPriceProvider.putByCustomerId(
                        GoodsIntervalPriceByCustomerIdRequest.builder().goodsInfoDTOList(goodsInfoDTOList)
                                .customerId(customerVO.getCustomerId()).build()).getContext();
        //计算区间价
        response.setGoodsIntervalPrices(intervalPriceResponse.getGoodsIntervalPriceVOList());
        response.setGoodsInfos(intervalPriceResponse.getGoodsInfoVOList());

        //目前只计算商品的客户级别价格/客户指定价
        MarketingPluginGoodsListFilterRequest filterRequest = new MarketingPluginGoodsListFilterRequest();
        filterRequest.setGoodsInfos(KsBeanUtil.convert(response.getGoodsInfos(), GoodsInfoDTO.class));
        filterRequest.setCustomerDTO(KsBeanUtil.convert(customerVO, CustomerDTO.class));
        response.setGoodsInfos(marketingPluginProvider.goodsListFilter(filterRequest).getContext().getGoodsInfoVOList());
        logger.info("TradeService.getGoodsInfoResponse response:{}", response);
        return response;
    }


    private void calcGoodsPrice(List<TradeItem> tradeItems, TradeGoodsListVO goodsInfoResponse) {
        List<GoodsInfoVO> goodsInfos = goodsInfoResponse.getGoodsInfos();
        Map<String, GoodsVO> goodsMap = goodsInfoResponse.getGoodses().stream().collect(Collectors.toMap
                (GoodsVO::getGoodsId, Function.identity()));
        Map<String, GoodsInfoVO> goodsInfoMap =
                goodsInfos.stream().collect(Collectors.toMap(GoodsInfoVO::getGoodsInfoId,
                        Function.identity()));
        tradeItems
                .forEach(tradeItem -> {
                    GoodsInfoVO goodsInfo = goodsInfoMap.get(tradeItem.getSkuId());
                    GoodsVO goods = goodsMap.get(goodsInfo.getGoodsId());
                    //4. 填充价格
                    List<GoodsIntervalPriceVO> goodsIntervalPrices = goodsInfoResponse.getGoodsIntervalPrices();
                    // 订货区间设价
                    if (Integer.valueOf(GoodsPriceType.STOCK.toValue()).equals(goods.getPriceType())) {
                        Long buyNum = tradeItem.getNum();
                        Optional<GoodsIntervalPriceVO> first = goodsIntervalPrices.stream()
                                .filter(item -> item.getGoodsInfoId().equals(tradeItem.getSkuId()))
                                .filter(intervalPrice -> buyNum >= intervalPrice.getCount()).max(Comparator
                                        .comparingLong(GoodsIntervalPriceVO::getCount));
                        if (first.isPresent()) {
                            GoodsIntervalPriceVO goodsIntervalPrice = first.get();
                            tradeItem.setLevelPrice(goodsIntervalPrice.getPrice());
                            tradeItem.setPrice(goodsIntervalPrice.getPrice());
                            return;
                        }
                    }
                    tradeItem.setPrice(goodsInfo.getSalePrice());
                    tradeItem.setLevelPrice(goodsInfo.getSalePrice());
                });
    }

    private void checkLogisticsNo(String logisticsNo, String logisticStandardCode) {
        if (StringUtils.isNotBlank(logisticsNo) && StringUtils.isNotBlank(logisticStandardCode)) {
            if (tradeRepository
                    .findTopByTradeDelivers_Logistics_LogisticNoAndTradeDelivers_Logistics_logisticStandardCode(logisticsNo,
                            logisticStandardCode)
                    .isPresent()) {
                throw new SbcRuntimeException("K-050124");
            }
        }

    }

    /**
     * 计算商品总价
     *
     * @param tradeItems 多个订单项(商品)
     * @param tradePrice 订单价格对象(其中包括商品商品总金额,原始金额,应付金额)
     */
    private void handlePilePrice(List<TradeItem> tradeItems, TradePrice tradePrice) {
        tradePrice.setGoodsPrice(BigDecimal.ZERO);
        tradePrice.setOriginPrice(BigDecimal.ZERO);
        tradePrice.setTotalPrice(BigDecimal.ZERO);
//        tradeItems.forEach(t -> {
//            BigDecimal buyItemPrice = t.getPrice().multiply(BigDecimal.valueOf(t.getNum()));
//            // 订单商品总价
//            tradePrice.setGoodsPrice(tradePrice.getGoodsPrice().add(buyItemPrice));
//            // 订单应付总金额
//            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(buyItemPrice));
//            // 订单原始总金额
//            tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(buyItemPrice));
//        });
    }

    /**
     * 计算商品总价
     *
     * @param tradeItems 多个订单项(商品)
     * @param tradePrice 订单价格对象(其中包括商品商品总金额,原始金额,应付金额)
     */
    private void handlePrice(List<TradeItem> tradeItems, TradePrice tradePrice) {
        tradePrice.setGoodsPrice(BigDecimal.ZERO);
        tradePrice.setOriginPrice(BigDecimal.ZERO);
        tradePrice.setTotalPrice(BigDecimal.ZERO);
        tradeItems.forEach(t -> {
            BigDecimal buyItemPrice = t.getPrice().multiply(BigDecimal.valueOf(t.getNum()));
            // 订单商品总价
            tradePrice.setGoodsPrice(tradePrice.getGoodsPrice().add(buyItemPrice));
            // 订单应付总金额
            tradePrice.setTotalPrice(tradePrice.getTotalPrice().add(buyItemPrice));
            // 订单原始总金额
            tradePrice.setOriginPrice(tradePrice.getOriginPrice().add(buyItemPrice));
        });
    }

    private List<TradeItem> giftNumCheck(List<TradeItem> gifts, Long wareId) {
        if (CollectionUtils.isEmpty(gifts)) {
            return Collections.emptyList();
        }
        List<TradeItem> distinctGifts = new ArrayList<>();
        //相同赠品累加
        Map<String, List<TradeItem>> giftMap = gifts.stream().collect(Collectors.groupingBy(TradeItem::getSkuId));
        giftMap.forEach((key, item) -> {
            Long num = item.stream().map(TradeItem::getNum).reduce(0L, (a, b) -> a + b);
            TradeItem tradeItem = item.get(0);
            tradeItem.setNum(num);
            distinctGifts.add(tradeItem);
        });

        List<String> giftIds = new ArrayList<>(giftMap.keySet());

        Map<String, GoodsInfoVO> skusMap = goodsInfoQueryProvider.listByIds(
                GoodsInfoListByIdsRequest.builder().goodsInfoIds(giftIds).wareId(wareId).build()
        ).getContext().getGoodsInfos().stream()
                .collect(Collectors.toMap(GoodsInfoVO::getGoodsInfoId, Function.identity()));
        distinctGifts.forEach(i -> {
            //赠品根据库存剩余，赠完为止
            GoodsInfoVO goodsInfo = skusMap.get(i.getSkuId());
            if (BigDecimal.valueOf(i.getNum()).compareTo(goodsInfo.getStock()) > 0) {
                i.setNum(goodsInfo.getStock().setScale(0, BigDecimal.ROUND_DOWN).longValue());
            }
        });
        return distinctGifts;
    }

    /**
     * 根据营销活动,检查并设置各赠品数量
     *
     * @param trade
     */
    private void giftSet(Trade trade) {
        //赠品设置
        List<TradeMarketingDTO> marketingRequests = new ArrayList<>();
        trade.getTradeMarketings().forEach(i -> {
            if (i.getMarketingType() == MarketingType.GIFT) {
                TradeMarketingDTO req = TradeMarketingDTO.builder()
                        .giftSkuIds(i.getGiftIds())
                        .marketingId(i.getMarketingId())
                        .marketingLevelId(i.getGiftLevel().getGiftLevelId())
                        .skuIds(i.getSkuIds())
                        .build();
                marketingRequests.add(req);
            }
        });
        trade.setGifts(wrapperGifts(marketingRequests, trade.getTradeMarketings(), trade.getGifts()));
        trade.setGifts(giftNumCheck(trade.getGifts(), trade.getWareId()));
    }

    /**
     * 营销价格计算-结算信息设置
     * 【商品价格计算第②步】: 商品的 满折/满减营销活动 均摊价 -> splitPrice
     *
     * @param trade
     */
    private void calcMarketingPrice(Trade trade) {
        // 1.设置满系营销商品优惠后的均摊价、结算信息
        trade.getTradeMarketings().stream().filter(i -> i.getMarketingType() != MarketingType.GIFT).forEach(i -> {
            List<TradeItem> items = trade.getTradeItems().stream()
                    .filter(t -> {
                        // 只有整箱的商品才参与分摊
                        BigDecimal divisorFlag = t.getDivisorFlag();
                        if (Objects.nonNull(divisorFlag)) {
                            return divisorFlag.compareTo(BigDecimal.ONE) >= 0;
                        }
                        return false;
                    })
                    .filter(t -> i.getSkuIds().contains(t.getSkuId()))
                    .collect(Collectors.toList());
            tradeItemService.clacSplitPrice(items, i.getRealPayAmount());
            items.forEach(t -> {
                List<TradeItem.MarketingSettlement> settlements = new ArrayList<>();
//                settlements.add(t.new MarketingSettlement(i.getMarketingType(),
//                        t.getSplitPrice())
//                );
                BigDecimal marketAmount = (t.getPrice().multiply(t.getBNum())).subtract(t.getSplitPrice());
                if(marketAmount.compareTo(BigDecimal.ZERO)<1){
                    marketAmount = BigDecimal.ZERO;
                }
                settlements.add(TradeItem.MarketingSettlement.builder().marketingType(i.getMarketingType())
                        .splitPrice(t.getSplitPrice()).marketAmount(marketAmount).build());
                t.setMarketingSettlements(settlements);
            });
        });

        // 2.设置店铺优惠券后的均摊价、结算信息
        TradeCouponVO tradeCoupon = trade.getTradeCoupon();
        if (tradeCoupon != null) {
            // 2.1.查找出优惠券关联的商品，及总价
            List<TradeItem> items = trade.getTradeItems().stream()
                    .filter(t -> trade.getTradeCoupon().getGoodsInfoIds().contains(t.getSkuId()))
                    .collect(Collectors.toList());
            BigDecimal total = tradeItemService.calcSkusTotalPrice(items);

            // 2.2.判断是否达到优惠券使用门槛
            BigDecimal fullBuyPrice = tradeCoupon.getFullBuyPrice();
            if (fullBuyPrice != null && fullBuyPrice.compareTo(total) == 1) {
                throw new SbcRuntimeException(CouponErrorCode.CUSTOMER_ORDER_COUPON_INVALID);
            }

            // 2.3.如果商品总价小于优惠券优惠金额，设置优惠金额为商品总价
            if (total.compareTo(tradeCoupon.getDiscountsAmount()) == -1) {
                tradeCoupon.setDiscountsAmount(total);
            }

            // 2.4.计算均摊价、结算信息
            items.forEach(item ->
                    item.getCouponSettlements().add(TradeItem.CouponSettlement.builder()
                            .couponType(tradeCoupon.getCouponType())
                            .couponCodeId(tradeCoupon.getCouponCodeId())
                            .couponCode(tradeCoupon.getCouponCode())
                            .splitPrice(item.getSplitPrice()).build())
            );
            tradeItemService.calcSplitPrice(items, total.subtract(trade.getTradeCoupon().getDiscountsAmount()), total);
            items.forEach(item -> {
                TradeItem.CouponSettlement settlement =
                        item.getCouponSettlements().get(item.getCouponSettlements().size() - 1);
                settlement.setReducePrice(settlement.getSplitPrice().subtract(item.getSplitPrice()));
                settlement.setSplitPrice(item.getSplitPrice());
            });
        }


    }

    /**
     * 更新订单的业务员
     *
     * @param employeeId 业务员
     * @param customerId 客户
     */
    public void updateEmployeeId(String employeeId, String customerId) {
        mongoTemplate.updateMulti(new Query(Criteria.where("buyer.id").is(customerId)), new Update().set("buyer" +
                ".employeeId", employeeId), Trade.class);
    }

    /**
     * 更新是否返利标志
     *
     * @param tradeId
     * @param commissionFlag
     */
    public void updateCommissionFlag(String tradeId, Boolean commissionFlag) {
        mongoTemplate.updateFirst(new Query(Criteria.where("id").is(tradeId)),
                new Update().set("commissionFlag", commissionFlag), Trade.class);
    }

    /**
     * 更新入账时间
     */
    public void updateFinalTime(String tradeId, LocalDateTime finalTime) {
        mongoTemplate.updateFirst(new Query(Criteria.where("id").is(tradeId)),
                new Update().set("tradeState.finalTime", finalTime), Trade.class);
    }

    /**
     * 更新正在进行的退单数量、入账时间
     *
     * @param tradeId 订单id
     * @param addFlag 退单数加减状态
     */
    public void updateReturnOrderNum(String tradeId, boolean addFlag) {
        Trade trade = tradeRepository.findById(tradeId).orElse(null);
        if (Objects.isNull(trade)) {
            log.error("订单ID:{},查询不到订单信息", tradeId);
            return;
        }
        // 1.根据addFlag加减正在进行的退单
        Integer num = trade.getReturnOrderNum();

        // 2.如果当前退单完成时间比入账时间晚时,或者订单未完成直接进行退款操作，则将当前退单完成时间设置为入账时间
        LocalDateTime finalTime = trade.getTradeState().getFinalTime();
        LocalDateTime nowTime = LocalDateTime.now();
        if (Objects.isNull(finalTime) || (!addFlag && nowTime.isAfter(finalTime))) {
            finalTime = nowTime;
        }
        mongoTemplate.updateFirst(new Query(Criteria.where("id").is(tradeId)), new Update()
                .set("returnOrderNum", addFlag ? ++num : --num)
                .set("tradeState.finalTime", finalTime), Trade.class);
    }


    /**
     * 完善没有业务员的订单
     */
    public void fillEmployeeId() {
        List<Trade> trades = mongoTemplate.find(new Query(Criteria.where("buyer.employeeId").is(null)), Trade.class);
        if (CollectionUtils.isEmpty(trades)) {
            return;
        }
        List<String> buyerIds = trades.stream()
                .filter(t -> Objects.nonNull(t.getBuyer()) && StringUtils.isNotBlank(t.getBuyer().getId()))
                .map(Trade::getBuyer)
                .map(Buyer::getId)
                .distinct().collect(Collectors.toList());
        if (CollectionUtils.isEmpty(buyerIds)) {
            return;
        }

        Map<String, String> customerId = customerCommonService.listCustomerDetailByCondition(
                CustomerDetailListByConditionRequest.builder().customerIds(buyerIds).build())
                .stream()
                .filter(customerDetail -> StringUtils.isNotBlank(customerDetail.getEmployeeId()))
                .collect(Collectors.toMap(CustomerDetailVO::getCustomerId, CustomerDetailVO::getEmployeeId));

        customerId.forEach((key, value) -> this.updateEmployeeId(value, key));
    }


    /**
     * 退优惠券
     *
     * @param tradeId 订单id
     */
    public void returnCoupon(String tradeId) {
        // 获取当前的======订单
        Trade trade = this.detail(tradeId);


        trade.getTradeItems().forEach(v -> {
            if (Objects.nonNull(v.getDevanningId())) {
                v.setBNum(v.getDivisorFlag().multiply(BigDecimal.valueOf(v.getNum())));
            } else {
                v.setBNum(BigDecimal.valueOf(v.getNum()));
            }
        });
        Map<String, BigDecimal> collect = trade.getTradeItems().stream().collect(Collectors.groupingBy(TradeItem::getSkuId, Collectors.reducing(BigDecimal.ZERO, TradeItem::getBNum, BigDecimal::add)));
        trade.getTradeItems().forEach(v -> {
            v.setBNum(collect.get(v.getSkuId()));
        });

        // 获取订单中购买的商品数量
        Map<String, TradeItem> boughtSkuNum = trade.getTradeItems().stream()
                .collect(Collectors.toMap(TradeItem::getSkuId, Function.identity(), (last, next) -> next));

        // 累加所有已退商品的数量
        Map<String, BigDecimal> returnSkuNum = new HashMap<>();
        // 商家驳回订单
        if (trade.getTradeState().getAuditState() == AuditState.REJECTED) {
            this.setReturnNum(returnSkuNum, boughtSkuNum);
        } else if (trade.getTradeState().getFlowState() == FlowState.VOID
                && trade.getTradeState().getDeliverStatus() == DeliverStatus.NOT_YET_SHIPPED
                && trade.getTradeState().getPayState() == PayState.NOT_PAID) {
            // 用户取消订单
            this.setReturnNum(returnSkuNum, boughtSkuNum);
        }
        // 获取所有已退的===退单
        List<ReturnOrder> returnOrders = returnOrderRepository.findByTid(trade.getId()).stream()
                .filter(item -> item.getReturnFlowState() == ReturnFlowState.COMPLETED)
                .collect(Collectors.toList());
        // 获取已退商品数量集合
        returnOrders.forEach(r -> {
            r.getReturnItems().forEach(returnItem -> {
                BigDecimal returnNum = returnSkuNum.get(returnItem.getSkuId());
                if (Objects.isNull(returnNum)) {
                    returnSkuNum.put(returnItem.getSkuId(), returnItem.getNum());
                } else {
                    returnSkuNum.put(returnItem.getSkuId(), returnNum.add(returnItem.getNum()));
                }
            });
        });
        // 获取订单组信息
        TradeGroup tradeGroup = StringUtils.isNotEmpty(trade.getGroupId()) ?
                tradeGroupRepository.findById(trade.getGroupId()).orElse(null) : null;
        List<String> storeIds = new ArrayList<>();
        // 循环进行记录或者退券
        returnSkuNum.forEach((key, value) -> {
            // 退款中的该商品使用了优惠券 并且 退款商品的数量和订单中商品购买数量一致.
            if (Objects.nonNull(boughtSkuNum.get(key)) &&
                    !CollectionUtils.isEmpty(boughtSkuNum.get(key).getCouponSettlements()) &&
                    value.longValue() == boughtSkuNum.get(key).getNum()) {
                // 订单组中订单使用了平台优惠券(全场赠券)
                if (boughtSkuNum.get(key).getCouponSettlements().stream()
                        .filter(f -> f.getCouponType() == CouponType.GENERAL_VOUCHERS).findFirst().isPresent() &&
                        Objects.nonNull(tradeGroup) && Objects.nonNull(tradeGroup.getCommonCoupon())) {
                    // 退货的商品使用了全场赠券
                    if (tradeGroup.getCommonCoupon().getGoodsInfoIds().contains(key)) {
                        // 此时认为该商品已经完全退货, 需要在"订单组"中做记录.
                        List<String> ids = tradeGroup.getCommonSkuIds();
                        if (!ids.contains(key)) {
                            ids.add(key);
                            tradeGroup.setCommonSkuIds(ids);
                            tradeGroupRepository.save(tradeGroup);
                        }
                        List<String> skuIds = tradeGroup.getCommonCoupon().getGoodsInfoIds();
                        // 如果全场赠券中商品集合为空, 则不执行后续操作
                        if (CollectionUtils.isEmpty(skuIds)) {
                            return;
                        }
                        // 如果已退商品集合和参加全场赠券的商品集合完全一致
                        if (CollectionUtils.isEqualCollection(skuIds, ids)) {
                            // 设置平台券完全已退
                            tradeGroup.setCommonCouponIsReturn(Boolean.TRUE);
                            tradeGroupRepository.save(tradeGroup);
                            // 退券(全场赠券)
                            couponCodeProvider.returnById(CouponCodeReturnByIdRequest.builder()
                                    .couponCodeId(tradeGroup.getCommonCoupon().getCouponCodeId())
                                    .customerId(trade.getBuyer().getId())
                                    .build());
                        }
                    }
                }
                // 该订单存在使用店铺优惠券
                if (boughtSkuNum.get(key).getCouponSettlements().stream()
                        .filter(f -> f.getCouponType() == CouponType.STORE_VOUCHERS).findFirst().isPresent() &&
                        Objects.nonNull(trade.getTradeCoupon())) {
                    storeIds.add(key);
                    if (CollectionUtils.isEqualCollection(
                            trade.getTradeCoupon().getGoodsInfoIds(), storeIds)) {
                        // 退券(店铺券)
                        couponCodeProvider.returnById(CouponCodeReturnByIdRequest.builder()
                                .couponCodeId(trade.getTradeCoupon().getCouponCodeId())
                                .customerId(trade.getBuyer().getId())
                                .build());
                    }
                }
            }
        });
    }

    /**
     * 设置退货数量
     *
     * @param returnSkuNum
     * @param boughtSkuNum
     */
    private void setReturnNum(Map<String, BigDecimal> returnSkuNum, Map<String, TradeItem> boughtSkuNum) {
        boughtSkuNum.forEach((key, value) -> {
            BigDecimal returnNum = returnSkuNum.get(key);
            if (Objects.isNull(returnNum)) {
                returnSkuNum.put(key, value.getBNum());
            } else {
                returnSkuNum.put(key, value.getBNum());
            }
        });
    }


    /**
     * 根据查询条件获取订单列表--不分页
     *
     * @param whereCriteria
     * @return
     */
    public List<Trade> getTradeList(Criteria whereCriteria) {
        Query query = new Query(whereCriteria);
        List<Trade> tradeList = mongoTemplate.find(query, Trade.class);
        return tradeList;
    }

    /**
     * 订单超时未支付，系统自动取消订单
     *
     * @param tid
     */
    @Transactional(rollbackFor = Exception.class)
    @LcnTransaction
    public void autoCancelOrder(String tid, Operator operator) {
        Trade trade = detail(tid);
        //异常状态订单无需抛异常，不作处理即可
        if (trade.getTradeState().getPayState() == PayState.PAID || trade.getTradeState().getPayState() == PayState.UNCONFIRMED) {
//            throw new SbcRuntimeException("K-050202");
            return;
        }
        if (trade.getTradeState().getDeliverStatus() != DeliverStatus.NOT_YET_SHIPPED) {
//            throw new SbcRuntimeException("K-050203");
            return;
        }

        if (trade.getTradeState().getFlowState() == FlowState.VOID) {
//            throw new SbcRuntimeException("K-050317");
            return;
        }

        if (trade.getTradeState().getAuditState() == AuditState.CHECKED) {
            //删除支付单
            payOrderService.deleteByPayOrderId(trade.getPayOrderId());
        }

        //提货订单
        if (TradeActivityTypeEnum.STOCKUP.toActivityType().equals(trade.getActivityType())) {
            log.info("=============================》MQ取消提货订单释放囤货数量start ：{}《=============================", trade.getId());
            //释放囤货数量
            //取消订单成功加囤货数量
            String customerId = trade.getBuyer().getId();
            List<TradeItem> tradeItems = trade.getTradeItems();
            tradeItems.stream().forEach(tradeItem -> {
                String spuId = tradeItem.getSpuId();
                String skuId = tradeItem.getSkuId();
                //购买数量
                Long num = tradeItem.getNum();
                //通过spuId+skuId+用户id查询囤货表的数据看看是不是有多个，有多个就根据时间减他妈的
                List<PilePurchase> pilePurchases = pilePurchaseRepository.queryPilePurchase(customerId, spuId, skuId);
                if (CollectionUtils.isNotEmpty(pilePurchases)) {
                    PilePurchase purchase = pilePurchases.stream().findFirst().get();
                    purchase.setGoodsNum(purchase.getGoodsNum() + num);
                    //加完以后
                    pilePurchaseRepository.save(purchase);
                }
            });
            log.info("=============================》MQ取消提货订单释放囤货数量end : {}《=============================", trade.getId());

            //状态变更
            StateRequest stateRequest = StateRequest
                    .builder()
                    .tid(trade.getId())
                    .operator(operator)
                    .event(TradeEvent.VOID)
                    .data("提货订单超时未支付，系统自动取消")
                    .build();
            tradeFSMService.changeState(stateRequest);

            /**
             * 限购数量退回
             */

//            //推送给wms取消退单
//            if (wmsAPIFlag) {
//                //拼团订单取消拼团时不需要推送
//                if (!(Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag()) && AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
//                    if (!pushCancelOrder(trade)) {
//                        throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "提货订单取消失败，仓库已拣货！");
//                    }
//                }
//            }

            //查询关联表中的数据
            List<String> skuIds = trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
            List<PileStockRecordAttachment> stockRecordAttachmentList = pileStockRecordAttachmentRepostory.findStockRecordTidAndSkuid(trade.getId(), skuIds);
            //查询囤货记录表
            List<Long> stockRecordId = stockRecordAttachmentList.stream().map(PileStockRecordAttachment::getStockRecordId).collect(Collectors.toList());
            List<PileStockRecord> stockRecordList = pileStockRecordRepository.findAllById(stockRecordId);

            if (stockRecordAttachmentList.size() == 0) {
                List<PileStockRecord> pileStockRecordList = new ArrayList<>();
                trade.getTradeItems().stream().forEach(tradeItem -> {
                    String spuId = tradeItem.getSpuId();
                    String skuId = tradeItem.getSkuId();
                    //加入囤货流水
                    BigDecimal realPay = tradeItem.getSplitPrice().divide(new BigDecimal(tradeItem.getNum()), 2, BigDecimal.ROUND_HALF_UP);
                    PileStockRecord pileStockRecord = PileStockRecord.builder()
                            .goodsId("Q")
                            .goodsInfoId(skuId)
                            .customerId(customerId)
                            .stockRecordNum(tradeItem.getNum())
                            .stockRecordRemainingNum(0L)
                            .stockRecordPrice(realPay)
                            .orderCode(trade.getId())
                            .isUse(0L)
                            .createTime(LocalDateTime.now())
                            .updateTime(LocalDateTime.now())
                            .build();
                    pileStockRecordList.add(pileStockRecord);
                });
                pileStockRecordRepository.saveAll(pileStockRecordList);
            } else {
                stockRecordAttachmentList.stream().forEach(pileStockRecordAttachment -> {
                    stockRecordList.stream().forEach(pileStockRecord -> {
                        if (pileStockRecordAttachment.getStockRecordId().equals(pileStockRecord.getStockRecordId()) && pileStockRecordAttachment.getTid().equals(trade.getId())) {
                            Long num = pileStockRecord.getStockRecordRemainingNum();
                            Long attachment = pileStockRecordAttachment.getNum();
                            pileStockRecord.setStockRecordRemainingNum(num - attachment);
                            pileStockRecord.setUpdateTime(LocalDateTime.now());
                            if (pileStockRecord.getIsUse() == 1 && (pileStockRecord.getStockRecordNum() - pileStockRecord.getStockRecordRemainingNum()) > 0) {
                                pileStockRecord.setIsUse(0L);
                            }
                        }
                    });
                });
                pileStockRecordRepository.saveAll(stockRecordList);
            }
        } else {
            if (kingdeeOpenState) {
                //取消订单，金蝶
                if (!cancelOrder(trade)) {
                    throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败");
                }
                //是否在满十件记录
                TradeCachePushKingdeeOrder tradeCachePushKingdeeOrder = tradeCachePushKingdeeOrderRepository.findByCachePushKingdeeOrder(tid);
                if (Objects.nonNull(tradeCachePushKingdeeOrder)) {
                    tradeCachePushKingdeeOrderRepository.updateCachePushKingdeeOrderStatus(LocalDateTime.now(), tradeCachePushKingdeeOrder.getPushKingdeeId());
                } else {
                    if (!(Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag())) {
                        //取消订单发送给wms
                        if (wmsAPIFlag) {
                            if (!pushCancelOrder(trade)) {
                                throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败，仓库已拣货！");
                            }
                        }
                    }
                }
            }
            //是否是秒杀抢购商品订单
            if (Objects.nonNull(trade.getIsFlashSaleGoods()) && trade.getIsFlashSaleGoods()) {
                flashSaleGoodsOrderAddStock(trade);
            } else {
                //扣除乡镇件库存
                if (trade.getVillageFlag()) {
                    historyTownShipOrderService.reduceTownStock(trade.getId());
                    historyTownShipOrderService.CancelTownStock(trade.getId());
//                    verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
//                    verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
                } else {
                    //释放库存
                    addSkuStock(trade);
                }
                //释放营销活动限购库存
                this.calMarketGoodsNum(trade.getTradeItems(), true);
            }
            if (trade.getActivityType().equals(TradeActivityTypeEnum.NEWPICKTRADE.toActivityType())) {
                //恢复可提商品库存
                trade.getTradeItems().forEach(item -> {
                    log.info("恢复可提商品库存----订单超时未支付------->" + JSONObject.toJSONString(item.getPickGoodsList()));
                    if (CollectionUtils.isNotEmpty(item.getPickGoodsList())) {
                        item.getPickGoodsList().forEach(var -> {
                            NewPileTrade detail = newPileTradeService.detail(var.getNewPileOrderNo());
                            if (detail.getTradeState().getFlowState().equals(NewPileFlowState.COMPLETED)) {
                                detail.getTradeState().setFlowState(NewPileFlowState.PICK_PART);
                                newPileTradeService.updateTrade(detail);
                            }
                            goodsPickStockRepository.addStockByGoodsInfoIdNewPileTradeNo(var.getNum(), var.getGoodsInfoId(), var.getNewPileOrderNo());
                        });
                    }
                });
                //恢复可提商品金额
                inventoryDetailSamountProvider.updateInventoryByTakeIdBack(InventoryDetailSamountRequest.builder().takeId(trade.getId()).build());
            }

            //状态变更
            StateRequest stateRequest = StateRequest
                    .builder()
                    .tid(trade.getId())
                    .operator(operator)
                    .event(TradeEvent.VOID)
                    .data("订单超时未支付，系统自动取消")
                    .build();
            tradeFSMService.changeState(stateRequest);

            // 退优惠券
            returnCoupon(tid);

            //DONE: 退款开关，取消囤货提货订单：autoCancelOrder
            if (trade.getActivityType().equals(TradeActivityTypeEnum.NEWPICKTRADE.toActivityType())) {
                RefundFactory.getTradeRefundImpl(RefundFactory.TradeRefundType.NEW_PICK_CANCEL)
                        .refund(trade, null);
            } else {
                RefundFactory.getTradeRefundImpl(RefundFactory.TradeRefundType.TRADE_CANCEL)
                        .refund(trade, null);
            }

            //取消拼团订单
            grouponOrderService.cancelGrouponOrder(trade);
        }
        // 取消供应商订单
        providerTradeService.providerCancel(tid, operator, true);

        //套装订单退回
        if (Objects.nonNull(trade.getMarketingId())
                && Objects.nonNull(trade.getSuitBuyCount())
                && trade.getSuitBuyCount() > 0) {
            SuitOrderTemp suitOrderTempByOrdercode = suitOrderTempService.getSuitOrderTempByOrdercode(SuitOrderTempQueryRequest.builder().orderCode(trade.getId()).build());
            if (Objects.nonNull(suitOrderTempByOrdercode)) {
                suitOrderTempByOrdercode.setSuitBuyNum(0L);
                suitOrderTempService.updateSuitOrderTemp(KsBeanUtil.convert(suitOrderTempByOrdercode, SuitOrderTempEditRequest.class));
            }
        }
    }

    /**
     * 向金蝶发生取消订单
     *
     * @param trade
     */
    private Boolean cancelOrder(Trade trade) {
        if(!orderCommonService.erpCanTrade(trade)){
            return true;
        }
        Boolean result = false;
        //查询销售订单推送是否成功
        TradePushKingdeeOrder pushKingdeeOrder = tradePushKingdeeOrderRepository.queryPushKingdeeOrder(trade.getId());
        if (Objects.isNull(pushKingdeeOrder)) {
            /*if (StringUtils.isEmpty(trade.getLogistics()) || trade.getLogistics().equals("01")) {
                return false;
            } else if (trade.getLogistics().equals("02")) {
                return true;
            }*/
            return true;
        } else if (Objects.nonNull(pushKingdeeOrder) && pushKingdeeOrder.getOrderStatus().equals(1)) {
            //销售单状态为取消，不处理直接返回
            return true;
        }
        TradePushKingdeeOrder tradePushKingdeeOrder = new TradePushKingdeeOrder();
        tradePushKingdeeOrder.setOrderCode(trade.getId());
        tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.CREATE.toOrderStatus());
        try {
            //销售订单推送成功，请求金蝶取消接口
            if (pushKingdeeOrder.getPushStatus() == PushKingdeeStatusEnum.PUSHSUCCESS.toStatus()) {
                if (trade.getId() == null) {
                    logger.info("TradeService.cancelOrder orderId is null");
                    tradePushKingdeeOrder.setCancelOperation("参数错误");
                    tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.PARAMETERERROR.toOrderStatus());
                    return false;
                }
                KingdeeSalesOrder order = new KingdeeSalesOrder();
                order.setOrderNumber(trade.getId());
                //登录财务系统
                Map<String, Object> requestLogMap = new HashMap<>();
                requestLogMap.put("user", kingdeeUser);
                requestLogMap.put("pwd", kingdeePwd);
                String loginToken = kingdeeLoginUtils.userLoginKingdee(requestLogMap, loginUrl);
                if (StringUtils.isNotEmpty(loginToken)) {
                    //提交财务单
                    Map<String, Object> requestMap = new HashMap<>();
                    requestMap.put("Model", order);
                    HttpCommonResult httpCommonResult = HttpCommonUtil.postHeader(orderInvalidUrl, requestMap, loginToken);
                    logger.info("TradeService.cancelOrder result:{} result.length", httpCommonResult.getResultData(), httpCommonResult.getResultData().length());
                    KingDeeResult kingDeeResult = JSONObject.parseObject(httpCommonResult.getResultData(), KingDeeResult.class);
                    if (StringUtils.isNotEmpty(httpCommonResult.getResultData()) && httpCommonResult.getResultData().length() > 50) {
                        String resultStr = httpCommonResult.getResultData().substring(0, 20);
                        tradePushKingdeeOrder.setCancelOperation(resultStr);
                    } else {
                        tradePushKingdeeOrder.setCancelOperation(httpCommonResult.getResultData());
                    }
                    if (Objects.nonNull(kingDeeResult) && kingDeeResult.getCode().equals("0")) {
                        tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.CANCELSUCCESS.toOrderStatus());
                        result = true;
                    } else {
                        tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.CANCELFAILURE.toOrderStatus());
                    }
                } else {
                    logger.error("TradeService.cancelOrder push kingdee error");
                    tradePushKingdeeOrder.setCancelOperation("金蝶登录失败");
                    tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.CANCELFAILURE.toOrderStatus());
                }
            } else {
                tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.CANCELSUCCESS.toOrderStatus());
                result = true;
            }
        } catch (Exception e) {
            logger.error("TradeService.cancelOrder error orderId:{} er:{}", trade.getId(), e);
            tradePushKingdeeOrder.setCancelOperation("金蝶取消推送失败");
            tradePushKingdeeOrder.setOrderStatus(PushKingdeeOrderStatusEnum.CANCELFAILURE.toOrderStatus());
        } finally {
            tradePushKingdeeOrder.setUpdateTime(LocalDateTime.now());
            tradePushKingdeeOrderRepository.updatePushKingdeeCancelOrderState(tradePushKingdeeOrder);
            return result;
        }
    }

    /**
     * @return void
     * @Author lvzhenwei
     * @Description 秒杀商品订单还库存
     * @Date 13:47 2019/7/2
     * @Param [trade]
     **/
    @Transactional
    public void flashSaleGoodsOrderAddStock(Trade trade) {
        //获取秒杀抢购活动详情
        FlashSaleGoodsVO flashSaleGoodsVO = flashSaleGoodsQueryProvider.getById(FlashSaleGoodsByIdRequest.builder()
                .id(trade.getTradeItems().get(0).getFlashSaleGoodsId())
                .build())
                .getContext().getFlashSaleGoodsVO();
        //判断秒杀活动是否还在进行中，如果在进行中，将库存加到秒杀活动商品的库存，否则加到原商品库存
        if (LocalDateTime.now().isAfter(flashSaleGoodsVO.getActivityFullTime()) &&
                LocalDateTime.now().isBefore(flashSaleGoodsVO.getActivityFullTime().plusHours(2))) {
            trade.getBuyer().getId();
            verifyService.addFlashSaleGoodsStock(trade.getTradeItems(), trade.getBuyer().getId());
        } else {
            //释放库存
            addSkuStock(trade);
        }
    }

    /**
     * 订单选择银联企业支付通知财务
     *
     * @param customerId
     * @param orderId
     * @param url
     */
    public void sendEmailToFinance(String customerId, String orderId, String url) {
        // 客户id、订单id、PC端服务器路径url不能为空
        if (StringUtils.isBlank(customerId) || StringUtils.isBlank(orderId) || StringUtils.isBlank(url)) {
            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
        } else {
            BaseResponse<EmailConfigQueryResponse> config = emailConfigProvider.queryEmailConfig();
            // 邮箱停用状态下直接返回
            if (config.getContext().getStatus() == EmailStatus.DISABLE) {
                return;
            }
            // 查询客户收信邮箱
//            List<CustomerEmail> customerEmails = customerEmailRepository
//                    .findCustomerEmailsByCustomerIdAndDelFlagOrderByCreateTime(customerId, DeleteFlag.NO);
            List<CustomerEmailVO> customerEmails = customerEmailQueryProvider
                    .list(new NoDeleteCustomerEmailListByCustomerIdRequest(customerId)).getContext()
                    .getCustomerEmails();
            if (customerEmails.isEmpty()) {
                throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
            }
            Trade tradedetail = this.detail(orderId);
            tradeEmailService.sendMail(config, customerEmails, tradedetail, url);
        }
    }

    /**
     * 将上月订单发送到制定邮件
     */
    public void sendEmailTranslate() {
        BaseResponse<EmailConfigQueryResponse> config = emailConfigProvider.queryEmailConfig();
        // 邮箱停用状态下直接返回
        if (config.getContext().getStatus() == EmailStatus.DISABLE) {
            return;
        }
        //获取上个月第一天
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MONTH, -1);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        String startMonthDay = new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
        //获取上个月的最后一天
        Calendar calendar2 = Calendar.getInstance();
        calendar2.set(Calendar.DAY_OF_MONTH, 0);
        String endMonthDay = new SimpleDateFormat("yyyy-MM-dd").format(calendar2.getTime());
        String format = new SimpleDateFormat("yyyy-MM").format(calendar2.getTime());
        TradeListExportRequest request = new TradeListExportRequest();
        TradeQueryDTO dto = new TradeQueryDTO();
        dto.setBeginTime(startMonthDay);
        dto.setEndTime(endMonthDay);
        request.setTradeQueryDTO(dto);
        log.info("================================开始查" + format + "订单信息=======================================", LocalDateTime.now());
        List<TradeVO> list = tradeQueryProvider.listTradeExportMonth(request).getContext().getTradeVOList();
        log.info("================================查询" + format + "订单信息结束=======================================", LocalDateTime.now());
        ByteArrayOutputStream byteArrayOutputStream = null;
        try {
            log.info("================================开始转换" + format + "订单信息=======================================");
            byteArrayOutputStream = tradeExportUtil.exportToByteArrayOutputStream(list);
            log.info("================================转换" + format + "订单信息完成=======================================");
        } catch (Exception e) {
            log.error("sendEmailTranslate,", e);
        }

        GenerateExcelSendEmailVo vo = new GenerateExcelSendEmailVo<>();
        vo.setOut(byteArrayOutputStream);
        // 3.设置email的title
        vo.setEmailTitle("订单信息");
        //4.设置email的内容
        vo.setEmailContent("订单详情");
        // 5.设置收件人
        List<String> acceptAddressList = new ArrayList<>();
        if (StringUtils.isNotEmpty(sendOrderLastMonth)) {
            String[] split = sendOrderLastMonth.split(",");
            for (String s : split) {
                if (StringUtils.isNotEmpty(s)) {
                    acceptAddressList.add(s);
                }
            }
        }
        vo.setAcceptAddressList(acceptAddressList);
        Long nanoTime = System.nanoTime();
        if (CollectionUtils.isNotEmpty(acceptAddressList)) {
            log.info("####开始发送邮件#### : {} -- {}", acceptAddressList, nanoTime);
            emailOrderUtil.sendOrderEmail(vo, config);
        } else {
            log.info("#####收件人邮箱为空!请前往配置文件设置邮箱！######");
        }
    }

    /**
     * 查询导出数据
     *
     * @param tradeQueryRequest
     */
    public List<Trade> listTradeExportMonth(TradeQueryRequest tradeQueryRequest) {
//        long count = this.countNum(tradeQueryRequest.getWhereCriteria(), tradeQueryRequest);
//        if (count > 1000) {
//            count = 1000;
//        }
//        tradeQueryRequest.putSort(tradeQueryRequest.getSortColumn(), tradeQueryRequest.getSortRole());
//        tradeQueryRequest.setPageNum(0);
//        tradeQueryRequest.setPageSize((int) count);

        //设置返回字段
        Map fieldsObject = new HashMap();
        fieldsObject.put("_id", true);
        fieldsObject.put("parentId", true);
        fieldsObject.put("tradeState.createTime", true);
        fieldsObject.put("buyer.name", true);
        fieldsObject.put("buyer.account", true);
        fieldsObject.put("buyer.levelName", true);
        fieldsObject.put("consignee.name", true);
        fieldsObject.put("consignee.phone", true);
        fieldsObject.put("consignee.detailAddress", true);
        fieldsObject.put("payInfo.desc", true);
        fieldsObject.put("deliverWay", true);
        fieldsObject.put("tradePrice", true);
        fieldsObject.put("tradeItems.oid", true);
        fieldsObject.put("tradeItems.skuId", true);
        fieldsObject.put("tradeItems.skuNo", true);
        fieldsObject.put("tradeItems.num", true);
        fieldsObject.put("buyerRemark", true);
        fieldsObject.put("sellerRemark", true);
        fieldsObject.put("tradeState.flowState", true);
        fieldsObject.put("tradeState.payState", true);
        fieldsObject.put("tradeState.deliverStatus", true);
        fieldsObject.put("invoice.type", true);
        fieldsObject.put("invoice.projectName", true);
        fieldsObject.put("invoice.generalInvoice.title", true);
        fieldsObject.put("invoice.specialInvoice.companyName", true);
        fieldsObject.put("supplier.supplierName", true);
        //增加返回赠品信息
        fieldsObject.put("gifts.oid", true);
        fieldsObject.put("gifts.skuId", true);
        fieldsObject.put("gifts.skuNo", true);
        fieldsObject.put("gifts.num", true);
        //优惠券信息
        //券码id
        fieldsObject.put("tradeCoupon.couponCodeId", true);
        fieldsObject.put("tradeCoupon.couponCode", true);
        fieldsObject.put("tradeCoupon.discountsAmount", true);
        fieldsObject.put("buyer", true);
        String beginTime = tradeQueryRequest.getBeginTime();
        String endTime = tradeQueryRequest.getEndTime();
        Criteria criteria = new Criteria();
        LocalDateTime localDateTime = DateUtil.parseDay(endTime).plusDays(1);
        Criteria gte = Criteria.where("tradeState.createTime").gte(DateUtil.parseDay(beginTime));
        Criteria lt = Criteria.where("tradeState.createTime").lt(localDateTime);
        criteria.andOperator(gte, lt);
        Query query = new Query(criteria);
        System.err.println("mongo：  " + LocalDateTime.now());
        List<Trade> tradeList = mongoTemplate.find(query, Trade.class);

        System.err.println("mongo：  " + LocalDateTime.now());
        return tradeList;
    }


    public List<Trade> listTradeExport(TradeQueryRequest tradeQueryRequest) {
        long count = this.countNum(tradeQueryRequest.getWhereCriteria(), tradeQueryRequest);
        if (count > 3000) {
            count = 3000;
        }
        tradeQueryRequest.putSort(tradeQueryRequest.getSortColumn(), tradeQueryRequest.getSortRole());
        tradeQueryRequest.setPageNum(0);
        tradeQueryRequest.setPageSize((int) count);

        //设置返回字段
        Map fieldsObject = new HashMap();
        fieldsObject.put("_id", true);
        fieldsObject.put("parentId", true);

        fieldsObject.put("tradeState.createTime", true);
        fieldsObject.put("buyer.name", true);
        fieldsObject.put("buyer.account", true);
        fieldsObject.put("buyer.levelName", true);
        fieldsObject.put("buyer.employeeId", true);
        fieldsObject.put("consignee.name", true);
        fieldsObject.put("consignee.phone", true);
        fieldsObject.put("consignee.detailAddress", true);
        fieldsObject.put("payInfo.desc", true);
        fieldsObject.put("deliverWay", true);
        fieldsObject.put("tradePrice", true);
        fieldsObject.put("tradeItems.oid", true);
        fieldsObject.put("tradeItems.skuId", true);
        fieldsObject.put("tradeItems.skuNo", true);
        fieldsObject.put("tradeItems.num", true);
        fieldsObject.put("tradeItems.price", true);
        fieldsObject.put("tradeItems.splitPrice", true);
        fieldsObject.put("tradeItems.levelPrice", true);
        fieldsObject.put("tradeItems.skuName", true);
        fieldsObject.put("tradeItems.goodsSubtitle", true);
        fieldsObject.put("activityType", true);
        fieldsObject.put("buyerRemark", true);
        fieldsObject.put("sellerRemark", true);
        fieldsObject.put("tradeState.flowState", true);
        fieldsObject.put("tradeState.payState", true);
        fieldsObject.put("invoice.type", true);
        fieldsObject.put("invoice.projectName", true);
        fieldsObject.put("invoice.generalInvoice.title", true);
        fieldsObject.put("invoice.specialInvoice.companyName", true);
        fieldsObject.put("supplier.supplierName", true);
        fieldsObject.put("supplier.storeName", true);
        fieldsObject.put("supplier.supplierId", true);
        //增加返回赠品信息
        fieldsObject.put("gifts.oid", true);
        fieldsObject.put("gifts.skuId", true);
        fieldsObject.put("gifts.skuNo", true);
        fieldsObject.put("gifts.num", true);
        fieldsObject.put("gifts.price", true);
        fieldsObject.put("gifts.splitPrice", true);
        fieldsObject.put("gifts.levelPrice", true);
        fieldsObject.put("gifts.skuName", true);
        fieldsObject.put("gifts.goodsSubtitle", true);
        //优惠券信息
        //券码id
        fieldsObject.put("tradeCoupon.couponCodeId", true);
        fieldsObject.put("tradeCoupon.couponCode", true);
        fieldsObject.put("tradeCoupon.couponName", true);
        fieldsObject.put("tradeCoupon.discountsAmount", true);
        fieldsObject.put("buyer", true);
        fieldsObject.put("wareId", true);
        fieldsObject.put("returnCoin", true);
        Query query = new BasicQuery(new Document(), new Document(fieldsObject));
        query.addCriteria(tradeQueryRequest.getWhereCriteria());
        System.err.println("mongo：  " + LocalDateTime.now());
        List<Trade> tradeList = mongoTemplate.find(query.with(tradeQueryRequest.getPageRequest()), Trade.class);
        System.err.println("mongo：  " + LocalDateTime.now());
        return tradeList;
    }

    public void setTradeVoInvestmentManager(List<TradeVO> tradeVOS) {
        if(CollectionUtils.isEmpty(tradeVOS))
            return;
        //设置招商代表
        Map<Long, List<TradeVO>> companyIdTradeMap = new HashMap<>(tradeVOS.size());
        tradeVOS.forEach(tradeVo -> {
            if (Objects.nonNull(tradeVo.getSupplier()) && Objects.nonNull(tradeVo.getSupplier().getSupplierId())) {
                List<TradeVO> voList = companyIdTradeMap.get(tradeVo.getSupplier().getSupplierId());
                if (voList == null) {
                    voList = new ArrayList<>(100);
                    companyIdTradeMap.put(tradeVo.getSupplier().getSupplierId(), voList);
                }
                voList.add(tradeVo);
            }
        });
        if(companyIdTradeMap.size()==0)
            return;
        CompanyInfoListResponse companyInfoListResponse = companyInfoQueryProvider.listCompanyInfo(CompanyListRequest.builder().companyInfoIds(new ArrayList<>(companyIdTradeMap.keySet())).build()).getContext();
        if (companyInfoListResponse != null && CollectionUtils.isNotEmpty(companyInfoListResponse.getCompanyInfoVOList())) {
            companyInfoListResponse.getCompanyInfoVOList().forEach(info -> {
                if (CollectionUtils.isEmpty(info.getEmployeeVOList())) {
                    return;
                }
                EmployeeVO employee = info.getEmployeeVOList().stream().filter(e-> Objects.equals(DefaultFlag.YES.toValue(), e.getIsMasterAccount())).findFirst().orElse(null);
                if(employee == null)
                    return;
                EmployeeContractResponese employeeContractResponese = employeeContractProvider.findByEmployeeId(employee.getEmployeeId()).getContext();
                if(employeeContractResponese==null)
                    return;
                String investmentManager = employeeContractResponese.getInvestmentManager();
                if(StringUtils.isNotEmpty(investmentManager)) {
                    companyIdTradeMap.get(info.getCompanyInfoId()).forEach(tradeVO -> {
                        tradeVO.setInvestmentManager(investmentManager);
                    });
                }
            });
        }
    }

    /**
     * 生成积分兑换优惠券的积分订单
     */
    @LcnTransaction
    @Transactional
    public PointsTradeCommitResult pointsCouponCommit(PointsCouponTradeCommitRequest commitRequest) {
        // 1.验证用户
        CustomerVO customer = verifyService.verifyCustomer(commitRequest.getCustomer().getCustomerId());
        commitRequest.setCustomer(customer);

        // 2.包装积分优惠券订单信息
        Trade trade = this.wrapperPointsCouponTrade(commitRequest);

        // 3.提交积分兑换优惠券订单
        PointsTradeCommitResult result = this.createPointsCouponTrade(trade);

        // 4.扣除用户积分
        customerPointsDetailSaveProvider.add(CustomerPointsDetailAddRequest.builder()
                .customerId(customer.getCustomerId())
                .type(OperateType.DEDUCT)
                .serviceType(PointsServiceType.COUPON_EXCHANGE)
                .points(trade.getTradePrice().getPoints())
                .content(JSONObject.toJSONString(Collections.singletonMap("orderNo", trade.getId())))
                .build());

        return result;
    }

    private Trade wrapperPointsCouponTrade(PointsCouponTradeCommitRequest commitRequest) {
        Trade trade = new Trade();
        // 设置订单基本信息
        Optional<CommonLevelVO> commonLevelVO;
        boolean flag = true;
        commonLevelVO =
                Optional.of(this.fromCustomerLevel(customerLevelQueryProvider.getDefaultCustomerLevel().getContext()));
        trade.setBuyer(Buyer.fromCustomer(commitRequest.getCustomer(), commonLevelVO, flag));

        TradePointsCouponItem tradeItem = new TradePointsCouponItem();
        tradeItem.setOid(generatorService.generateOid());
        tradeItem.setCouponInfoVO(commitRequest.getCouponInfoVO());

        trade.setId(generatorService.generateTid());
        trade.setPlatform(Platform.CUSTOMER);
        trade.setOrderSource(OrderSource.WECHAT);
        trade.setOrderType(OrderType.POINTS_ORDER);
        trade.setPointsOrderType(PointsOrderType.POINTS_COUPON);
        trade.setPayInfo(PayInfo.builder()
                .payTypeId(String.format("%d", PayType.ONLINE.toValue()))
                .payTypeName(PayType.ONLINE.name())
                .desc(PayType.ONLINE.getDesc())
                .build());
        trade.setRequestIp(commitRequest.getOperator().getIp());
        trade.setTradeCouponItem(tradeItem);
        trade.setTradePrice(TradePrice.builder().points(commitRequest.getPoints()).build());

        return trade;
    }

    /**
     * 提交积分订单
     *
     * @param trade 积分订单
     * @return 订单提交结果
     */
    @Transactional
    public PointsTradeCommitResult createPointsCouponTrade(Trade trade) {
        PointsTradeCommitResult commitResult = null;

        //创建订单
        try {
            // 订单状态默认为已完成
            trade.setTradeState(TradeState
                    .builder()
                    .deliverStatus(DeliverStatus.SHIPPED)
                    .payState(PayState.PAID)
                    .flowState(FlowState.COMPLETED)
                    .createTime(LocalDateTime.now())
                    .build());
            // 订单入库
            tradeService.addTrade(trade);

            commitResult = new PointsTradeCommitResult(trade.getId(), trade.getTradePrice().getPoints());
        } catch (Exception e) {
            log.error("commit points coupon trade error,trade={}", trade, e);
            if (e instanceof SbcRuntimeException) {
                throw e;
            } else {
                throw new SbcRuntimeException("K-020010");
            }
        }
        return commitResult;
    }

    /**
     * 发送消息
     *
     * @param nodeType
     * @param nodeCode
     * @param params
     * @param routeParam
     * @param customerId
     */
    private void sendMessage(NodeType nodeType, DistributionType nodeCode, List<String> params,
                             Map<String, Object> routeParam, String customerId, String pic, String mobile) {
        MessageMQRequest messageMQRequest = new MessageMQRequest();
        messageMQRequest.setNodeCode(nodeCode.getType());
        messageMQRequest.setNodeType(nodeType.toValue());
        messageMQRequest.setParams(params);
        messageMQRequest.setRouteParam(routeParam);
        messageMQRequest.setCustomerId(customerId);
        messageMQRequest.setPic(pic);
        messageMQRequest.setMobile(mobile);
        orderProducerService.sendMessage(messageMQRequest);
    }

    /**
     * 判断商品是否企业购商品
     *
     * @param enterpriseAuditState
     * @return
     */
    private boolean isEnjoyIepGoodsInfo(EnterpriseAuditState enterpriseAuditState) {
        return !Objects.isNull(enterpriseAuditState)
                && enterpriseAuditState == EnterpriseAuditState.CHECKED;
    }

    /**
     * 功能描述: WareHouseVO转TradeWareHouse
     * 〈〉
     */
    private TradeWareHouse wareHouseTurnToTrade(WareHouseVO wareHouseVO) {
        if (null != wareHouseVO) {
            return KsBeanUtil.convert(wareHouseVO, TradeWareHouse.class);
        }
        return null;
    }

    private LogisticsInfo toLogisticsInfo(LogisticsInfoDTO logisticsInfoDTO) {
        if (null != logisticsInfoDTO) {
            return KsBeanUtil.convert(logisticsInfoDTO, LogisticsInfo.class);
        }
        return null;
    }

    /**
     * 根据供货商拆单并入库
     *
     * @param trade
     */
    private void splitProvideTrade(Trade trade) {
        List<TradeItem> tradeItemList = trade.getTradeItems();

        // 订单商品id集合
        List<String> goodsInfoIdList = tradeItemList.stream().map(TradeItem::getSkuId).collect(Collectors.toList());
        BaseResponse<GoodsInfoListByIdsResponse> listByIdsResponse =
                goodsInfoQueryProvider.listByIds(GoodsInfoListByIdsRequest.builder().goodsInfoIds(goodsInfoIdList).build());
        List<GoodsInfoVO> goodsInfoVOList = listByIdsResponse.getContext().getGoodsInfos();
        tradeItemList.forEach(tradeItem -> goodsInfoVOList.forEach(goodsInfoVO -> {
            if (tradeItem.getSkuId().equals(goodsInfoVO.getGoodsInfoId())) {
                // tradeItem设置供应商id
                tradeItem.setProviderId(goodsInfoVO.getProviderId());
                // 供货价
                tradeItem.setSupplyPrice(goodsInfoVO.getSupplyPrice());
                BigDecimal supplyPrice = Objects.nonNull(goodsInfoVO.getSupplyPrice()) ?
                        goodsInfoVO.getSupplyPrice() : BigDecimal.ZERO;
                // 供货价总额
                tradeItem.setTotalSupplyPrice(supplyPrice.multiply(new BigDecimal(tradeItem.getNum())));
            }
        }));

        // 查询订单商品所属供应商id集合
        List<Long> providerIds = goodsInfoVOList.stream().filter(
                goodsInfoVO -> Objects.nonNull(goodsInfoVO.getProviderId()))
                .map(GoodsInfoVO::getProviderId).distinct().collect(Collectors.toList());

        // 判断是否有供应商id，有则需要根据供应商拆单
        if (CollectionUtils.isNotEmpty(providerIds)) {
            // 1. 商户自己的商品信息，单独作为一个拆单项保存
            List<TradeItem> storeItemList =
                    tradeItemList.stream().filter(tradeItem -> Objects.isNull(tradeItem.getProviderId())).collect(Collectors.toList());
            if (CollectionUtils.isNotEmpty(storeItemList)) {
                ProviderTrade storeTrade = KsBeanUtil.convert(trade, ProviderTrade.class);
                // 用经营商户订单id作为供应商订单的父id
                storeTrade.setParentId(trade.getId());
                storeTrade.setId(generatorService.generateProviderTid());
                storeTrade.setTradeItems(storeItemList);

                // 拆单后，重新计算价格信息
                TradePrice tradePrice = storeTrade.getTradePrice();
                // 商品总价
                BigDecimal goodsPrice = BigDecimal.ZERO;
                // 订单总价:实付金额
                BigDecimal orderPrice = BigDecimal.ZERO;
                // 订单供货价总额
                BigDecimal orderSupplyPrice = BigDecimal.ZERO;
                for (TradeItem providerTradeItem : storeItemList) {
                    // 商品总价
                    goodsPrice = goodsPrice.add(providerTradeItem.getPrice().multiply(new BigDecimal(providerTradeItem.getNum())));
                    // 商品分摊价格
                    BigDecimal splitPrice = Objects.isNull(providerTradeItem.getSplitPrice()) ? BigDecimal.ZERO :
                            providerTradeItem.getSplitPrice();
                    // 订单总价:用分摊金额乘以数量，计算订单实际价格
                    orderPrice = orderPrice.add(splitPrice.multiply(new BigDecimal(providerTradeItem.getNum())));
                    // 订单供货价总额
                    orderSupplyPrice = orderSupplyPrice.add(providerTradeItem.getTotalSupplyPrice());
                }
                // 商品总价
                tradePrice.setGoodsPrice(goodsPrice);
                tradePrice.setOriginPrice(goodsPrice);
                // 订单总价
                tradePrice.setTotalPrice(orderPrice);
                tradePrice.setTotalPayCash(orderPrice);
                // 订单供货价总额
                tradePrice.setOrderSupplyPrice(orderSupplyPrice);

                storeTrade.setTradePrice(tradePrice);

                providerTradeService.addProviderTrade(storeTrade);
            }

            // 查询供货商店铺信息
            BaseResponse<ListNoDeleteStoreByIdsResponse> storesResposne =
                    storeQueryProvider.listNoDeleteStoreByIds(ListNoDeleteStoreByIdsRequest.builder().storeIds(providerIds).build());
            List<StoreVO> storeVOList = storesResposne.getContext().getStoreVOList();

            // 2. 根据供货商id拆单
            providerIds.forEach(providerId -> {
                ProviderTrade providerTrade = KsBeanUtil.convert(trade, ProviderTrade.class);

                // 用经营商户订单id作为供应商订单的父id
                providerTrade.setParentId(trade.getId());
                providerTrade.setId(generatorService.generateProviderTid());
                // 筛选当前供应商的订单商品信息
                List<TradeItem> providerTradeItems =
                        tradeItemList.stream().filter(tradeItem -> providerId.equals(tradeItem.getProviderId())).collect(Collectors.toList());

                providerTrade.setTradeItems(providerTradeItems);
                // 原订单所属商家名称
                providerTrade.setSupplierName(trade.getSupplier().getSupplierName());
                // 原订单所属商家编号
                providerTrade.setSupplierCode(trade.getSupplier().getSupplierCode());
                // 原订单所属商户id
                providerTrade.setStoreId(trade.getSupplier().getStoreId());
                Supplier supplier = providerTrade.getSupplier();

                // 供应商信息
                StoreVO provider =
                        storeVOList.stream().filter(store -> store.getStoreId().equals(providerId)).findFirst().get();
                // 保存供应商店铺信息
                supplier.setStoreId(provider.getStoreId());
                supplier.setSupplierName(provider.getSupplierName());
                supplier.setSupplierId(provider.getCompanyInfo().getCompanyInfoId());
                supplier.setSupplierCode(provider.getCompanyInfo().getCompanyCode());
                // 使用的运费模板类别(0:店铺运费,1:单品运费)
                supplier.setFreightTemplateType(provider.getFreightTemplateType());
                // providerTrade中supplier对象更新为供应商信息
                providerTrade.setSupplier(supplier);

                // 拆单后，重新计算价格信息
                TradePrice tradePrice = providerTrade.getTradePrice();
                // 商品总价
                BigDecimal goodsPrice = BigDecimal.ZERO;
                // 订单总价:实付金额
                BigDecimal orderPrice = BigDecimal.ZERO;
                // 订单供货价总额
                BigDecimal orderSupplyPrice = BigDecimal.ZERO;
                for (TradeItem providerTradeItem : providerTradeItems) {
                    // 商品总价
                    goodsPrice = goodsPrice.add(providerTradeItem.getPrice().multiply(new BigDecimal(providerTradeItem.getNum())));
                    // 商品分摊价格
                    BigDecimal splitPrice = Objects.isNull(providerTradeItem.getSplitPrice()) ? BigDecimal.ZERO :
                            providerTradeItem.getSplitPrice();
                    // 订单总价:用分摊金额乘以数量，计算订单实际价格
                    orderPrice = orderPrice.add(splitPrice.multiply(new BigDecimal(providerTradeItem.getNum())));
                    // 订单供货价总额
                    orderSupplyPrice = orderSupplyPrice.add(providerTradeItem.getTotalSupplyPrice());
                    // 供应商名称
                    providerTradeItem.setProviderName(provider.getSupplierName());
                    // 供应商编号
                    providerTradeItem.setProviderCode(provider.getCompanyInfo().getCompanyCode());
                }

                // 商品总价
                tradePrice.setGoodsPrice(goodsPrice);
                tradePrice.setOriginPrice(goodsPrice);
                // 订单总价
                tradePrice.setTotalPrice(orderPrice);
                tradePrice.setTotalPayCash(orderPrice);
                // 订单供货价总额
                tradePrice.setOrderSupplyPrice(orderSupplyPrice);

                providerTrade.setTradePrice(tradePrice);
                providerTradeService.addProviderTrade(providerTrade);
            });
        }
    }


    /**
     * 功能描述: <br>调用第三方WMS接口
     * 〈〉
     *
     * @Param: [returnOrder, warehouseId]
     * @Return: java.lang.Boolean
     * @Author:
     * @Date: 2020/5/19 15:12
     */
    private Boolean pushCancelOrder(Trade trade) {
        if(!orderCommonService.wmsCanTrade(trade)){
            return true;
        }
        if (!isPayByOfflineOrIsOPK(trade)) {
            log.info("线上支付订单下单时未推送WMS,取消时不用推送取消单到WMS,tid={}", trade.getId());
            return true;
        }
        BaseResponse<ResponseWMSReturnResponse> result = null;
        try {
            result = requestWMSOrderProvider.cancelOrder(WMSOrderCancelRequest.builder()
                    .docNo(trade.getId())
                    .customerId("XYY")
                    .warehouseId(trade.getWareHouseCode())
                    .orderType("XSCK")
                    .erpCancelReason("不想要了！！")
                    .build());
        } catch (Exception e) {
            if (e instanceof SbcRuntimeException) {
                SbcRuntimeException exception = (SbcRuntimeException) e;
                if ("K-050510".equals(exception.getErrorCode())) {
                    throw new SbcRuntimeException("K-050510");
                }
            }
            return false;
        }
        return !Objects.isNull(result) && !Objects.isNull(result.getContext()) &&
                !Objects.isNull(result.getContext().getResponseWMSReturnVO()) &&
                AbstractXYYConstant.RESPONSE_SUCCESS.equals(result.getContext().getResponseWMSReturnVO().getReturnCode());
    }


    /**
     * 功能描述: <br>调用第三方WMS接口
     * 〈〉
     *
     * @Param: [returnOrder, warehouseId]
     * @Return: java.lang.Boolean
     * @Author:
     * @Date: 2020/5/19 15:12
     */
    public Boolean pushConfirmOrder(Trade trade) {
        if(!orderCommonService.wmsCanTrade(trade)){
            return true;
        }
        BaseResponse<ResponseWMSReturnResponse> result = null;
        try {
            result = requestWMSOrderProvider.confirmSalesOrder(WMSOrderCancelRequest.builder()
                    .customerId("XYY")
                    .docNo(trade.getId())
                    .orderType("XSCK")
                    .warehouseId(trade.getWareHouseCode())
                    .erpCancelReason("不想要了！！")
                    .build());
        } catch (Exception e) {
            return false;
        }
        return !Objects.isNull(result) && !Objects.isNull(result.getContext()) &&
                !Objects.isNull(result.getContext().getResponseWMSReturnVO()) &&
                AbstractXYYConstant.RESPONSE_SUCCESS.equals(result.getContext().getResponseWMSReturnVO().getReturnCode()) &&
                Objects.nonNull(result.getContext().getResponseWMSReturnVO().getReturnFlag()) &&
                result.getContext().getResponseWMSReturnVO().getReturnFlag() > 0;
    }

    /**
     * 功能描述: <br> 订单推送WMS
     * 〈〉
     *
     * @Param: [trade, warehouseId]
     * @Return: java.lang.Boolean
     * @Date: 2020/5/18 11:24
     */
    public void pushWMSOrder(Trade trade, Boolean hasGroupedFlag, Boolean villageFlag) {
        logger.info("TradeService.pushWMSOrder req tradeId:{} ", trade.getId());
        //查询省市区
        logger.info("TradeService.pushWMSOrder req trade:{} ", JSONObject.toJSONString(trade));
        if(!orderCommonService.wmsCanTrade(trade)){
            return;
        }
        List<Long> city = new ArrayList<>();
        city.add(trade.getConsignee().getProvinceId());
        city.add(trade.getConsignee().getCityId());
        city.add(trade.getConsignee().getAreaId());
        city.add(trade.getConsignee().getTwonId());
        logger.info("TradeService.pushWMSOrder query:{}", JSONObject.toJSONString(city));
        List<RegionCopyVO> responseResults = regionQueryProvider.queryRegionCopyNumber(RegionQueryResponse.builder().number(city).build()).getContext();
        logger.info("TradeService.pushWMSOrder responseResults:{}", JSONObject.toJSONString(responseResults));
        WMSPushOrderRequest wmsPushOrderRequest = new WMSPushOrderRequest();
        if (trade.getMergFlag()){
            //新增wms父级id
            wmsPushOrderRequest.setHedi01(trade.getParentId());
        }
        //如果是散批那么需要取规格
        boolean sp = trade.getId().substring(0,3).contains("SP");
        boolean o = trade.getId().substring(0,3).contains("O");
        if (sp){
            //获取
            GatherBoxSetInfoResponse context1 = gatherBoxSetProvider.getGatherBoxSetInfo().getContext();
            if (Objects.isNull(context1)){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "未查询到散批合并整个拆箱规格");
            }
            if (Objects.isNull(context1.getSkuNum()) || context1.getSkuNum()==0){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, " 散批合并整个拆箱规格异常或者为null");
            }
            wmsPushOrderRequest.setHedi02(context1.getSkuNum().toString());
        }

        String jobNo = WmsErpIdConstants.ERP_CUSTOMER_ID;
        if (StringUtils.isNotEmpty(trade.getBuyer().getEmployeeId())) {
            EmployeeByIdResponse response = employeeQueryProvider
                    .getById(EmployeeByIdRequest.builder().employeeId(trade.getBuyer().getEmployeeId()).build()).getContext();
            logger.info("TradeService.pushWMSOrder req EmployeeByIdResponse:{} ", JSONObject.toJSONString(response));

            if (Objects.nonNull(response) && Objects.nonNull(response.getJobNo())) {
                jobNo = response.getJobNo();
            }
        }
        List<WMSPushOrderDetailsRequest> orderDetails = new ArrayList<>(100);
        AtomicInteger lineNo = new AtomicInteger(1);
        //组装订单详情参数
        List<TradeItem> allItems = new ArrayList<>();
        allItems.addAll(trade.getTradeItems());
//        allItems.addAll(trade.getGifts());
        allItems.forEach(param -> {
            //子单的erp 仓库编码
            if (!SaleType.RETAIL.equals(trade.getSaleType())) {
                String prefix = Constants.ERP_NO_PREFIX.get(trade.getWareId());
                param.setErpSkuNo(param.getErpSkuNo().replace(prefix, ""));
            }
            String loatt04 = ERPWMSConstants.MAIN_WH;
            if ("WH01".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.MAIN_WH;
                }
            }
            if ("WH02".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.SUB_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.SUB_WH;
                }
            }
            if ("WH03".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.SHORE_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.STORE_WH;
                }
            }
            BigDecimal addStep = param.getAddStep().setScale(2,
                    BigDecimal.ROUND_HALF_UP);
//            BigDecimal itemPrice = param.getPrice();
            /* BigDecimal spliteItemPrice = itemPrice.divide(addStep,2,BigDecimal.ROUND_HALF_UP);*/

            //拆箱规格合并
            BigDecimal num = BigDecimal.valueOf(param.getNum());

          if (sp){
              orderDetails.add(WMSPushOrderDetailsRequest.builder()
                      .sku(param.getErpSkuNo())
                      .lotAtt03("1箱="+param.getAddStep().longValue()+param.getUnit())
                      .qtyOrdered(true ? num.multiply(addStep).setScale(2,
                              BigDecimal.ROUND_HALF_UP) : num)
                      .qtyOrdered_each(true ? num.multiply(addStep).setScale(2,
                              BigDecimal.ROUND_HALF_UP) : num)


                      //todo 注意有基础单位的换算 零售保持原来的逻辑 批发不需要乘以步长
//                    .qtyOrdered(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
//                    .qtyOrdered_each(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
                      .lineNo(lineNo.get())
                      .customerId("XYY")
                      //todo 注意这边的价格后期可能要调整
                      .price(param.getSplitPrice())
                      .userDefine1(param.getGoodsInfoType())
                      .userDefine5(param.getSkuNo())
                      .lotatt04(loatt04)
                      .dedi07(param.getPileOrderCode())
                      .dedi04("N")
                      .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                      .build());
          }else {
              BigDecimal priceWithWallet = getPriceWithWallet(param);
              orderDetails.add(WMSPushOrderDetailsRequest.builder()
                      .sku(param.getErpSkuNo())
                      .qtyOrdered(true ? num.multiply(addStep).setScale(2,
                              BigDecimal.ROUND_HALF_UP) : num)
                      .qtyOrdered_each(true ? num.multiply(addStep).setScale(2,
                              BigDecimal.ROUND_HALF_UP) : num)


                      //todo 注意有基础单位的换算 零售保持原来的逻辑 批发不需要乘以步长
//                    .qtyOrdered(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
//                    .qtyOrdered_each(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
                      .lineNo(lineNo.get())
                      .customerId("XYY")
                      //todo 注意这边的价格后期可能要调整
                      .price(priceWithWallet)
                      .userDefine1(param.getGoodsInfoType())
                      .userDefine5(param.getSkuNo())
                      .lotatt04(loatt04)
                      .dedi07(param.getPileOrderCode())
                      .dedi04("N")
                      .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                      .build());
          }

            lineNo.incrementAndGet();
        });
        //赠品组装
        if (Objects.nonNull(trade.getGifts()) && CollectionUtils.isNotEmpty(trade.getGifts())) {
            trade.getGifts().forEach(param -> {
                if (!SaleType.RETAIL.equals(trade.getSaleType())) {
                    String prefix = Constants.ERP_NO_PREFIX.get(trade.getWareId());
                    param.setErpSkuNo(param.getErpSkuNo().replace(prefix, ""));
                }
                //子单的erp 仓库编码
                String loatt04 = ERPWMSConstants.MAIN_WH;
                if ("WH01".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.MAIN_WH;
                    }
                }
                if ("WH02".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.SUB_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.SUB_WH;
                    }
                }
                if ("WH03".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.SHORE_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.STORE_WH;
                    }
                }
                BigDecimal addStep = param.getAddStep().setScale(2,
                        BigDecimal.ROUND_HALF_UP);
//            BigDecimal itemPrice = param.getPrice();
                /* BigDecimal spliteItemPrice = itemPrice.divide(addStep,2,BigDecimal.ROUND_HALF_UP);*/
                orderDetails.add(WMSPushOrderDetailsRequest.builder()
                        .sku(param.getErpSkuNo())
                        //todo 注意有基础单位的换算
                        .qtyOrdered(BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP))
                        .qtyOrdered_each(BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP))
                        .lineNo(lineNo.get())
                        .customerId("XYY")
                        //todo 注意这边的价格后期可能要调整
                        .price(param.getSplitPrice())
                        .userDefine1(param.getGoodsInfoType())
                        .userDefine5(param.getSkuNo())
                        .lotatt04(loatt04)
                        .dedi07(param.getPileOrderCode())
                        .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                        .dedi04("Y")
                        .build());
                lineNo.incrementAndGet();
            });
        }


        Supplier supplier = trade.getSupplier();
        //组装订单参数
        wmsPushOrderRequest.setWarehouseId(trade.getWareHouseCode());
        //商家在erp开户ID
        wmsPushOrderRequest.setCustomerId(supplier.getErpId() != null ? supplier.getErpId() : "XYY");
        //固定值
        wmsPushOrderRequest.setOrderType(orderCommonService.getWmsDocType(trade));
        //来源
        wmsPushOrderRequest.setSoReferenceA("001");
        //订单号
        wmsPushOrderRequest.setDocNo(trade.getId());
        //固定值
        wmsPushOrderRequest.setAddWho("DS");
        //固定值
        wmsPushOrderRequest.setSoReferenceD(orderCommonService.getWmsSoReference5(trade));
        //订单释放状态 --- 如果先款后货的传N 如果是不限的传Y
        wmsPushOrderRequest.setPriority(PaymentOrder.PAY_FIRST.equals(trade.getPaymentOrder()) ? "N" : "Y");
        //如果是拼团成功的订单也直接存Y
        if (hasGroupedFlag) {
            wmsPushOrderRequest.setPriority("Y");
        }
        //省市
        if (CollectionUtils.isNotEmpty(responseResults)) {
            StringBuffer consigneeProvince = new StringBuffer();
            StringBuffer consigneeArea = new StringBuffer();
            for (RegionCopyVO regionVO : responseResults) {
                if ((regionVO.getCode().equals(trade.getConsignee().getProvinceId())) || (regionVO.getCode().equals(trade.getConsignee().getCityId()))) {
                    //省
                    consigneeProvince.append(regionVO.getName());
                }
                if (regionVO.getCode().equals(trade.getConsignee().getAreaId())) {
                    consigneeArea.append(regionVO.getName());
                }
            }
            wmsPushOrderRequest.setConsigneeProvince(consigneeProvince.toString());
            wmsPushOrderRequest.setConsigneeCity(consigneeArea.toString());
            log.info("ConsigneeCity - consigneeArea : " + consigneeArea.toString() + " twonid:" + trade.getConsignee().getTwonId());
        }
        //订单创建时间
        wmsPushOrderRequest.setOrderTime(DateUtil.format(LocalDateTime.now(), DateUtil.FMT_TIME_1));
        //收货人的erpId
//        wmsPushOrderRequest.setConsigneeId(trade.getBuyer().getCustomerErpId());
        wmsPushOrderRequest.setConsigneeId(trade.getBuyer().getAccount());
        //收货人名称
        wmsPushOrderRequest.setConsigneeName(trade.getConsignee().getName());
        //收货人联系人名称
        wmsPushOrderRequest.setConsigneeTel2(trade.getConsignee().getName());
        //收货人电话
        wmsPushOrderRequest.setConsigneeTel1(trade.getConsignee().getPhone());
        //收货人的地址
        wmsPushOrderRequest.setConsigneeAddress1(trade.getConsignee().getDetailAddress());
        //订单总价-配送费-包装费
        String priceDetail = trade.getTradePrice().getTotalPrice().toString();
        if (Objects.nonNull(trade.getTradePrice().getDeliveryPrice()) && trade.getTradePrice().getDeliveryPrice().compareTo(BigDecimal.ZERO) >= 0) {
            priceDetail = priceDetail.concat("-").concat(trade.getTradePrice().getDeliveryPrice().toString());
        } else {
            priceDetail = priceDetail.concat("-").concat("0");
        }
        if (Objects.nonNull(trade.getTradePrice().getPackingPrice()) && trade.getTradePrice().getPackingPrice().compareTo(BigDecimal.ZERO) >= 0) {
            priceDetail = priceDetail.concat("-").concat(trade.getTradePrice().getPackingPrice().toString());
        } else {
            priceDetail = priceDetail.concat("-").concat("0");
        }
        //合并单算总数
        if (trade.getMergFlag()){
            //如果是合并单需要获取 合并单号 总数=批发总数+散批总数
            //查询快照获取2种订单的数量
            List<TradeItemGroup> tradeItemGroups = tradeItemService.findItemByCustomerId(trade.getBuyer().getId());
            List<TradeItem> wholesaleItems = new LinkedList<>();//批发商品
            List<TradeItem> bulkItems = new LinkedList<>();//散批商品
            Long wholesaleItemNum = 0L;
            Long bulkItemNum = 0L;
            tradeItemGroups.forEach(v->{
                if (v.getSaleType().equals(SaleType.WHOLESALE)){
                    wholesaleItems.addAll(v.getTradeItems());
                } else if (v.getSaleType().equals(SaleType.BULK)) {
                    bulkItems.addAll(v.getTradeItems());
                }
            });
            if (CollectionUtils.isNotEmpty(bulkItems)){
                //算取数量
                bulkItemNum = bulkItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
                //获取
                GatherBoxSetInfoResponse context1 = gatherBoxSetProvider.getGatherBoxSetInfo().getContext();
                if (Objects.isNull(context1)){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "未查询到散批合并整个拆箱规格");
                }
                if (Objects.isNull(context1.getSkuNum()) || context1.getSkuNum()==0){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, " 散批合并整个拆箱规格异常或者为null");
                }
                Long skuNum = context1.getSkuNum();
                if (bulkItemNum%skuNum>0){
                    bulkItemNum=(bulkItemNum/skuNum)+1;
                }else {
                    bulkItemNum=bulkItemNum/skuNum;
                }
            }
            if (sp){
                if (CollectionUtils.isNotEmpty(wholesaleItems)){
                    wholesaleItemNum = wholesaleItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
                }
            }else if (o){
                wholesaleItemNum = allItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            }
            //赠品加入
            Long reduce = trade.getGifts().stream().map(TradeItem::getNum).reduce(0L, Long::sum);

            long l = wholesaleItemNum + bulkItemNum +reduce;
            wmsPushOrderRequest.setConsigneeAddress2(String.valueOf(l));

        }else {
            Long reduce = allItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            //赠品加入
            Long zreduce = trade.getGifts().stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            Long l = reduce+zreduce;
            wmsPushOrderRequest.setConsigneeAddress2(l.toString());
        }

        //线上线下
        wmsPushOrderRequest.setUserDefine1(jobNo);
        //付款标识
        wmsPushOrderRequest.setUserDefine2(PayState.PAID.equals(trade.getTradeState().getPayState()) ? "2" : "0");
        //预约发货时间
        wmsPushOrderRequest.setExpectedShipmentTime1(Objects.isNull(trade.getBookingDate()) ? null : trade.getBookingDate().toString() + " 00:00:00");
        //业务员
        wmsPushOrderRequest.setUserDefine6(jobNo);
        //备注
        wmsPushOrderRequest.setNotes(trade.getBuyerRemark());
        //运送方式
        //修正如果配送方式是战点自提需要改成免店配
        if (trade.getDeliverWay().equals(DeliverWay.SITE_PICK_SELF)){
            wmsPushOrderRequest.setCarrierMail(switchWMSPushOrderType(DeliverWay.DELIVERY_HOME));
            //如果是站点自提需要加站点名称
            wmsPushOrderRequest.setUserDefine4(trade.getNetWorkVO().getNetworkName());
        }else {
            wmsPushOrderRequest.setCarrierMail(switchWMSPushOrderType(trade.getDeliverWay()));
        }

        if(WMSCarrierMail.ZTCK.getCode().equals(wmsPushOrderRequest.getCarrierMail())){
            wmsPushOrderRequest.setConsigneeAddress1(getNetWorkAddressByToDoorPick(trade));
        }

        //是否是乡村件
        if (villageFlag && trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME)) {
            wmsPushOrderRequest.setConsigneeAddress3("1");
        } else {
            wmsPushOrderRequest.setConsigneeAddress3("0");
        }


        //明细
        wmsPushOrderRequest.setDetails(orderDetails);
        if (isLogistics(trade.getDeliverWay()) && Objects.nonNull(trade.getLogisticsCompanyInfo())) {
            if (Objects.nonNull(trade.getLogisticsCompanyInfo().getCompanyNumber())) {
                wmsPushOrderRequest.setCarrierId(trade.getLogisticsCompanyInfo().getCompanyNumber());
            } else {
                String uuid = UUIDUtil.getUUID().substring(29);
                wmsPushOrderRequest.setCarrierId("customer-" + uuid);
            }
            wmsPushOrderRequest.setCarrierName(trade.getLogisticsCompanyInfo().getLogisticsCompanyName());
            wmsPushOrderRequest.setCarrierFax(trade.getLogisticsCompanyInfo().getLogisticsCompanyPhone());
            wmsPushOrderRequest.setUserDefine5(trade.getLogisticsCompanyInfo().getLogisticsAddress());
            wmsPushOrderRequest.setUserDefine4(trade.getLogisticsCompanyInfo().getReceivingPoint());//增加收货站点
        }
        boolean noLimitFlag = AuditState.CHECKED.equals(trade.getTradeState().getAuditState()) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        //wmsPushOrderRequest.setUserDefine3(noLimitFlag ? "0" : "1");
        wmsPushOrderRequest.setUserDefine3(supplier.getStoreName());
        ResponseWMSReturnResponse response = requestWMSOrderProvider.putSalesOrder(wmsPushOrderRequest).getContext();
        //紧急处理下单需要wms反馈才修改当前电商下单库存以及后续流程
        if (Objects.isNull(response)
                || Objects.isNull(response.getResponseWMSReturnVO())
                || Objects.isNull(response.getResponseWMSReturnVO().getReturnFlag())
                || response.getResponseWMSReturnVO().getReturnFlag() < 1) {
//            throw new SbcRuntimeException(OrderErrorCode.ORDER_PUSH_TIME_OUT);
            log.info("当前推送wms，wms返回异常的订单：{},wms返回",trade.getId(),response != null ? JSONObject.toJSONString(response) : null);
        }
        //扣除乡镇件库存、减去真实库存
        if (trade.getVillageFlag()) {
            this.updateStockAndTownStock(trade);
        }

    }

    private static String getNetWorkAddressByToDoorPick(Trade trade) {
        StringBuffer detailAddress = new StringBuffer();
        if(StringUtils.isNotBlank(trade.getNetWorkVO().getProvinceName())){
            detailAddress.append(trade.getNetWorkVO().getProvinceName());
        }
        if(StringUtils.isNotBlank(trade.getNetWorkVO().getCityName())){
            detailAddress.append(trade.getNetWorkVO().getCityName());
        }
        if(StringUtils.isNotBlank(trade.getNetWorkVO().getAreaName())){
            detailAddress.append(trade.getNetWorkVO().getAreaName());
        }
        if(StringUtils.isNotBlank(trade.getNetWorkVO().getTownName())){
            detailAddress.append(trade.getNetWorkVO().getTownName());
        }
        if(StringUtils.isNotBlank(trade.getNetWorkVO().getNetworkAddress())){
            detailAddress.append(trade.getNetWorkVO().getNetworkAddress());
        }
        if(detailAddress.length()==0){
            detailAddress.append(trade.getNetWorkVO().getNetworkName());
        }
        return detailAddress.toString();
    }

    /***
     * @desc 合并推wms
     * @author shiy  2023/8/5 11:55
     */
    public void pushWMSMergerOrder(List<Trade> trades) {
        WMSPushOrderRequest wmsPushOrderRequest = new WMSPushOrderRequest();
        //查询省市区
        logger.info("TradeService.pushWMSOrder req trade:{} ", JSONObject.toJSONString(trades));
        Trade trade = trades.get(0);
        List<Long> city = new ArrayList<>();
        city.add(trade.getConsignee().getProvinceId());
        city.add(trade.getConsignee().getCityId());
        city.add(trade.getConsignee().getAreaId());
        city.add(trade.getConsignee().getTwonId());
        logger.info("TradeService.pushWMSOrder query:{}", JSONObject.toJSONString(city));
        List<RegionCopyVO> responseResults = regionQueryProvider.queryRegionCopyNumber(RegionQueryResponse.builder().number(city).build()).getContext();
        logger.info("TradeService.pushWMSOrder responseResults:{}", JSONObject.toJSONString(responseResults));

        if (trade.getMergFlag()) {
            //新增wms父级id
            wmsPushOrderRequest.setHedi01(trade.getParentId());
        }
        String jobNo = WmsErpIdConstants.ERP_CUSTOMER_ID;
        if (StringUtils.isNotEmpty(trade.getBuyer().getEmployeeId())) {
            EmployeeByIdResponse response = employeeQueryProvider
                    .getById(EmployeeByIdRequest.builder().employeeId(trade.getBuyer().getEmployeeId()).build()).getContext();
            logger.info("TradeService.pushWMSOrder req EmployeeByIdResponse:{} ", JSONObject.toJSONString(response));

            if (Objects.nonNull(response) && Objects.nonNull(response.getJobNo())) {
                jobNo = response.getJobNo();
            }
        }
        //线上线下
        wmsPushOrderRequest.setUserDefine1(jobNo);
        //业务员
        wmsPushOrderRequest.setUserDefine6(jobNo);
        List<WMSPushOrderDetailsRequest> orderDetails = new ArrayList<>(100);
        //省市
        if (CollectionUtils.isNotEmpty(responseResults)) {
            StringBuffer consigneeProvince = new StringBuffer();
            StringBuffer consigneeArea = new StringBuffer();
            for (RegionCopyVO regionVO : responseResults) {
                if ((regionVO.getCode().equals(trade.getConsignee().getProvinceId())) || (regionVO.getCode().equals(trade.getConsignee().getCityId()))) {
                    //省
                    consigneeProvince.append(regionVO.getName());
                }
                if (regionVO.getCode().equals(trade.getConsignee().getAreaId())) {
                    consigneeArea.append(regionVO.getName());
                }
            }
            wmsPushOrderRequest.setConsigneeProvince(consigneeProvince.toString());
            wmsPushOrderRequest.setConsigneeCity(consigneeArea.toString());
            log.info("ConsigneeCity - consigneeArea : " + consigneeArea.toString() + " twonid:" + trade.getConsignee().getTwonId());
        }
        //付款标识
        wmsPushOrderRequest.setUserDefine2(PayState.PAID.equals(trade.getTradeState().getPayState()) ? "2" : "0");
        //预约发货时间
        wmsPushOrderRequest.setExpectedShipmentTime1(Objects.isNull(trade.getBookingDate()) ? null : trade.getBookingDate().toString() + " 00:00:00");

        //订单释放状态 --- 如果先款后货的传N 如果是不限的传Y
        wmsPushOrderRequest.setPriority(PaymentOrder.PAY_FIRST.equals(trade.getPaymentOrder()) ? "N" : "Y");

        //订单创建时间
        wmsPushOrderRequest.setOrderTime(DateUtil.format(LocalDateTime.now(), DateUtil.FMT_TIME_1));
        //收货人的erpId
//        wmsPushOrderRequest.setConsigneeId(trade.getBuyer().getCustomerErpId());
        wmsPushOrderRequest.setConsigneeId(trade.getBuyer().getAccount());
        //收货人名称
        wmsPushOrderRequest.setConsigneeName(trade.getConsignee().getName());
        //收货人联系人名称
        wmsPushOrderRequest.setConsigneeTel2(trade.getConsignee().getName());
        //收货人电话
        wmsPushOrderRequest.setConsigneeTel1(trade.getConsignee().getPhone());
        //收货人的地址
        wmsPushOrderRequest.setConsigneeAddress1(trade.getConsignee().getDetailAddress());
        //固定值
        wmsPushOrderRequest.setAddWho("DS");
        //来源
        wmsPushOrderRequest.setSoReferenceA("001");

        for(int i=0;i<trades.size();i++) {
            trade = trades.get(i);
            buildPushWmsMergeTrade(trade, wmsPushOrderRequest,orderDetails);
        }
        //明细
        wmsPushOrderRequest.setDetails(orderDetails);
        ResponseWMSReturnResponse response = requestWMSOrderProvider.putSalesOrder(wmsPushOrderRequest).getContext();
        //紧急处理下单需要wms反馈才修改当前电商下单库存以及后续流程
        if (Objects.isNull(response)
                || Objects.isNull(response.getResponseWMSReturnVO())
                || Objects.isNull(response.getResponseWMSReturnVO().getReturnFlag())
                || response.getResponseWMSReturnVO().getReturnFlag() < 1) {
//            throw new SbcRuntimeException(OrderErrorCode.ORDER_PUSH_TIME_OUT);
            log.info("当前推送wms，wms返回异常的订单：{},wms返回", trade.getParentId(), response != null ? JSONObject.toJSONString(response) : null);
        }
        trades.forEach(t->{
            //扣除乡镇件库存、减去真实库存
            if (t.getVillageFlag()) {
                this.updateStockAndTownStock(t);
            }
        });

    }

    private void buildPushWmsMergeTrade(Trade trade, WMSPushOrderRequest wmsPushOrderRequest, List<WMSPushOrderDetailsRequest> orderDetails) {
        AtomicInteger lineNo = new AtomicInteger(1);
        //组装订单详情参数
        List<TradeItem> allItems = new ArrayList<>();
        allItems.addAll(trade.getTradeItems());
//        allItems.addAll(trade.getGifts());
        buildWMSTradeItem(trade, orderDetails, lineNo, allItems);
        //赠品组装
        buildWMSTradeGift(trade, orderDetails, lineNo);

        Supplier supplier = trade.getSupplier();
        //组装订单参数
        wmsPushOrderRequest.setWarehouseId(trade.getWareHouseCode());
        //商家在erp开户ID
        wmsPushOrderRequest.setCustomerId(supplier.getErpId() != null ? supplier.getErpId() : "XYY");
        //固定值
        wmsPushOrderRequest.setOrderType(orderCommonService.getWmsDocType(trade));
        //订单号
        wmsPushOrderRequest.setDocNo(trade.getId());
        //固定值
        wmsPushOrderRequest.setSoReferenceD(orderCommonService.getWmsSoReference5(trade));

        //订单总价-配送费-包装费
        String priceDetail = trade.getTradePrice().getTotalPrice().toString();
        if (Objects.nonNull(trade.getTradePrice().getDeliveryPrice()) && trade.getTradePrice().getDeliveryPrice().compareTo(BigDecimal.ZERO) >= 0) {
            priceDetail = priceDetail.concat("-").concat(trade.getTradePrice().getDeliveryPrice().toString());
        } else {
            priceDetail = priceDetail.concat("-").concat("0");
        }
        if (Objects.nonNull(trade.getTradePrice().getPackingPrice()) && trade.getTradePrice().getPackingPrice().compareTo(BigDecimal.ZERO) >= 0) {
            priceDetail = priceDetail.concat("-").concat(trade.getTradePrice().getPackingPrice().toString());
        } else {
            priceDetail = priceDetail.concat("-").concat("0");
        }

        Long reduce = allItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
        //赠品加入
        Long zreduce = trade.getGifts().stream().map(TradeItem::getNum).reduce(0L, Long::sum);
        Long l = reduce + zreduce;
        wmsPushOrderRequest.setConsigneeAddress2(l.toString());
        //备注
        wmsPushOrderRequest.setNotes(trade.getBuyerRemark());
        //运送方式
        //修正如果配送方式是战点自提需要改成免店配
        if (trade.getDeliverWay().equals(DeliverWay.SITE_PICK_SELF)) {
            wmsPushOrderRequest.setCarrierMail(switchWMSPushOrderType(DeliverWay.DELIVERY_HOME));
            //如果是站点自提需要加站点名称
            wmsPushOrderRequest.setUserDefine4(trade.getNetWorkVO().getNetworkName());
        } else {
            wmsPushOrderRequest.setCarrierMail(switchWMSPushOrderType(trade.getDeliverWay()));
        }
        if(WMSCarrierMail.ZTCK.getCode().equals(wmsPushOrderRequest.getCarrierMail())){
            wmsPushOrderRequest.setConsigneeAddress1(getNetWorkAddressByToDoorPick(trade));
        }

        //是否是乡村件
        if (trade.getVillageFlag() && trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME)) {
            wmsPushOrderRequest.setConsigneeAddress3("1");
        } else {
            wmsPushOrderRequest.setConsigneeAddress3("0");
        }
        if (isLogistics(trade.getDeliverWay()) && Objects.nonNull(trade.getLogisticsCompanyInfo())) {
            if (Objects.nonNull(trade.getLogisticsCompanyInfo().getCompanyNumber())) {
                wmsPushOrderRequest.setCarrierId(trade.getLogisticsCompanyInfo().getCompanyNumber());
            } else {
                String uuid = UUIDUtil.getUUID().substring(29);
                wmsPushOrderRequest.setCarrierId("customer-" + uuid);
            }
            wmsPushOrderRequest.setCarrierName(trade.getLogisticsCompanyInfo().getLogisticsCompanyName());
            wmsPushOrderRequest.setCarrierFax(trade.getLogisticsCompanyInfo().getLogisticsCompanyPhone());
            wmsPushOrderRequest.setUserDefine5(trade.getLogisticsCompanyInfo().getLogisticsAddress());
            wmsPushOrderRequest.setUserDefine4(trade.getLogisticsCompanyInfo().getReceivingPoint());//增加收货站点
        }
        //boolean noLimitFlag = AuditState.CHECKED.equals(trade.getTradeState().getAuditState()) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        //wmsPushOrderRequest.setUserDefine3(noLimitFlag ? "0" : "1");
        wmsPushOrderRequest.setUserDefine3(supplier.getStoreName());
    }

    private static void buildWMSTradeGift(Trade trade, List<WMSPushOrderDetailsRequest> orderDetails, AtomicInteger lineNo) {
        if (Objects.nonNull(trade.getGifts()) && CollectionUtils.isNotEmpty(trade.getGifts())) {
            trade.getGifts().forEach(param -> {
                if (!SaleType.RETAIL.equals(trade.getSaleType())) {
                    String prefix = Constants.ERP_NO_PREFIX.get(trade.getWareId());
                    param.setErpSkuNo(param.getErpSkuNo().replace(prefix, ""));
                }
                //子单的erp 仓库编码
                String loatt04 = ERPWMSConstants.MAIN_WH;
                if ("WH01".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.MAIN_WH;
                    }
                }

                BigDecimal addStep = param.getAddStep().setScale(2,
                        BigDecimal.ROUND_HALF_UP);
//            BigDecimal itemPrice = param.getPrice();
                /* BigDecimal spliteItemPrice = itemPrice.divide(addStep,2,BigDecimal.ROUND_HALF_UP);*/
                orderDetails.add(WMSPushOrderDetailsRequest.builder()
                        .sku(param.getErpSkuNo())
                        //todo 注意有基础单位的换算
                        .qtyOrdered(BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP))
                        .qtyOrdered_each(BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP))
                        .lineNo(lineNo.get())
                        .customerId("XYY")
                        //todo 注意这边的价格后期可能要调整
                        .price(param.getSplitPrice())
                        .userDefine1(param.getGoodsInfoType())
                        .userDefine5(param.getSkuNo())
                        .lotatt04(loatt04)
                        .dedi07(param.getPileOrderCode())
                        .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                        .dedi04("Y")
                        .build());
                lineNo.incrementAndGet();
            });
        }
    }

    private static void buildWMSTradeItem(Trade trade, List<WMSPushOrderDetailsRequest> orderDetails, AtomicInteger lineNo, List<TradeItem> allItems) {
        allItems.forEach(param -> {
            //子单的erp 仓库编码
            if (!SaleType.RETAIL.equals(trade.getSaleType())) {
                String prefix = Constants.ERP_NO_PREFIX.get(trade.getWareId());
                param.setErpSkuNo(param.getErpSkuNo().replace(prefix, ""));
            }
            String loatt04 = ERPWMSConstants.MAIN_WH;
            if ("WH01".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.MAIN_WH;
                }
            }

            BigDecimal addStep = param.getAddStep().setScale(2,
                    BigDecimal.ROUND_HALF_UP);

            //拆箱规格合并
            BigDecimal num = BigDecimal.valueOf(param.getNum());

            BigDecimal priceWithWallet = getPriceWithWallet(param);
            orderDetails.add(WMSPushOrderDetailsRequest.builder()
                    .sku(param.getErpSkuNo())
                    .qtyOrdered(true ? num.multiply(addStep).setScale(2,
                            BigDecimal.ROUND_HALF_UP) : num)
                    .qtyOrdered_each(true ? num.multiply(addStep).setScale(2,
                            BigDecimal.ROUND_HALF_UP) : num)
                    .lineNo(lineNo.get())
                    .customerId("XYY")
                    //todo 注意这边的价格后期可能要调整
                    .price(priceWithWallet)
                    .userDefine1(param.getGoodsInfoType())
                    .userDefine5(param.getSkuNo())
                    .lotatt04(loatt04)
                    .dedi07(param.getPileOrderCode())
                    .dedi04("N")
                    .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                    .build());

            lineNo.incrementAndGet();
        });
    }

    /***
     * @desc  推WMS价格包含的鲸币
     * @author shiy  2023/7/18 11:54
    */
    private static BigDecimal getPriceWithWallet(TradeItem param) {
        BigDecimal priceWithWallet = param.getSplitPrice();
        if(CollectionUtils.isNotEmpty(param.getWalletSettlements())){
            priceWithWallet=BigDecimal.ZERO;
            for(TradeItem.WalletSettlement walletSettlement : param.getWalletSettlements()){
                priceWithWallet = priceWithWallet.add(walletSettlement.getSplitPrice()).add(walletSettlement.getReduceWalletPrice());
            }
        }
        return priceWithWallet;
    }


    /**
     * 功能描述: <br> 订单推送WMS
     * 〈〉
     *
     * @Param: [trade, warehouseId]
     * @Return: java.lang.Boolean
     * @Date: 2020/5/18 11:24
     */
    public void pushWMSOrder2(Trade trade, Boolean hasGroupedFlag, Boolean villageFlag) {
        logger.info("TradeService.pushWMSOrder req tradeId:{} ", trade.getId());
        //查询省市区
        logger.info("TradeService.pushWMSOrder req trade:{} ", JSONObject.toJSONString(trade));
        if(!orderCommonService.wmsCanTrade(trade)){
            return;
        }
        List<Long> city = new ArrayList<>();
        city.add(trade.getConsignee().getProvinceId());
        city.add(trade.getConsignee().getCityId());
        city.add(trade.getConsignee().getAreaId());
        city.add(trade.getConsignee().getTwonId());
        logger.info("TradeService.pushWMSOrder query:{}", JSONObject.toJSONString(city));
        List<RegionCopyVO> responseResults = regionQueryProvider.queryRegionCopyNumber(RegionQueryResponse.builder().number(city).build()).getContext();
        logger.info("TradeService.pushWMSOrder responseResults:{}", JSONObject.toJSONString(responseResults));
        WMSPushOrderRequest wmsPushOrderRequest = new WMSPushOrderRequest();
        if (trade.getMergFlag()){
            //新增wms父级id
            wmsPushOrderRequest.setHedi01(trade.getParentId());
        }
        //如果是散批那么需要取规格
        boolean sp = trade.getId().substring(0,3).contains("SP");
        boolean o = trade.getId().substring(0,3).contains("O");
        if (sp){
            //获取
            GatherBoxSetInfoResponse context1 = gatherBoxSetProvider.getGatherBoxSetInfo().getContext();
            if (Objects.isNull(context1)){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "未查询到散批合并整个拆箱规格");
            }
            if (Objects.isNull(context1.getSkuNum()) || context1.getSkuNum()==0){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, " 散批合并整个拆箱规格异常或者为null");
            }
            wmsPushOrderRequest.setHedi02(context1.getSkuNum().toString());
        }

        String jobNo = WmsErpIdConstants.ERP_CUSTOMER_ID;
        if (StringUtils.isNotEmpty(trade.getBuyer().getEmployeeId())) {
            EmployeeByIdResponse response = employeeQueryProvider
                    .getById(EmployeeByIdRequest.builder().employeeId(trade.getBuyer().getEmployeeId()).build()).getContext();
            logger.info("TradeService.pushWMSOrder req EmployeeByIdResponse:{} ", JSONObject.toJSONString(response));

            if (Objects.nonNull(response) && Objects.nonNull(response.getJobNo())) {
                jobNo = response.getJobNo();
            }
        }
        List<WMSPushOrderDetailsRequest> orderDetails = new ArrayList<>(100);
        AtomicInteger lineNo = new AtomicInteger(1);
        //组装订单详情参数
        List<TradeItem> allItems = new ArrayList<>();
        allItems.addAll(trade.getTradeItems());
//        allItems.addAll(trade.getGifts());
        allItems.forEach(param -> {
            //子单的erp 仓库编码
            if (!SaleType.RETAIL.equals(trade.getSaleType())) {
                String prefix = Constants.ERP_NO_PREFIX.get(trade.getWareId());
                param.setErpSkuNo(param.getErpSkuNo().replace(prefix, ""));
            }
            String loatt04 = ERPWMSConstants.MAIN_WH;
            if ("WH01".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.MAIN_WH;
                }
            }
            if ("WH02".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.SUB_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.SUB_WH;
                }
            }
            if ("WH03".equals(trade.getWareHouseCode())) {
                if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                    loatt04 = ERPWMSConstants.SHORE_MARKETING_WH;
                } else {
                    loatt04 = ERPWMSConstants.STORE_WH;
                }
            }
            BigDecimal addStep = param.getAddStep().setScale(2,
                    BigDecimal.ROUND_HALF_UP);
//            BigDecimal itemPrice = param.getPrice();
            /* BigDecimal spliteItemPrice = itemPrice.divide(addStep,2,BigDecimal.ROUND_HALF_UP);*/

            //拆箱规格合并
            BigDecimal num = BigDecimal.valueOf(param.getNum());

            if (sp){
                orderDetails.add(WMSPushOrderDetailsRequest.builder()
                        .sku(param.getErpSkuNo())
                        .lotAtt03("1箱="+param.getAddStep().longValue()+param.getUnit())
                        .qtyOrdered(true ? num.multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP) : num)
                        .qtyOrdered_each(true ? num.multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP) : num)


                        //todo 注意有基础单位的换算 零售保持原来的逻辑 批发不需要乘以步长
//                    .qtyOrdered(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
//                    .qtyOrdered_each(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
                        .lineNo(lineNo.get())
                        .customerId("XYY")
                        //todo 注意这边的价格后期可能要调整
                        .price(param.getSplitPrice())
                        .userDefine1(param.getGoodsInfoType())
                        .userDefine5(param.getSkuNo())
                        .lotatt04(loatt04)
                        .dedi07(param.getPileOrderCode())
                        .dedi04("N")
                        .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                        .build());
            }else {
                BigDecimal priceWithWallet = getPriceWithWallet(param);
                orderDetails.add(WMSPushOrderDetailsRequest.builder()
                        .sku(param.getErpSkuNo())
                        .qtyOrdered(true ? num.multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP) : num)
                        .qtyOrdered_each(true ? num.multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP) : num)


                        //todo 注意有基础单位的换算 零售保持原来的逻辑 批发不需要乘以步长
//                    .qtyOrdered(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
//                    .qtyOrdered_each(trade.getSaleType().equals(SaleType.RETAIL)?BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
//                            BigDecimal.ROUND_HALF_UP):BigDecimal.valueOf(param.getNum()))
                        .lineNo(lineNo.get())
                        .customerId("XYY")
                        //todo 注意这边的价格后期可能要调整
                        .price(priceWithWallet)
                        .userDefine1(param.getGoodsInfoType())
                        .userDefine5(param.getSkuNo())
                        .lotatt04(loatt04)
                        .dedi07(param.getPileOrderCode())
                        .dedi04("N")
                        .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                        .build());
            }

            lineNo.incrementAndGet();
        });
        //赠品组装
        if (Objects.nonNull(trade.getGifts()) && CollectionUtils.isNotEmpty(trade.getGifts())) {
            trade.getGifts().forEach(param -> {
                if (!SaleType.RETAIL.equals(trade.getSaleType())) {
                    String prefix = Constants.ERP_NO_PREFIX.get(trade.getWareId());
                    param.setErpSkuNo(param.getErpSkuNo().replace(prefix, ""));
                }
                //子单的erp 仓库编码
                String loatt04 = ERPWMSConstants.MAIN_WH;
                if ("WH01".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.MAIN_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.MAIN_WH;
                    }
                }
                if ("WH02".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.SUB_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.SUB_WH;
                    }
                }
                if ("WH03".equals(trade.getWareHouseCode())) {
                    if (Objects.nonNull(param.getGoodsInfoType()) && 1 == param.getGoodsInfoType()) {
                        loatt04 = ERPWMSConstants.SHORE_MARKETING_WH;
                    } else {
                        loatt04 = ERPWMSConstants.STORE_WH;
                    }
                }
                BigDecimal addStep = param.getAddStep().setScale(2,
                        BigDecimal.ROUND_HALF_UP);
//            BigDecimal itemPrice = param.getPrice();
                /* BigDecimal spliteItemPrice = itemPrice.divide(addStep,2,BigDecimal.ROUND_HALF_UP);*/
                orderDetails.add(WMSPushOrderDetailsRequest.builder()
                        .sku(param.getErpSkuNo())
                        //todo 注意有基础单位的换算
                        .qtyOrdered(BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP))
                        .qtyOrdered_each(BigDecimal.valueOf(param.getNum()).multiply(addStep).setScale(2,
                                BigDecimal.ROUND_HALF_UP))
                        .lineNo(lineNo.get())
                        .customerId("XYY")
                        //todo 注意这边的价格后期可能要调整
                        .price(param.getSplitPrice())
                        .userDefine1(param.getGoodsInfoType())
                        .userDefine5(param.getSkuNo())
                        .lotatt04(loatt04)
                        .dedi07(param.getPileOrderCode())
                        .dedi08(Objects.nonNull(param.getDevanningId()) ? param.getDevanningId().toString() : null)
                        .dedi04("Y")
                        .build());
                lineNo.incrementAndGet();
            });
        }


        Supplier supplier = trade.getSupplier();
        //组装订单参数
        wmsPushOrderRequest.setWarehouseId(trade.getWareHouseCode());
        //商家在erp开户ID
        wmsPushOrderRequest.setCustomerId(supplier.getErpId() != null ? supplier.getErpId() : "XYY");
        //固定值
        wmsPushOrderRequest.setOrderType(orderCommonService.getWmsDocType(trade));
        //来源
        wmsPushOrderRequest.setSoReferenceA("001");
        //订单号
        wmsPushOrderRequest.setDocNo(trade.getId());
        //固定值
        wmsPushOrderRequest.setAddWho("DS");
        //固定值
        wmsPushOrderRequest.setSoReferenceD(orderCommonService.getWmsSoReference5(trade));
        //订单释放状态 --- 如果先款后货的传N 如果是不限的传Y
        wmsPushOrderRequest.setPriority(PaymentOrder.PAY_FIRST.equals(trade.getPaymentOrder()) ? "N" : "Y");
        //如果是拼团成功的订单也直接存Y
        if (hasGroupedFlag) {
            wmsPushOrderRequest.setPriority("Y");
        }
        //省市
        if (CollectionUtils.isNotEmpty(responseResults)) {
            StringBuffer consigneeProvince = new StringBuffer();
            StringBuffer consigneeArea = new StringBuffer();
            for (RegionCopyVO regionVO : responseResults) {
                if ((regionVO.getCode().equals(trade.getConsignee().getProvinceId())) || (regionVO.getCode().equals(trade.getConsignee().getCityId()))) {
                    //省
                    consigneeProvince.append(regionVO.getName());
                }
                if (regionVO.getCode().equals(trade.getConsignee().getAreaId())) {
                    consigneeArea.append(regionVO.getName());
                }
            }
            wmsPushOrderRequest.setConsigneeProvince(consigneeProvince.toString());
            wmsPushOrderRequest.setConsigneeCity(consigneeArea.toString());
            log.info("ConsigneeCity - consigneeArea : " + consigneeArea.toString() + " twonid:" + trade.getConsignee().getTwonId());
        }
        //订单创建时间
        wmsPushOrderRequest.setOrderTime(DateUtil.format(LocalDateTime.now(), DateUtil.FMT_TIME_1));
        //收货人的erpId
//        wmsPushOrderRequest.setConsigneeId(trade.getBuyer().getCustomerErpId());
        wmsPushOrderRequest.setConsigneeId(trade.getBuyer().getAccount());
        //收货人名称
        wmsPushOrderRequest.setConsigneeName(trade.getConsignee().getName());
        //收货人联系人名称
        wmsPushOrderRequest.setConsigneeTel2(trade.getConsignee().getName());
        //收货人电话
        wmsPushOrderRequest.setConsigneeTel1(trade.getConsignee().getPhone());
        //收货人的地址
        wmsPushOrderRequest.setConsigneeAddress1(trade.getConsignee().getDetailAddress());
        //订单总价-配送费-包装费
        String priceDetail = trade.getTradePrice().getTotalPrice().toString();
        if (Objects.nonNull(trade.getTradePrice().getDeliveryPrice()) && trade.getTradePrice().getDeliveryPrice().compareTo(BigDecimal.ZERO) >= 0) {
            priceDetail = priceDetail.concat("-").concat(trade.getTradePrice().getDeliveryPrice().toString());
        } else {
            priceDetail = priceDetail.concat("-").concat("0");
        }
        if (Objects.nonNull(trade.getTradePrice().getPackingPrice()) && trade.getTradePrice().getPackingPrice().compareTo(BigDecimal.ZERO) >= 0) {
            priceDetail = priceDetail.concat("-").concat(trade.getTradePrice().getPackingPrice().toString());
        } else {
            priceDetail = priceDetail.concat("-").concat("0");
        }
        //合并单算总数
        if (trade.getMergFlag()){
            //如果是合并单需要获取 合并单号 总数=批发总数+散批总数
            //查询快照获取2种订单的数量
            /*List<TradeItemGroup> tradeItemGroups = tradeItemService.findItemByCustomerId(trade.getBuyer().getId());
            List<TradeItem> wholesaleItems = new LinkedList<>();//批发商品
            List<TradeItem> bulkItems = new LinkedList<>();//散批商品
            Long wholesaleItemNum = 0L;
            Long bulkItemNum = 0L;
            tradeItemGroups.forEach(v->{
                if (v.getSaleType().equals(SaleType.WHOLESALE)){
                    wholesaleItems.addAll(v.getTradeItems());
                } else if (v.getSaleType().equals(SaleType.BULK)) {
                    bulkItems.addAll(v.getTradeItems());
                }
            });*/

            List<Trade> parentTrade = tradeRepository.findListByParentId(trade.getParentId());

            List<TradeItem> wholesaleItems = new LinkedList<>();//批发商品
            List<TradeItem> bulkItems = new LinkedList<>();//散批商品
            Long wholesaleItemNum = 0L;
            Long bulkItemNum = 0L;

            for (Trade trade1 : parentTrade) {
                if (SaleType.WHOLESALE.equals(trade1.getSaleType())) {
                    wholesaleItems.addAll(trade1.getTradeItems());
                } else if (SaleType.BULK.equals(trade1.getSaleType())) {
                    bulkItems.addAll(trade1.getTradeItems());
                }
            }

            if (CollectionUtils.isNotEmpty(bulkItems)){
                //算取数量
                bulkItemNum = bulkItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
                //获取
                GatherBoxSetInfoResponse context1 = gatherBoxSetProvider.getGatherBoxSetInfo().getContext();
                if (Objects.isNull(context1)){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "未查询到散批合并整个拆箱规格");
                }
                if (Objects.isNull(context1.getSkuNum()) || context1.getSkuNum()==0){
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, " 散批合并整个拆箱规格异常或者为null");
                }
                Long skuNum = context1.getSkuNum();
                if (bulkItemNum%skuNum>0){
                    bulkItemNum=(bulkItemNum/skuNum)+1;
                }else {
                    bulkItemNum=bulkItemNum/skuNum;
                }
            }
            if (sp){
                if (CollectionUtils.isNotEmpty(wholesaleItems)){
                    wholesaleItemNum = wholesaleItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
                }
            }else if (o){
                wholesaleItemNum = allItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            }
            //赠品加入
            Long reduce = trade.getGifts().stream().map(TradeItem::getNum).reduce(0L, Long::sum);

            long l = wholesaleItemNum + bulkItemNum +reduce;

            log.info("组合单推送wms商品总数量：{} ++ {} ++ {} == {}", wholesaleItemNum, bulkItemNum, reduce, wholesaleItemNum);
            wmsPushOrderRequest.setConsigneeAddress2(String.valueOf(l));

        }else {
            Long reduce = allItems.stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            //赠品加入
            Long zreduce = trade.getGifts().stream().map(TradeItem::getNum).reduce(0L, Long::sum);
            Long l = reduce+zreduce;
            wmsPushOrderRequest.setConsigneeAddress2(l.toString());
        }

        //线上线下
        wmsPushOrderRequest.setUserDefine1(jobNo);
        //付款标识
        wmsPushOrderRequest.setUserDefine2(PayState.PAID.equals(trade.getTradeState().getPayState()) ? "2" : "0");
        //预约发货时间
        wmsPushOrderRequest.setExpectedShipmentTime1(Objects.isNull(trade.getBookingDate()) ? null : trade.getBookingDate().toString() + " 00:00:00");
        //业务员
        wmsPushOrderRequest.setUserDefine6(jobNo);
        //备注
        wmsPushOrderRequest.setNotes(trade.getBuyerRemark());
        //运送方式
        //修正如果配送方式是战点自提需要改成免店配
        if (trade.getDeliverWay().equals(DeliverWay.SITE_PICK_SELF)){
            wmsPushOrderRequest.setCarrierMail(switchWMSPushOrderType(DeliverWay.DELIVERY_HOME));
            //如果是站点自提需要加站点名称
            wmsPushOrderRequest.setUserDefine4(trade.getNetWorkVO().getNetworkName());
        }else {
            wmsPushOrderRequest.setCarrierMail(switchWMSPushOrderType(trade.getDeliverWay()));
        }
        if(WMSCarrierMail.ZTCK.getCode().equals(wmsPushOrderRequest.getCarrierMail())){
            wmsPushOrderRequest.setConsigneeAddress1(getNetWorkAddressByToDoorPick(trade));
        }

        //是否是乡村件
        if (villageFlag && trade.getDeliverWay().equals(DeliverWay.DELIVERY_HOME)) {
            wmsPushOrderRequest.setConsigneeAddress3("1");
        } else {
            wmsPushOrderRequest.setConsigneeAddress3("0");
        }


        //明细
        wmsPushOrderRequest.setDetails(orderDetails);
        if (isLogistics(trade.getDeliverWay()) && Objects.nonNull(trade.getLogisticsCompanyInfo())) {
            if (Objects.nonNull(trade.getLogisticsCompanyInfo().getCompanyNumber())) {
                wmsPushOrderRequest.setCarrierId(trade.getLogisticsCompanyInfo().getCompanyNumber());
            } else {
                String uuid = UUIDUtil.getUUID().substring(29);
                wmsPushOrderRequest.setCarrierId("customer-" + uuid);
            }
            wmsPushOrderRequest.setCarrierName(trade.getLogisticsCompanyInfo().getLogisticsCompanyName());
            wmsPushOrderRequest.setCarrierFax(trade.getLogisticsCompanyInfo().getLogisticsCompanyPhone());
            wmsPushOrderRequest.setUserDefine5(trade.getLogisticsCompanyInfo().getLogisticsAddress());
            wmsPushOrderRequest.setUserDefine4(trade.getLogisticsCompanyInfo().getReceivingPoint());//增加收货站点
        }
        boolean noLimitFlag = AuditState.CHECKED.equals(trade.getTradeState().getAuditState()) && trade.getPaymentOrder() == PaymentOrder.NO_LIMIT;
        //wmsPushOrderRequest.setUserDefine3(noLimitFlag ? "0" : "1");
        wmsPushOrderRequest.setUserDefine3(supplier.getStoreName());
        ResponseWMSReturnResponse response = requestWMSOrderProvider.putSalesOrder(wmsPushOrderRequest).getContext();
        //紧急处理下单需要wms反馈才修改当前电商下单库存以及后续流程
        if (Objects.isNull(response)
                || Objects.isNull(response.getResponseWMSReturnVO())
                || Objects.isNull(response.getResponseWMSReturnVO().getReturnFlag())
                || response.getResponseWMSReturnVO().getReturnFlag() < 1) {
//            throw new SbcRuntimeException(OrderErrorCode.ORDER_PUSH_TIME_OUT);
            log.info("当前推送wms，wms返回异常的订单：{},wms返回",trade.getId(),response != null ? JSONObject.toJSONString(response) : null);
        }
        //扣除乡镇件库存、减去真实库存
        if (trade.getVillageFlag()) {
            this.updateStockAndTownStock(trade);
        }

    }

    public void updateStockAndTownStock(Trade trade) {
        log.info("com.wanmi.sbc.returnorder.trade.service.TradeService.updateStockAndTownStock乡镇件减库存tid=" + trade.getId());
//        verifyService.subSkuVillagesStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
//        verifyService.subSkuVillagesStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId());
        verifyService.subSkuListStock(trade.getTradeItems(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(),trade);
        verifyService.subSkuListStock(trade.getGifts(), trade.getDeliverWay().equals(DeliverWay.PICK_SELF) ? trade.getTradeWareHouse().getWareId() : trade.getWareId(), trade.getSaleType(),trade);
        historyTownShipOrderService.reduceTownStock(trade.getId());
    }


    /**
     * 根据推送状态获取订单
     *
     * @return List<Trade>
     */
    public List<TradeVO> queryConfrimFailedTrades() {
        List<Trade> list = tradeRepository.findListByWMSPushFlag(false);
        return KsBeanUtil.convert(list, TradeVO.class);
    }

    public void sendPickUpMessage(Trade trade) {
        MessageMQRequest messageMQRequest = new MessageMQRequest();
        Map<String, Object> map = new HashMap<>();
        map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
        map.put("id", trade.getId());
        messageMQRequest.setNodeCode(OrderProcessType.CUSTOMER_PICK_UP_PAY_SUCCESS.getType());
        map.put("node", OrderProcessType.CUSTOMER_PICK_UP_PAY_SUCCESS.toValue());
        List<String> param = new ArrayList<>(2);
        param.add(trade.getId());
        param.add(trade.getTradeWareHouse().getPickUpCode());
        messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
        messageMQRequest.setParams(param);
        messageMQRequest.setPic(trade.getTradeItems().get(0).getPic());
        messageMQRequest.setRouteParam(map);
        messageMQRequest.setCustomerId(trade.getBuyer().getId());
        messageMQRequest.setMobile(trade.getConsignee().getPhone());
        orderProducerService.sendMessage(messageMQRequest);
    }

    public void sendPickUpSuccessMessage(Trade trade) {
        MessageMQRequest messageMQRequest = new MessageMQRequest();
        Map<String, Object> map = new HashMap<>();
        map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
        map.put("id", trade.getId());
        messageMQRequest.setNodeCode(OrderProcessType.CUSTOMER_PICK_UP_RECEIVE.getType());
        map.put("node", OrderProcessType.CUSTOMER_PICK_UP_RECEIVE.toValue());
        messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
        messageMQRequest.setParams(Collections.singletonList(trade.getId()));
        messageMQRequest.setPic(trade.getTradeItems().get(0).getPic());
        messageMQRequest.setRouteParam(map);
        messageMQRequest.setCustomerId(trade.getBuyer().getId());
        messageMQRequest.setMobile(trade.getConsignee().getPhone());
        orderProducerService.sendMessage(messageMQRequest);
    }


    @Transactional
    public void updateTradeLogisticsCompany(String tid, String areaInfo, Long companyId, Operator operator) {
        LogisticsCompanyByIdResponse context = null;
        if (Objects.nonNull(companyId)) {
            context = logisticsCompanyQueryProvider.getById(LogisticsCompanyByIdRequest.builder().id(companyId).build()).getContext();
            if (Objects.isNull(context) || Objects.isNull(context.getLogisticsCompanyVO())) {
                throw new SbcRuntimeException("K-170001");
            }
        }

        Trade trade = detail(tid);
        if (Objects.isNull(trade)) {
            throw new SbcRuntimeException("K-050100", new Object[]{tid});
        }
        if (Objects.isNull(trade.getTradeState())
                || !AuditState.NON_CHECKED.equals(trade.getTradeState().getAuditState())) {
            throw new SbcRuntimeException("K-180001");
        }
        if (Objects.isNull(companyId)) {
            if (StringUtils.isNotBlank(areaInfo)) {
                LogisticsInfo tradeCompany = new LogisticsInfo();
                tradeCompany.setReceivingPoint(areaInfo);
                trade.setLogisticsCompanyInfo(tradeCompany);
            }
        } else {
            LogisticsCompanyVO logisticsCompanyVO = context.getLogisticsCompanyVO();
            if (Objects.nonNull(trade.getLogisticsCompanyInfo())) {
                LogisticsInfo tradeCompany = trade.getLogisticsCompanyInfo();
                tradeCompany.setId(logisticsCompanyVO.getId().toString());
                tradeCompany.setCompanyNumber(logisticsCompanyVO.getCompanyNumber());
                tradeCompany.setLogisticsAddress(logisticsCompanyVO.getLogisticsAddress());
                tradeCompany.setLogisticsCompanyName(logisticsCompanyVO.getLogisticsName());
                tradeCompany.setLogisticsCompanyPhone(logisticsCompanyVO.getLogisticsPhone());
                if (StringUtils.isNotBlank(areaInfo)) {
                    tradeCompany.setReceivingPoint(areaInfo);
                }
            } else {
                LogisticsInfo tradeCompany = new LogisticsInfo();
                tradeCompany.setId(logisticsCompanyVO.getId().toString());
                tradeCompany.setCompanyNumber(logisticsCompanyVO.getCompanyNumber());
                tradeCompany.setLogisticsAddress(logisticsCompanyVO.getLogisticsAddress());
                tradeCompany.setLogisticsCompanyName(logisticsCompanyVO.getLogisticsName());
                tradeCompany.setLogisticsCompanyPhone(logisticsCompanyVO.getLogisticsPhone());
                if (StringUtils.isNotBlank(areaInfo)) {
                    tradeCompany.setReceivingPoint(areaInfo);
                }
                trade.setLogisticsCompanyInfo(tradeCompany);
            }
        }

        trade.appendTradeEventLog(new TradeEventLog(operator, "修改物流公司", "修改物流公司信息", LocalDateTime.now()));
        tradeService.updateTrade(trade);
        this.operationLogMq.convertAndSend(operator, "修改物流公司", "修改物流公司信息");
    }

    /**
     * 根据物流公司id查询订单存在哪些符合条件的物流公司
     *
     * @param id
     * @return
     */
    public BaseResponse<TradeListAllResponse> findListByByLogisticsCompanyId(Long id) {
        Query query = new Query();
        query.addCriteria(Criteria.where("logisticsCompanyInfo.id").is(String.valueOf(id)));
        query.addCriteria(Criteria.where("tradeState.flowState").nin(FlowState.VOID.getStateId(),
                FlowState.COMPLETED.getStateId()));

        List<Trade> trades = mongoTemplate.find(query, Trade.class);

        return BaseResponse.success(TradeListAllResponse.builder().tradeVOList(KsBeanUtil.convertList(trades,
                TradeVO.class)).build());
    }

    /**
     * 根据会员id查询返回最新下单对应的一个公司
     *
     * @return
     */
    public BaseResponse<HistoryLogisticsCompanyByCustomerIdResponse> getByCustomerId(TradeByCustomerIdRequest tradeByCustomerIdRequest) {
        if(tradeByCustomerIdRequest.getLogisticsType()!=null){
            return BaseResponse.success(HistoryLogisticsCompanyByCustomerIdResponse.builder().
                    historyLogisticsCompanyVO(KsBeanUtil.convert(historyLogisticsCompanyService.findByCustomerId(tradeByCustomerIdRequest.getCustomerId(),tradeByCustomerIdRequest.getLogisticsType()), HistoryLogisticsCompanyVO.class)).build());
        }
        else {
            return BaseResponse.success(HistoryLogisticsCompanyByCustomerIdResponse.builder().
                    historyLogisticsCompanyVO(KsBeanUtil.convert(historyLogisticsCompanyService.findByCustomerId(tradeByCustomerIdRequest.getCustomerId()), HistoryLogisticsCompanyVO.class)).build());
        }
    }

    public HistoryLogisticsCompanyVO getByCustomerIdAndMarketId(TradeByCustomerIdRequest tradeByCustomerIdRequest) {
            return KsBeanUtil.convert(historyLogisticsCompanyService.findByByCustomerIdAndMarketId(tradeByCustomerIdRequest.getCustomerId(),tradeByCustomerIdRequest.getLogisticsType(),tradeByCustomerIdRequest.getMarketId()), HistoryLogisticsCompanyVO.class);
    }

    /**
     * 功能描述: 验证物流公司信息
     * 〈〉
     *
     * @Param: [storeCommitInfoDTOList]
     * @Return: void
     * @Author: yxb
     * @Date: 2020/11/9 14:36
     */
    private void checkLogsitcCompanyInfo(List<StoreCommitInfoDTO> storeCommitInfoDTOList) {
        Set<Long> ids = new HashSet<>();
        for (StoreCommitInfoDTO storeCommitInfoDTO : storeCommitInfoDTOList) {
            LogisticsInfoDTO logisticsInfo = storeCommitInfoDTO.getLogisticsInfo();
            if (isLogistics(storeCommitInfoDTO.getDeliverWay())) {
                if (Objects.nonNull(logisticsInfo) && StringUtils.isNotBlank(logisticsInfo.getId())) {
                    ids.add(Long.valueOf(logisticsInfo.getId()));
                }
            }
        }
        if (CollectionUtils.isEmpty(ids)) {
            return;
        }
        LogisticsCompanyListResponse context = logisticsCompanyQueryProvider
                .list(LogisticsCompanyListRequest.builder().idList(new ArrayList<>(ids)).build()).getContext();
        if (Objects.isNull(context)) {
            throw new SbcRuntimeException("K-170001");
        }
        for (StoreCommitInfoDTO storeCommitInfoDTO : storeCommitInfoDTOList) {
            LogisticsInfoDTO logisticsInfo = storeCommitInfoDTO.getLogisticsInfo();
            if (isLogistics(storeCommitInfoDTO.getDeliverWay())) {
                Optional<LogisticsCompanyVO> first = context.getLogisticsCompanyVOList().stream().
                        filter(info -> String.valueOf(info.getId()).equals(logisticsInfo.getId())).findFirst();
                first.ifPresent(companyInfo -> {
                    logisticsInfo.setCompanyNumber(companyInfo.getCompanyNumber());
                    logisticsInfo.setLogisticsAddress(companyInfo.getLogisticsAddress());
                    logisticsInfo.setLogisticsCompanyName(companyInfo.getLogisticsName());
                    logisticsInfo.setLogisticsCompanyPhone(companyInfo.getLogisticsPhone());
                });
            }
        }
    }

    public String switchWMSPushOrderType(DeliverWay deliverWay) {
        if (DeliverWay.PICK_SELF.equals(deliverWay)||DeliverWay.TO_DOOR_PICK.equals(deliverWay)) {
            return WMSCarrierMail.ZTCK.getCode();//"ZTCK";
        } else if (isExpress(deliverWay)) {
            return WMSCarrierMail.KDCK.getCode();//"KDCK";
        } else if (DeliverWay.DELIVERY_HOME.equals(deliverWay)) {
            return WMSCarrierMail.PSCK.getCode();//"PSCK";
        }else if (DeliverWay.DELIVERY_TO_STORE.equals(deliverWay)) {
            return WMSCarrierMail.PSDD.getCode();//"PSDD";
        } else {
            return WMSCarrierMail.WLCK.getCode();//"WLCK";
        }
    }

    /**
     * 检验wms 取消是否符合要求
     */

    public BaseResponse checkWms(Trade trade) {
        //推送给wms取消退单
        if (wmsAPIFlag) {
            //拼团订单取消拼团时不需要推送
            if (!(Objects.nonNull(trade.getGrouponFlag()) && trade.getGrouponFlag())) {
                if (!pushCancelOrder(trade)) {
                    throw new SbcRuntimeException(OrderErrorCode.CANCEL_ORDER_FAILD_IN_WMS, "订单取消失败，仓库已拣货！");
                }
            }
        }
        return BaseResponse.SUCCESSFUL();
    }

    /**
     * @return void
     * @Author lvzhenwei
     * @Description 支付回调处理，将原有逻辑迁移到order处理
     * @Date 14:56 2020/7/2
     * @Param [tradePayOnlineCallBackRequest]
     **/
    @Transactional
    @LcnTransaction
    public void wxPayOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws Exception {
        String orderNo = "";
        // String payOrderNo = "";
        try {
            PayGatewayConfigResponse payGatewayConfig = payQueryProvider.getGatewayConfigByGateway(new
                    GatewayConfigByGatewayRequest(PayGatewayEnum.WECHAT, Constants.BOSS_DEFAULT_STORE_ID)).getContext();
            String apiKey = payGatewayConfig.getApiKey();
            XStream xStream = new XStream(new XppDriver(new XmlFriendlyNameCoder("_-", "_")));
            xStream.alias("xml", WxPayResultResponse.class);
            WxPayResultResponse wxPayResultResponse =
                    (WxPayResultResponse) xStream.fromXML(tradePayOnlineCallBackRequest.getWxPayCallBackResultStr());
            log.info("-------------微信支付回调,wxPayResultResponse：{}------------", wxPayResultResponse);
            //判断当前回调是否是合并支付
            // payOrderNo = wxPayResultResponse.getOut_trade_no();
            // orderNo = getOrderNoByPayOrderNo(payOrderNo);
            orderNo = tradePayOnlineCallBackRequest.getBusinessId();
            boolean isMergePay = isMergePayOrder(orderNo);
            String lockName;
            //非组合支付，则查出该单笔订单。
            if (!isMergePay) {
                Trade trade = new Trade();
                if (isTailPayOrder(orderNo)) {
                    trade = tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(orderNo).build()).get(0);
                } else {
                    trade = tradeService.detail(orderNo);
                }
                // 锁资源：无论是否组合支付，都锁父单号，确保串行回调
                lockName = trade.getParentId();
            } else {
                lockName = orderNo;
            }
            //redis锁，防止同一订单重复回调
            RLock rLock = redissonClient.getFairLock(lockName);
            rLock.lock();
            //执行回调
            try {
                //支付回调事件成功
                if (wxPayResultResponse.getReturn_code().equals(WXPayConstants.SUCCESS) &&
                        wxPayResultResponse.getResult_code().equals(WXPayConstants.SUCCESS)) {
                    log.info("微信支付异步通知回调状态---成功");
                    //微信回调参数数据map
                    Map<String, String> params =
                            WXPayUtil.xmlToMap(tradePayOnlineCallBackRequest.getWxPayCallBackResultXmlStr());
                    String trade_type = wxPayResultResponse.getTrade_type();
                    //app支付回调对应的api key为开放平台对应的api key
                    if (trade_type.equals("APP")) {
                        apiKey = payGatewayConfig.getOpenPlatformApiKey();
                    }
                    //微信签名校验
                    if (WXPayUtil.isSignatureValid(params, apiKey)) {
                        //签名正确，进行逻辑处理--对订单支付单以及操作信息进行处理并添加交易数据
                        List<Trade> trades = new ArrayList<>();
                        //查询交易记录
                        TradeRecordByOrderCodeRequest tradeRecordByOrderCodeRequest =
                                new TradeRecordByOrderCodeRequest(orderNo);
                        PayTradeRecordResponse recordResponse =
                                payQueryProvider.getTradeRecordByOrderCode(tradeRecordByOrderCodeRequest).getContext();
                        PayCallBackResult payCallBackResult =
                                payCallBackResultService.list(PayCallBackResultQueryRequest.builder().businessId(orderNo).build()).get(0);
                        if (isMergePay) {
                            /*
                             * 合并支付
                             * 查询订单是否已支付或过期作废
                             */
                            trades = tradeService.detailsByParentId(orderNo);
                            //订单合并支付场景状态采样
                            boolean paid =
                                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
                            boolean cancel =
                                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);
                            if (cancel || (paid && !recordResponse.getTradeNo().equals(wxPayResultResponse.getTransaction_id()))) {
                                //同一批订单重复支付或过期作废，直接退款
                                wxRefundHandle(wxPayResultResponse, wxPayResultResponse.getOut_trade_no(), -1L);
                            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                                for (Trade trade : trades) {
                                    trade.setPayOrderNo(recordResponse.getPayOrderNo());
                                }
                                wxPayCallbackHandle(payGatewayConfig, wxPayResultResponse, orderNo, trades, true);
                            }
                        } else {
                            //单笔支付
                            Trade trade = new Trade();
                            if (isTailPayOrder(orderNo)) {
                                trade =
                                        tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(orderNo).build()).get(0);
                            } else {
                                trade = tradeService.detail(orderNo);
                            }
                            if (trade.getTradeState().getFlowState() == FlowState.VOID || (trade.getTradeState()
                                    .getPayState() == PayState.PAID
                                    && !recordResponse.getTradeNo().equals(wxPayResultResponse.getTransaction_id()))) {
                                //同一批订单重复支付或过期作废，直接退款
                                wxRefundHandle(wxPayResultResponse, wxPayResultResponse.getOut_trade_no(), -1L);
                            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                                trade.setPayOrderNo(recordResponse.getPayOrderNo());
                                trades.add(trade);
                                wxPayCallbackHandle(payGatewayConfig, wxPayResultResponse, orderNo, trades, false);
                            }
                        }
                        //支付回调处理成功
                        payCallBackResultService.updateStatus(orderNo, PayCallBackResultStatus.SUCCESS);
                    } else {
                        log.info("微信支付异步回调验证签名结果[失败].");
                        //支付处理结果回写回执支付结果表
                        payCallBackResultService.updateStatus(orderNo, PayCallBackResultStatus.FAILED);
                    }
                } else {
                    log.info("微信支付异步通知回调状态---失败");
                    //支付处理结果回写回执支付结果表
                    payCallBackResultService.updateStatus(orderNo, PayCallBackResultStatus.FAILED);
                }
                log.info("微信支付异步通知回调end---------");
            } catch (Exception e) {
                log.error(e.getMessage());
                //支付处理结果回写回执支付结果表
                payCallBackResultService.updateStatus(orderNo, PayCallBackResultStatus.FAILED);
            } finally {
                //解锁
                rLock.unlock();
            }
        } catch (Exception ex) {
            if (StringUtils.isNotBlank(orderNo)) {
                payCallBackResultService.updateStatus(orderNo, PayCallBackResultStatus.FAILED);
            }
            log.error(ex.getMessage());
        }
    }


    /**
     * 钱包充值WX回调
     *
     * @param tradePayOnlineCallBackRequest
     * @throws Exception
     */
    @LcnTransaction
    @Transactional
    public void wxPayRechargeOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws Exception {
        String businessId = "";
        try {
            PayGatewayConfigResponse payGatewayConfig = payQueryProvider.getGatewayConfigByGateway(new
                    GatewayConfigByGatewayRequest(PayGatewayEnum.WECHAT, Constants.BOSS_DEFAULT_STORE_ID)).getContext();
            String apiKey = payGatewayConfig.getApiKey();
            XStream xStream = new XStream(new XppDriver(new XmlFriendlyNameCoder("_-", "_")));
            xStream.alias("xml", WxPayResultResponse.class);
            WxPayResultResponse wxPayResultResponse =
                    (WxPayResultResponse) xStream.fromXML(tradePayOnlineCallBackRequest.getWxPayCallBackResultStr());
            log.info("-------------微信充值支付回调,wxPayRechargeOnlineCallBack：{}------------", wxPayResultResponse);
            //判断当前回调是否是合并支付
            businessId = wxPayResultResponse.getOut_trade_no();
            String lockName;
            //非组合支付，则查出该单笔订单。
            BaseResponse<WalletRecordResponse> response = walletRecordProvider.queryWalletRecord(new QueryWalletRecordRequest().builder().recordNo(businessId).build());
            //这笔订单信息
            List<WalletRecordVO> walletRecordVOs = response.getContext().getWalletRecordVOs();
            Integer tradeState = walletRecordVOs.get(0).getTradeState().toValue();
            lockName = walletRecordVOs.get(0).getRecordNo();
            //redis锁，防止同一订单重复回调
            RLock rLock = redissonClient.getFairLock(lockName);
            rLock.lock();
            //执行回调
            try {
                //已支付
                if (tradeState.equals(1)) {
                    log.info("=======================订单号:{} 已是支付状态,无需进行其他操作=======================", lockName);
                    return;
                }
                //支付回调事件成功
                if (wxPayResultResponse.getReturn_code().equals(WXPayConstants.SUCCESS) &&
                        wxPayResultResponse.getResult_code().equals(WXPayConstants.SUCCESS)) {
                    log.info("微信支付充值异步通知回调状态---成功");
                    //微信回调参数数据map
                    Map<String, String> params =
                            WXPayUtil.xmlToMap(tradePayOnlineCallBackRequest.getWxPayCallBackResultXmlStr());
                    String trade_type = wxPayResultResponse.getTrade_type();
                    //app支付回调对应的api key为开放平台对应的api key
                    if (trade_type.equals("APP")) {
                        apiKey = payGatewayConfig.getOpenPlatformApiKey();
                    }
                    //微信签名校验
                    if (WXPayUtil.isSignatureValid(params, apiKey)) {
                        //签名正确，进行逻辑处理--对订单支付单以及操作信息进行处理并添加交易数据
                        wxPayRechargeCallbackHandle(payGatewayConfig, wxPayResultResponse, businessId, walletRecordVOs.get(0), false);
                        //支付回调处理成功
                        payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.SUCCESS);
                    } else {
                        log.info("微信支付异步回调验证签名结果[失败].");
                        //支付处理结果回写回执支付结果表
                        payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
                    }
                } else {
                    log.info("微信支付异步通知回调状态---失败");
                    //支付处理结果回写回执支付结果表
                    payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
                }
                log.info("微信支付异步通知回调end---------");
            } catch (Exception e) {
                log.error(e.getMessage());
                //支付处理结果回写回执支付结果表
                payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
            } finally {
                //解锁
                rLock.unlock();
            }
        } catch (Exception ex) {
            if (StringUtils.isNotBlank(businessId)) {
                payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
            }
            log.error(ex.getMessage());
        }
    }


    /**
     * 囤货的提货
     *
     * @param tradePayOnlineCallBackRequest
     * @throws Exception
     */
    @LcnTransaction
    @Transactional
    public void wxPayTakeGoodOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws Exception {
        String businessId = "";
        try {
            PayGatewayConfigResponse payGatewayConfig = payQueryProvider.getGatewayConfigByGateway(new
                    GatewayConfigByGatewayRequest(PayGatewayEnum.WECHAT, Constants.BOSS_DEFAULT_STORE_ID)).getContext();
            String apiKey = payGatewayConfig.getApiKey();
            XStream xStream = new XStream(new XppDriver(new XmlFriendlyNameCoder("_-", "_")));
            xStream.alias("xml", WxPayResultResponse.class);
            WxPayResultResponse wxPayResultResponse =
                    (WxPayResultResponse) xStream.fromXML(tradePayOnlineCallBackRequest.getWxPayCallBackResultStr());
            log.info("-------------微信提货支付回调,wxPayTakeGoodResultResponse：{}------------", wxPayResultResponse);
            //判断当前回调是否是合并支付
            businessId = wxPayResultResponse.getOut_trade_no();
            boolean isMergePay = isMergePayOrder(businessId);
            String lockName;
            //非组合支付，则查出该单笔订单。
            if (!isMergePay) {
                Trade trade = new Trade();
                if (isTailPayOrder(businessId)) {
                    trade = tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(businessId).build()).get(0);
                } else {
                    trade = tradeService.detail(businessId);
                }
                // 锁资源：无论是否组合支付，都锁父单号，确保串行回调
                lockName = trade.getParentId();
            } else {
                lockName = businessId;
            }
            //redis锁，防止同一订单重复回调
            RLock rLock = redissonClient.getFairLock(lockName);
            rLock.lock();
            //执行回调
            try {
                //支付回调事件成功
                if (wxPayResultResponse.getReturn_code().equals(WXPayConstants.SUCCESS) &&
                        wxPayResultResponse.getResult_code().equals(WXPayConstants.SUCCESS)) {
                    log.info("微信提货支付异步通知回调状态---成功");
                    //微信回调参数数据map
                    Map<String, String> params =
                            WXPayUtil.xmlToMap(tradePayOnlineCallBackRequest.getWxPayCallBackResultXmlStr());
                    String trade_type = wxPayResultResponse.getTrade_type();
                    //app支付回调对应的api key为开放平台对应的api key
                    if (trade_type.equals("APP")) {
                        apiKey = payGatewayConfig.getOpenPlatformApiKey();
                    }
                    //微信签名校验
                    if (WXPayUtil.isSignatureValid(params, apiKey)) {
                        //签名正确，进行逻辑处理--对订单支付单以及操作信息进行处理并添加交易数据
                        List<Trade> trades = new ArrayList<>();
                        //查询交易记录
                        TradeRecordByOrderCodeRequest tradeRecordByOrderCodeRequest =
                                new TradeRecordByOrderCodeRequest(businessId);
                        PayTradeRecordResponse recordResponse =
                                payQueryProvider.getTradeRecordByOrderCode(tradeRecordByOrderCodeRequest).getContext();
                        PayCallBackResult payCallBackResult =
                                payCallBackResultService.list(PayCallBackResultQueryRequest.builder().businessId(businessId).build()).get(0);
                        if (isMergePay) {
                            /*
                             * 合并支付
                             * 查询订单是否已支付或过期作废
                             */
                            trades = tradeService.detailsByParentId(businessId);
                            //订单合并支付场景状态采样
                            boolean paid =
                                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
                            boolean cancel =
                                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);
                            if (cancel || (paid && !recordResponse.getTradeNo().equals(wxPayResultResponse.getTransaction_id()))) {
                                //同一批订单重复支付或过期作废，直接退款
                                wxRefundHandle(wxPayResultResponse, businessId, -1L);
                            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                                wxPayTakeGoodCallbackHandle(payGatewayConfig, wxPayResultResponse, businessId, trades, true);
                            }
                        } else {
                            //单笔支付
                            Trade trade = new Trade();
                            if (isTailPayOrder(businessId)) {
                                trade =
                                        tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(businessId).build()).get(0);
                            } else {
                                trade = tradeService.detail(businessId);
                            }
                            if (trade.getTradeState().getFlowState() == FlowState.VOID || (trade.getTradeState()
                                    .getPayState() == PayState.PAID
                                    && !recordResponse.getTradeNo().equals(wxPayResultResponse.getTransaction_id()))) {
                                //同一批订单重复支付或过期作废，直接退款
                                wxRefundHandle(wxPayResultResponse, businessId, -1L);
                            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                                trades.add(trade);
                                wxPayTakeGoodCallbackHandle(payGatewayConfig, wxPayResultResponse, businessId, trades, false);
                            }
                        }
                        //支付回调处理成功
                        payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.SUCCESS);
                    } else {
                        log.info("微信支付异步回调验证签名结果[失败].");
                        //支付处理结果回写回执支付结果表
                        payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
                    }
                } else {
                    log.info("微信支付异步通知回调状态---失败");
                    //支付处理结果回写回执支付结果表
                    payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
                }
                log.info("微信支付异步通知回调end---------");
            } catch (Exception e) {
                log.error(e.getMessage());
                //支付处理结果回写回执支付结果表
                payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
            } finally {
                //解锁
                rLock.unlock();
            }
        } catch (Exception ex) {
            if (StringUtils.isNotBlank(businessId)) {
                payCallBackResultService.updateStatus(businessId, PayCallBackResultStatus.FAILED);
            }
            log.error(ex.getMessage());
        }
    }


    /**
     * 是否是尾款订单号
     *
     * @param businessId
     * @return
     */
    private boolean isTailPayOrder(String businessId) {
        return businessId.startsWith(GeneratorService._PREFIX_TRADE_TAIL_ID);
    }

    /**
     * @return boolean
     * @Author lvzhenwei
     * @Description 判断是否为主订单
     * @Date 15:36 2020/7/2
     * @Param [businessId]
     **/
    private boolean isMergePayOrder(String businessId) {
        log.info("============================= isMergePayOrder.businessId:{}============================", businessId);
        //增加多商家囤货主订单逻辑校验
        return businessId.contains(GeneratorService._PREFIX_PARENT_TRADE_ID) || businessId.contains(GeneratorService._NEW_PILE_PARENT_PREFIX_TRADE_ID);
    }

    /**
     * @return void
     * @Author lvzhenwei
     * @Description 微信支付退款处理
     * @Date 15:29 2020/7/2
     * @Param [wxPayResultResponse, businessId, storeId]
     **/
    private void wxRefundHandle(WxPayResultResponse wxPayResultResponse, String businessId, Long storeId) {
        WxPayRefundInfoRequest refundInfoRequest = new WxPayRefundInfoRequest();

        refundInfoRequest.setStoreId(storeId);
        refundInfoRequest.setOut_refund_no(businessId);
        refundInfoRequest.setOut_trade_no(businessId);
        refundInfoRequest.setTotal_fee(wxPayResultResponse.getTotal_fee());
        refundInfoRequest.setRefund_fee(wxPayResultResponse.getTotal_fee());
        String tradeType = wxPayResultResponse.getTrade_type();
        if (!tradeType.equals("APP")) {
            tradeType = "PC/H5/JSAPI";
        }
        refundInfoRequest.setPay_type(tradeType);
        //重复支付进行退款处理标志
        refundInfoRequest.setRefund_type("REPEATPAY");
        BaseResponse<WxPayRefundResponse> wxPayRefund =
                wxPayProvider.wxPayRefund(refundInfoRequest);
        WxPayRefundResponse wxPayRefundResponse = wxPayRefund.getContext();
    }

    private void wxPayCallbackHandle(PayGatewayConfigResponse payGatewayConfig, WxPayResultResponse wxPayResultResponse,
                                     String businessId, List<Trade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //微信支付订单号--及流水号
        payTradeRecordRequest.setTradeNo(wxPayResultResponse.getTransaction_id());
        //商户订单号或父单号
        payTradeRecordRequest.setBusinessId(businessId);
        payTradeRecordRequest.setResult_code(wxPayResultResponse.getResult_code());
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(wxPayResultResponse.getTotal_fee()).
                divide(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_DOWN));
        ChannelItemByGatewayRequest channelItemByGatewayRequest = new ChannelItemByGatewayRequest();
        channelItemByGatewayRequest.setGatewayName(payGatewayConfig.getPayGateway().getName());
        PayChannelItemListResponse payChannelItemListResponse =
                payQueryProvider.listChannelItemByGatewayName(channelItemByGatewayRequest).getContext();
        List<PayChannelItemVO> payChannelItemVOList =
                payChannelItemListResponse.getPayChannelItemVOList();
        String tradeType = wxPayResultResponse.getTrade_type();
        ChannelItemSaveRequest channelItemSaveRequest = new ChannelItemSaveRequest();
        String code = "wx_qr_code";
        if (tradeType.equals("APP")) {
            code = "wx_app";
        } else if (tradeType.equals("JSAPI")) {
            code = "js_api";
        } else if (tradeType.equals("MWEB")) {
            code = "wx_mweb";
        }
        channelItemSaveRequest.setCode(code);
        payChannelItemVOList.forEach(payChannelItemVO -> {
            if (channelItemSaveRequest.getCode().equals(payChannelItemVO.getCode())) {
                //更新支付项
                payTradeRecordRequest.setChannelItemId(payChannelItemVO.getId());
            }
        });
        //微信支付异步回调添加交易数据
        payProvider.wxPayCallBack(payTradeRecordRequest);
        //订单 支付单 操作信息
        Operator operator = Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(PayGatewayEnum.WECHAT.name())
                .account(PayGatewayEnum.WECHAT.name()).platform(Platform.THIRD).build();

        log.info("payTrades============= {}", trades);

        payCallbackOnline(trades, operator, isMergePay);
    }

    /**
     * 囤货的提货
     *
     * @param payGatewayConfig
     * @param wxPayResultResponse
     * @param businessId
     * @param trades
     * @param isMergePay
     */
    private void wxPayTakeGoodCallbackHandle(PayGatewayConfigResponse payGatewayConfig, WxPayResultResponse wxPayResultResponse,
                                             String businessId, List<Trade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //微信支付订单号--及流水号
        payTradeRecordRequest.setTradeNo(wxPayResultResponse.getTransaction_id());
        //商户订单号或父单号
        payTradeRecordRequest.setBusinessId(businessId);
        payTradeRecordRequest.setResult_code(wxPayResultResponse.getResult_code());
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(wxPayResultResponse.getTotal_fee()).
                divide(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_DOWN));
        ChannelItemByGatewayRequest channelItemByGatewayRequest = new ChannelItemByGatewayRequest();
        channelItemByGatewayRequest.setGatewayName(payGatewayConfig.getPayGateway().getName());
        PayChannelItemListResponse payChannelItemListResponse =
                payQueryProvider.listChannelItemByGatewayName(channelItemByGatewayRequest).getContext();
        List<PayChannelItemVO> payChannelItemVOList =
                payChannelItemListResponse.getPayChannelItemVOList();
        String tradeType = wxPayResultResponse.getTrade_type();
        ChannelItemSaveRequest channelItemSaveRequest = new ChannelItemSaveRequest();
        String code = "wx_qr_code";
        if (tradeType.equals("APP")) {
            code = "wx_app";
        } else if (tradeType.equals("JSAPI")) {
            code = "js_api";
        } else if (tradeType.equals("MWEB")) {
            code = "wx_mweb";
        }
        channelItemSaveRequest.setCode(code);
        payChannelItemVOList.forEach(payChannelItemVO -> {
            if (channelItemSaveRequest.getCode().equals(payChannelItemVO.getCode())) {
                //更新支付项
                payTradeRecordRequest.setChannelItemId(payChannelItemVO.getId());
            }
        });
        //微信支付异步回调添加交易数据
        payProvider.wxPayCallBack(payTradeRecordRequest);
        //订单 支付单 操作信息
        Operator operator = Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(PayGatewayEnum.WECHAT.name())
                .account(PayGatewayEnum.WECHAT.name()).platform(Platform.THIRD).build();

        log.info("payTrades============= {}", trades);

        payTakeGoodCallbackOnline(trades, operator, isMergePay);
    }


    private void wxPayRechargeCallbackHandle(PayGatewayConfigResponse payGatewayConfig, WxPayResultResponse wxPayResultResponse,
                                             String businessId, WalletRecordVO vo, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //微信支付订单号--及流水号
        payTradeRecordRequest.setTradeNo(wxPayResultResponse.getTransaction_id());
        //商户订单号或父单号
        payTradeRecordRequest.setBusinessId(businessId);
        payTradeRecordRequest.setResult_code(wxPayResultResponse.getResult_code());
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(wxPayResultResponse.getTotal_fee()).
                divide(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_DOWN));
        ChannelItemByGatewayRequest channelItemByGatewayRequest = new ChannelItemByGatewayRequest();
        channelItemByGatewayRequest.setGatewayName(payGatewayConfig.getPayGateway().getName());
        PayChannelItemListResponse payChannelItemListResponse =
                payQueryProvider.listChannelItemByGatewayName(channelItemByGatewayRequest).getContext();
        List<PayChannelItemVO> payChannelItemVOList =
                payChannelItemListResponse.getPayChannelItemVOList();
        String tradeType = wxPayResultResponse.getTrade_type();
        ChannelItemSaveRequest channelItemSaveRequest = new ChannelItemSaveRequest();
        String code = "wx_qr_code";
        if (tradeType.equals("APP")) {
            code = "wx_app";
        } else if (tradeType.equals("JSAPI")) {
            code = "js_api";
        } else if (tradeType.equals("MWEB")) {
            code = "wx_mweb";
        }
        channelItemSaveRequest.setCode(code);
        payChannelItemVOList.forEach(payChannelItemVO -> {
            if (channelItemSaveRequest.getCode().equals(payChannelItemVO.getCode())) {
                //更新支付项
                payTradeRecordRequest.setChannelItemId(payChannelItemVO.getId());
            }
        });
        //微信支付异步回调添加交易数据
        payProvider.wxPayCallBack(payTradeRecordRequest);
        //订单 支付单 操作信息
        Operator operator = Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(PayGatewayEnum.WECHAT.name())
                .account(PayGatewayEnum.WECHAT.name()).platform(Platform.THIRD).build();
        payRechargeCallbackOnline(vo, wxPayResultResponse);
    }

    /**
     * @return void
     * @Author lvzhenwei
     * @Description 支付回调处理，将原有逻辑迁移到order处理
     * @Date 14:56 2020/7/2
     * @Param [tradePayOnlineCallBackRequest]
     **/
    @Transactional
    @LcnTransaction
    public void aliPayOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws IOException {
        log.info("===============支付宝回调开始==============");
        GatewayConfigByGatewayRequest gatewayConfigByGatewayRequest = new GatewayConfigByGatewayRequest();
        gatewayConfigByGatewayRequest.setGatewayEnum(PayGatewayEnum.ALIPAY);
        gatewayConfigByGatewayRequest.setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
        //查询支付宝配置信息
        PayGatewayConfigResponse payGatewayConfigResponse =
                payQueryProvider.getGatewayConfigByGateway(gatewayConfigByGatewayRequest).getContext();
        //支付宝公钥
        String aliPayPublicKey = payGatewayConfigResponse.getPublicKey();
        boolean signVerified = false;
        Map<String, String> params =
                JSONObject.parseObject(tradePayOnlineCallBackRequest.getAliPayCallBackResultStr(), Map.class);
        try {
            signVerified = AlipaySignature.rsaCheckV1(params, aliPayPublicKey, "UTF-8", "RSA2"); //调用SDK验证签名
        } catch (AlipayApiException e) {
            log.error("支付宝回调签名校验异常：", e);
        }
        //商户订单号
        String out_trade_no = params.get("out_trade_no");
        if (signVerified) {
            try {
                //支付宝交易号
                String trade_no = params.get("trade_no");
                //交易状态
                String trade_status = params.get("trade_status");
                //订单金额
                String total_amount = params.get("total_amount");
                //支付终端类型
                String type = params.get("passback_params");

                boolean isMergePay = isMergePayOrder(out_trade_no);
                log.info("-------------支付回调,单号：{}，流水：{}，交易状态：{}，金额：{}，是否合并支付：{}------------",
                        out_trade_no, trade_no, trade_status, total_amount, isMergePay);
                String lockName;
                //非组合支付，则查出该单笔订单。
                //非组合支付，则查出该单笔订单。
                if (!isMergePay) {
                    Trade trade = new Trade();
                    if (isTailPayOrder(out_trade_no)) {
                        trade =
                                tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
                    } else {
                        trade = tradeService.detail(out_trade_no);
                    }
                    // 锁资源：无论是否组合支付，都锁父单号，确保串行回调
                    lockName = trade.getParentId();
                } else {
                    lockName = out_trade_no;
                }
                Operator operator =
                        Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(PayGatewayEnum.ALIPAY.name())
                                .account(PayGatewayEnum.ALIPAY.name()).platform(Platform.THIRD).build();
                //redis锁，防止同一订单重复回调
                RLock rLock = redissonClient.getFairLock(lockName);
                rLock.lock();
                //执行
                try {
                    List<Trade> trades = new ArrayList<>();
                    //查询交易记录
                    TradeRecordByOrderCodeRequest tradeRecordByOrderCodeRequest =
                            new TradeRecordByOrderCodeRequest(out_trade_no);
                    PayTradeRecordResponse recordResponse =
                            payQueryProvider.getTradeRecordByOrderCode(tradeRecordByOrderCodeRequest).getContext();
                    PayCallBackResult payCallBackResult =
                            payCallBackResultService.list(PayCallBackResultQueryRequest.builder().businessId(out_trade_no).build()).get(0);
                    if (isMergePay) {
                        /*
                         * 合并支付
                         * 查询订单是否已支付或过期作废
                         */
                        trades = tradeService.detailsByParentId(out_trade_no);
                        //订单合并支付场景状态采样
                        boolean paid =
                                trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
                        boolean cancel =
                                trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);
                        //订单的支付渠道。17、18、19是我们自己对
                        //   接的支付宝渠道， 表：pay_channel_item
                        if (cancel || (paid && recordResponse.getChannelItemId() != 17L && recordResponse.getChannelItemId()
                                != 18L && recordResponse.getChannelItemId() != 19L)) {
                            //重复支付，直接退款
                            alipayRefundHandle(out_trade_no, total_amount);
                        } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                            alipayCallbackHandle(out_trade_no, trade_no, trade_status, total_amount, type,
                                    operator, trades, true, recordResponse);
                        }
                    } else {
                        //单笔支付
                        //单笔支付
                        Trade trade = new Trade();
                        if (isTailPayOrder(out_trade_no)) {
                            trade =
                                    tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
                        } else {
                            trade = tradeService.detail(out_trade_no);
                        }
                        if (trade.getTradeState().getFlowState() == FlowState.VOID || (trade.getTradeState()
                                .getPayState() == PayState.PAID && recordResponse.getChannelItemId() != 17L && recordResponse.getChannelItemId()
                                != 18L && recordResponse.getChannelItemId() != 19L)) {
                            //同一批订单重复支付或过期作废，直接退款
                            alipayRefundHandle(out_trade_no, total_amount);
                        } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                            trades.add(trade);
                            alipayCallbackHandle(out_trade_no, trade_no, trade_status, total_amount, type,
                                    operator, trades, false, recordResponse);
                        }
                    }
                    payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.SUCCESS);
                } finally {
                    //解锁
                    rLock.unlock();
                }
            } catch (Exception e) {
                log.error("支付宝回调异常：", e);
                payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.FAILED);
            }
        }
    }

    /**
     * 支付宝退款处理
     *
     * @param out_trade_no
     * @param total_amount
     */
    private void alipayRefundHandle(String out_trade_no, String total_amount) {
        //调用退款接口。直接退款。不走退款流程，没有交易对账，只记了操作日志
        AliPayRefundResponse aliPayRefundResponse =
                aliPayProvider.aliPayRefund(AliPayRefundRequest.builder().businessId(out_trade_no)
                        .amount(new BigDecimal(total_amount)).description("重复支付退款").build()).getContext();
        log.info("支付宝重复支付、超时订单退款,单号：{}", out_trade_no);
    }

    private void alipayCallbackHandle(String out_trade_no, String trade_no, String trade_status, String total_amount,
                                      String type, Operator operator, List<Trade> trades, boolean isMergePay,
                                      PayTradeRecordResponse recordResponse) {
        if (recordResponse.getApplyPrice().compareTo(new BigDecimal(total_amount)) == 0 && trade_status.equals(
                "TRADE_SUCCESS")) {
            //异步回调添加交易数据
            PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
            //流水号
            payTradeRecordRequest.setTradeNo(trade_no);
            //商品订单号
            payTradeRecordRequest.setBusinessId(out_trade_no);
            payTradeRecordRequest.setResult_code("SUCCESS");
            payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
            payTradeRecordRequest.setChannelItemId(Long.valueOf(type));
            //添加交易数据（与微信共用）
            payProvider.wxPayCallBack(payTradeRecordRequest);
            payCallbackOnline(trades, operator, isMergePay);
            log.info("支付回调成功,单号：{}", out_trade_no);
        }
    }

    private void cmbpayCallbackHandleNewPile(String out_trade_no, String trade_no, String total_amount, String discount_amount,
                                             String type, Operator operator, List<NewPileTrade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //流水号
        payTradeRecordRequest.setTradeNo(trade_no);
        //商品订单号
        payTradeRecordRequest.setBusinessId(out_trade_no);
        payTradeRecordRequest.setResult_code("SUCCESS");
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
        payTradeRecordRequest.setChargeId(type);
        payTradeRecordRequest.setChannelItemId(28L);
        payTradeRecordRequest.setDiscountAmount(new BigDecimal(discount_amount == null || discount_amount.equals("") ? "0" : discount_amount));
        //添加交易数据（与微信共用）
        payProvider.wxPayCallBack(payTradeRecordRequest);
        //同步招商使用赠券金额
        trades.forEach((NewPileTrade trade) -> {
            trade.getTradePrice().setCmbDiscountsPrice(payTradeRecordRequest.getDiscountAmount());
        });
        payCallbackOnlineNewPile(trades, operator, isMergePay);
        log.info("支付回调成功,单号：{}", out_trade_no);
    }


    private void cmbpayCallbackHandle(String out_trade_no, String trade_no, String total_amount, String discount_amount,
                                      String type, Operator operator, List<Trade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //流水号
        payTradeRecordRequest.setTradeNo(trade_no);
        //商品订单号
        payTradeRecordRequest.setBusinessId(out_trade_no);
        payTradeRecordRequest.setResult_code("SUCCESS");
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
        payTradeRecordRequest.setChargeId(type);
        payTradeRecordRequest.setChannelItemId(28L);
        payTradeRecordRequest.setDiscountAmount(new BigDecimal(discount_amount == null || discount_amount.equals("") ? "0" : discount_amount));
        //添加交易数据（与微信共用）
        payProvider.wxPayCallBack(payTradeRecordRequest);
        //同步招商使用赠券金额
        trades.forEach((Trade trade) -> {
            trade.getTradePrice().setCmbDiscountsPrice(payTradeRecordRequest.getDiscountAmount());
        });
        payCallbackOnline(trades, operator, isMergePay);
        log.info("支付回调成功,单号：{}", out_trade_no);
    }

    private void cupspayCallbackHandle(String out_trade_no, String trade_no, String total_amount,
                                       String type, Operator operator, List<Trade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //流水号
        payTradeRecordRequest.setTradeNo(trade_no);
        //商品订单号
        payTradeRecordRequest.setBusinessId(out_trade_no);
        payTradeRecordRequest.setResult_code("SUCCESS");
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
        payTradeRecordRequest.setChargeId(type);
        payTradeRecordRequest.setChannelItemId(type.indexOf("Alipay") != -1 ? 29L : 30L);
        //添加交易数据（与微信共用）
        log.info("cupspayCallbackHandle-------------->" + JSONObject.toJSONString(trades));
        payProvider.wxPayCallBack(payTradeRecordRequest);

        payCallbackOnline(trades, operator, isMergePay);
        log.info("支付回调成功,单号：{}", out_trade_no);
    }


    /**
     * 新囤货使用
     *
     * @param out_trade_no
     * @param trade_no
     * @param total_amount
     * @param type
     * @param operator
     * @param trades
     * @param isMergePay
     */
    private void cupspayCallbackHandleNewPile(String out_trade_no, String trade_no, String total_amount,
                                              String type, Operator operator, List<NewPileTrade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //流水号
        payTradeRecordRequest.setTradeNo(trade_no);
        //商品订单号
        payTradeRecordRequest.setBusinessId(out_trade_no);
        payTradeRecordRequest.setResult_code("SUCCESS");
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
        payTradeRecordRequest.setChargeId(type);
        payTradeRecordRequest.setChannelItemId(type.indexOf("Alipay") != -1 ? 29L : 30L);
        //添加交易数据（与微信共用）
        payProvider.wxPayCallBack(payTradeRecordRequest);
        payCallbackOnlineNewPile(trades, operator, isMergePay);
        log.info("支付回调成功,单号：{}", out_trade_no);
    }


    /**
     * 线上订单支付回调
     * 订单 支付单 操作信息
     *
     * @return 操作结果
     */
    private void payCallbackOnline(List<Trade> trades, Operator operator, boolean isMergePay) {
        // log.info("payCallbackOnline------121212-------->" + JSONObject.toJSONString(trades));
        List<PayCallBackOnlineBatch> payCallBackOnlineBatchList = trades.stream().map(trade -> {
            log.info("payCallbackOnline-------------->" + JSONObject.toJSONString(trade));
            //每笔订单做是否合并支付标识
            trade.getPayInfo().setMergePay(isMergePay);
            updateTrade(trade);
            if (Objects.nonNull(trade.getIsBookingSaleGoods()) && trade.getIsBookingSaleGoods() && trade.getBookingType() == BookingType.EARNEST_MONEY &&
                    StringUtils.isNotEmpty(trade.getTailOrderNo()) && StringUtils.isNotEmpty(trade.getTailPayOrderId())) {
                //支付单信息
                PayOrder payOrder = findPayOrder(trade.getTailPayOrderId());

                // 如果支付单为null,重新创建支付单
                payOrder = createPayOrderIfNull(trade, payOrder);

                if ((PayWay.BALANCE).equals(trade.getPayWay())) {
                    payOrder.setPayType(PayType.BALANCER);
                }

                PayCallBackOnlineBatch backOnlineBatch = new PayCallBackOnlineBatch();
                backOnlineBatch.setTrade(trade);
                backOnlineBatch.setPayOrderOld(payOrder);
                return backOnlineBatch;
            } else {
                //支付单信息
                PayOrder payOrder = findPayOrder(trade.getPayOrderId());

                // 如果支付单为null,重新创建支付单
                payOrder = createPayOrderIfNull(trade, payOrder);

                if ((PayWay.BALANCE).equals(trade.getPayWay())) {
                    payOrder.setPayType(PayType.BALANCER);
                }
                PayCallBackOnlineBatch backOnlineBatch = new PayCallBackOnlineBatch();
                backOnlineBatch.setTrade(trade);
                backOnlineBatch.setPayOrderOld(payOrder);
                return backOnlineBatch;
            }
        }).collect(Collectors.toList());
        log.info("payCallBackOnlineBatchList------- {}", payCallBackOnlineBatchList);
        payCallBackOnlineBatch(payCallBackOnlineBatchList, operator);
        boolean existMoreSelfStore =false;//&& trades.stream().filter(trade->orderCommonService.selfOrder(trade)).count()>1;
        pushWmsBatch(trades,existMoreSelfStore);
        try {
            logger.info("回调开始createTmsOrder");
            trades.forEach(trade->{
                trade.getTradeState().setPayState(PayState.PAID);
            });
            createTmsOrder(trades);
            logger.info("回调结束createTmsOrder");
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("回调异常createTmsOrder{}",e.getMessage());
        }
        // 订单支付回调同步供应商订单状态
        //this.providerTradePayCallBack(trades);
    }

    public PayOrder createPayOrderIfNull(Trade trade, PayOrder payOrder) {
        if (Objects.isNull(payOrder)) {
            // 创建支付单信息 因支付回调经常有payOrder 为null的情况 一般为事务超时，导致mysql数据库回滚，而mongodb中又保存了payOrderId
            log.info("支付回调缺失payOrder,重新创建payOrder,订单Id：{},订单payOrderId:{}", trade.getId(), trade.getPayOrderId());
            payOrder = new PayOrder();
            payOrder.setPayOrderId(trade.getPayOrderId());
            BaseResponse<CustomerDetailGetCustomerIdResponse> response = tradeCacheService.getCustomerDetailByCustomerId(trade.getBuyer().getId());
            CustomerDetailVO customerDetail = response.getContext();
            payOrder.setCustomerDetailId(customerDetail.getCustomerDetailId());
            payOrder.setOrderCode(trade.getId());
            payOrder.setUpdateTime(LocalDateTime.now());
            payOrder.setCreateTime(trade.getTradeState().getCreateTime());
            payOrder.setDelFlag(DeleteFlag.NO);
            payOrder.setCompanyInfoId(trade.getSupplier().getSupplierId());
            payOrder.setPayOrderNo(generatorService.generateOid());
            payOrder.setPayOrderStatus(PayOrderStatus.NOTPAY);
            payOrder.setPayOrderPrice(trade.getTradePrice().getTotalPrice());
            payOrder.setPayOrderPoints(trade.getTradePrice().getPoints());
            payOrder.setPayType(PayType.valueOf(trade.getPayInfo().getPayTypeName()));
            if(PayType.OFFLINE.equals(PayType.valueOf(trade.getPayInfo().getPayTypeName()))){
                payOrder.setPayOrderRealPayPrice(trade.getTradePrice().getTotalPrice());
            }
            if (OrderType.POINTS_ORDER.equals(trade.getOrderType())) {
                // 积分订单生成收款单
                Receivable receivable = new Receivable();
                receivable.setPayOrderId(payOrder.getPayOrderId());
                receivable.setReceivableNo(generatorService.generateSid());
                receivable.setPayChannel("积分支付");
                receivable.setPayChannelId((Constants.DEFAULT_RECEIVABLE_ACCOUNT));
                receivable.setCreateTime(trade.getTradeState().getCreateTime());
                receivable.setDelFlag(DeleteFlag.NO);
                receivableRepository.save(receivable);
            }
            // 调用自定义的插入方法
            payOrderRepository.insertPayOrder(
                    payOrder.getPayOrderId(),
                    payOrder.getPayOrderNo(),
                    payOrder.getOrderCode(),
                    payOrder.getPayOrderStatus().toValue(),
                    payOrder.getPayType().toValue(),
                    payOrder.getCustomerDetailId(),
                    payOrder.getCreateTime(),
                    payOrder.getUpdateTime(),
                    payOrder.getDelTime(),
                    payOrder.getDelFlag().toValue(),
                    payOrder.getPayOrderPrice(),
                    payOrder.getCompanyInfoId(),
                    payOrder.getPayOrderPoints(),
                    payOrder.getPayOrderRealPayPrice()
            );
        }
        return payOrder;
    }

    private void createTmsOrder(List<Trade> trades) {
        createTmsOrderByToStore(trades);
        createTmsOrderByExpress(trades);

    }

    private void createTmsOrderByExpress(List<Trade> trades) {
        List<Trade> tradesExpress = trades.stream().filter(t -> DeliverWay.isExpressSelfPaid(t.getDeliverWay())).collect(Collectors.toList());
        if (CollectionUtils.isEmpty(tradesExpress)) {
            return;

        }
        tradesExpress.forEach(trade->{
            /*ExpressSaveDTO expressSaveDTO = localExpressOrderService.createTmsOrder(trade);
            if(expressSaveDTO==null){
                return;
            }
            updateByCreateTms(trade, expressSaveDTO.getExpressOrderId());*/
        });

    }

    private void createTmsOrderByToStore(List<Trade> trades) {
        List<Trade> tradesToStore = trades.stream().filter(t -> DeliverWay.isDeliveryToStore(t.getDeliverWay())).collect(Collectors.toList());
        if (CollectionUtils.isEmpty(tradesToStore)) {
            return;
        }
        List<TmsOrderSaveResponseVO> tmsOrderSaveResponseVOList = localTmsOrderService.createTmsOrder(trades);
        tradesToStore.forEach(trade -> {
            TmsOrderSaveResponseVO responseVO = tmsOrderSaveResponseVOList.stream().filter(tms -> trade.getId().equals(tms.getTradeOrderId())).findAny().orElse(null);
            if (responseVO != null) {
                updateByCreateTms(trade, responseVO.getTmsOrderId());
            }
        });
    }

    private void updateByCreateTms(Trade trade,String tmsOrderId) {
        Trade newTrade = detail(trade.getId());
        if (CollectionUtils.isNotEmpty(trade.getTradeDelivers())) {
            newTrade.getTradeDelivers().get(0).getLogistics().setTmsOrderId(tmsOrderId);
            newTrade.getTradeDelivers().get(0).getLogistics().setLogisticNo(tmsOrderId);
        } else {
            Logistics logistics = Logistics.builder().tmsOrderId(tmsOrderId).logisticNo(tmsOrderId).build();
            TradeDeliver tradeDeliver = TradeDeliver.builder().logistics(logistics).build();
            newTrade.setTradeDelivers(Arrays.asList(tradeDeliver));
        }
        updateTrade(newTrade);
    }

    private void pushWmsBatch(List<Trade> trades,boolean isMegerPushWms) {
        //多个自营商家的订单并且是合并支付的时候，才开始合并推WMS
        trades.forEach(trade -> {
            //修改真实库存，释放锁定库存
            this.stockupdate(trade, false);
            //推送WMS
            //if(true) {
            pushWMSOrder(trade, false, trade.getVillageFlag());
            //}
        });
        if (false) {//彭志高提出需求，但是最终需求确认
            List<Trade> wmsTrades = trades.stream().filter(trade -> orderCommonService.selfOrder(trade)).collect(Collectors.toList());
            pushWMSMergerOrder(wmsTrades);
        }
    }


    /**
     * 线上订单支付回调（囤货）
     * 订单 支付单 操作信息
     *
     * @return 操作结果
     */
    private void payCallbackOnlineNewPile(List<NewPileTrade> trades, Operator operator, boolean isMergePay) {
        List<PayCallBackOnlineBatch> payCallBackOnlineBatchList = trades.stream().map(trade -> {
            //每笔订单做是否合并支付标识
            trade.getPayInfo().setMergePay(isMergePay);
            newPileTradeService.updateTrade(trade);
            if (Objects.nonNull(trade.getIsBookingSaleGoods()) && trade.getIsBookingSaleGoods() && trade.getBookingType() == BookingType.EARNEST_MONEY &&
                    StringUtils.isNotEmpty(trade.getTailOrderNo()) && StringUtils.isNotEmpty(trade.getTailPayOrderId())) {
                //支付单信息
                PayOrder payOrder = findPayOrder(trade.getTailPayOrderId());

                if ((PayWay.BALANCE).equals(trade.getPayWay())) {
                    payOrder.setPayType(PayType.BALANCER);
                }

                PayCallBackOnlineBatch backOnlineBatch = new PayCallBackOnlineBatch();
                backOnlineBatch.setNewPileTrade(trade);
                backOnlineBatch.setPayOrderOld(payOrder);
                return backOnlineBatch;
            } else {
                //支付单信息
                PayOrder payOrder = findPayOrder(trade.getPayOrderId());

                if ((PayWay.BALANCE).equals(trade.getPayWay())) {
                    payOrder.setPayType(PayType.BALANCER);
                }
                PayCallBackOnlineBatch backOnlineBatch = new PayCallBackOnlineBatch();
                backOnlineBatch.setNewPileTrade(trade);
                backOnlineBatch.setPayOrderOld(payOrder);
                return backOnlineBatch;
            }
        }).collect(Collectors.toList());
        log.info("payCallBackOnlineBatchList---pile---- {}", payCallBackOnlineBatchList);
        payCallBackOnlineBatchNewPile(payCallBackOnlineBatchList, operator);
    }

    /**
     * 囤货的提货
     * 订单 支付单 操作信息
     *
     * @return 操作结果
     */
    private void payTakeGoodCallbackOnline(List<Trade> trades, Operator operator, boolean isMergePay) {
        List<PayCallBackOnlineBatch> payCallBackOnlineBatchList = trades.stream().map(trade -> {
            //每笔订单做是否合并支付标识
            trade.getPayInfo().setMergePay(isMergePay);
            updateTrade(trade);
            if (Objects.nonNull(trade.getIsBookingSaleGoods()) && trade.getIsBookingSaleGoods() && trade.getBookingType() == BookingType.EARNEST_MONEY &&
                    StringUtils.isNotEmpty(trade.getTailOrderNo()) && StringUtils.isNotEmpty(trade.getTailPayOrderId())) {
                //支付单信息
                PayOrder payOrder = findPayOrder(trade.getTailPayOrderId());

                if ((PayWay.BALANCE).equals(trade.getPayWay())) {
                    payOrder.setPayType(PayType.BALANCER);
                }

                PayCallBackOnlineBatch backOnlineBatch = new PayCallBackOnlineBatch();
                backOnlineBatch.setTrade(trade);
                backOnlineBatch.setPayOrderOld(payOrder);
                return backOnlineBatch;
            } else {
                //支付单信息
                PayOrder payOrder = findPayOrder(trade.getPayOrderId());

                if (Objects.isNull(payOrder)) {
                    this.createPayOrder(trade);
                    payOrder = findPayOrder(trade.getPayOrderId());
                }
                if ((PayWay.BALANCE).equals(trade.getPayWay())) {
                    payOrder.setPayType(PayType.BALANCER);
                }
                PayCallBackOnlineBatch backOnlineBatch = new PayCallBackOnlineBatch();
                backOnlineBatch.setTrade(trade);
                backOnlineBatch.setPayOrderOld(payOrder);
                return backOnlineBatch;
            }
        }).collect(Collectors.toList());
//        log.info("payCallBackOnlineBatchList------- {}", payCallBackOnlineBatchList);
        payTakeGoodCallBackOnlineBatch(payCallBackOnlineBatchList, operator);
        // 订单支付回调同步供应商订单状态
        //this.providerTradePayCallBack(trades);
    }

    /**
     * 线上订单充值支付回调
     * 订单 支付单 操作信息
     *
     * @return 操作结果
     */
    public void payRechargeCallbackOnline(WalletRecordVO walletRecordVO, WxPayResultResponse wxPayResultResponse) {
        //交易金额
        BigDecimal totalFee = new BigDecimal(wxPayResultResponse.getTotal_fee()).divide(new BigDecimal(100));
        //用户
        String customerAccount = walletRecordVO.getCustomerAccount();
        //交易id
        String recordNo = walletRecordVO.getRecordNo();
        //虚拟商品id
        Integer virtualGoodsId = walletRecordVO.getVirtualGoodsId();
        WalletByCustomerAccountQueryRequest request = WalletByCustomerAccountQueryRequest.builder().customerAccount(customerAccount).build();
        //添加对应的充值余额到充值金额中,添加对应的充值金额到余额中,获取用户钱包表
        CusWalletVO walletVO = customerWalletQueryProvider.getCustomerWalletByCustomerAccount(request).getContext().getCusWalletVO();
        //赠送优惠券
        this.giveCoupon(virtualGoodsId.longValue(), walletVO.getCustomerId());
        TicketsFormModifyRequest ticketsForm = new TicketsFormModifyRequest();
        ticketsForm.setWalletId(walletVO.getWalletId());
        ticketsForm.setVirtualGoodsId(virtualGoodsId);
        if (totalFee.compareTo(walletRecordVO.getDealPrice()) != 0) {
            ticketsForm.setApplyPrice(totalFee);
        } else {
            ticketsForm.setApplyPrice(walletRecordVO.getDealPrice());
        }
        ticketsForm.setApplyTime(LocalDateTime.now());
        ticketsForm.setRechargeStatus(2);
        ticketsForm.setRemark(new StringBuilder().append("用户：").append(customerAccount).append("充值").append(walletRecordVO.getDealPrice())
                .append("元,充值时间").append(LocalDateTime.now()).toString());
        ticketsForm.setRecordNo(recordNo);
        //新增交易记录
        ticketsFormProvider.saveTicketsForm(ticketsForm);
        QueryWalletRecordRequest build = new QueryWalletRecordRequest().builder().customerAccount(customerAccount).build();
        //判断是不是第一次充值,是的话赠送对应金额
        List<WalletRecordVO> walletRecordVOs = walletRecordProvider.queryWalletRecordByCustomerAccount(build).getContext().getWalletRecordVOs();
        //赠送的金额
        BigDecimal giveMoney = null;
        //充值的金额
        BigDecimal rechargeMoney = walletRecordVO.getDealPrice();
        //最终余额
        BigDecimal finalBalance;
        //最终充值金额
        BigDecimal finalRechargeMoney;
        //最终赠送金额
        BigDecimal finalGiveMoney;
        //根据虚拟商品id查询出虚拟商品对应的赠送金额进行赠送,给赠送金额添加余额,给赠送的金额添加金额
        List<Long> ids = new ArrayList<>();
        ids.add(Long.valueOf(virtualGoodsId));
        List<VirtualGoodsVO> goodsList = virtualGoodsQueryProvider.getVirtualGoodsList(com.wanmi.sbc.account.api.request.wallet.VirtualGoodsRequest.builder().goodsIdList(ids).build()).getContext().getVirtualGoodsList();
        VirtualGoodsVO virtualGoods = null;
        if (CollectionUtils.isNotEmpty(goodsList)) {
            virtualGoods = goodsList.get(0);
        }
        BigDecimal givePrice = virtualGoods.getGivePrice();
        //判断是否首充赠送
        if (virtualGoods.getFirstSendFlag().equals(0)) {
            //是首充才送
            //首次充值,赠送礼包
            if (CollectionUtils.isEmpty(walletRecordVOs)) {
                //判断是否首充赠送
                if (Objects.nonNull(givePrice)) {
                    giveMoney = givePrice;
                }
            }
        } else {
            //判断是否首充赠送
            if (Objects.nonNull(givePrice)) {
                giveMoney = givePrice;
            }
        }
        //钱包不为空进行添加余额,添加充值金额,添加赠送金额
        if (Objects.nonNull(walletVO)) {
            //余额
            BigDecimal balanceOld = walletVO.getBalance();
            //余额添加充值金额
            BigDecimal balance = balanceOld.add(rechargeMoney);
            //赠送金额不为空,余额添加赠送金额
            if (Objects.nonNull(giveMoney)) {
                finalBalance = balance.add(giveMoney);
            } else {
                //充值金额为空,余额等于充值金额加当前余额
                finalBalance = balance;
            }
            //最终余额
            walletVO.setBalance(finalBalance);
            //充值金额
            BigDecimal rechargeBalance = walletVO.getRechargeBalance();
            if (Objects.nonNull(rechargeBalance)) {
                finalRechargeMoney = rechargeMoney.add(rechargeBalance);
            } else {
                finalRechargeMoney = rechargeMoney;
            }
            //最终充值金额
            walletVO.setRechargeBalance(finalRechargeMoney);
            //赠送金额
            BigDecimal giveBalance = walletVO.getGiveBalance();
            //本次赠送金额不为空
            if (Objects.nonNull(giveMoney)) {
                //以往赠送金额不为空
                if (Objects.nonNull(giveBalance)) {
                    finalGiveMoney = giveBalance.add(giveMoney);
                } else {
                    finalGiveMoney = giveMoney;
                }
                //赠送金额
                walletVO.setGiveBalance(finalGiveMoney);
            }
            CustomerWalletModifyRequest modifyRequest = new CustomerWalletModifyRequest().builder().cusWalletVO(walletVO).build();
            customerWalletProvider.updateCustomerWalletByWalletId(modifyRequest);
        }
    }

    /**
     * 赠送优惠券
     *
     * @param virtualGoodsId
     */
    public List<GetCouponGroupResponse> giveCoupon(Long virtualGoodsId, String customerId) {
        VirtualGoodsVO virtualGoods = virtualGoodsQueryProvider.getVirtualGoods(com.wanmi.sbc.account.api.request.wallet.VirtualGoodsRequest.builder().goodsId(virtualGoodsId).build()).getContext().getVirtualGoods();
        String activityId = virtualGoods.getActivityId();
        //当活动id不等于空的时候，赠送优惠券
        if (StringUtils.isNotEmpty(activityId)) {
            List<GetCouponGroupResponse> couponList = couponActivityProvider.giveRechargeCoupon(SendCouponRechargeRequest.builder().activityId(activityId).customerId(customerId).build()).getContext().getCouponList();
            return couponList;
        }
        return null;
    }


    /**
     * 查询订单状态是已下单的近30天订单数据
     *
     * @return List<Trade>
     */
    public List<OrderSalesRanking> querySalesRanking() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(30, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator(Criteria.where("tradeState.createTime").gte(justTime)
                , Criteria.where("tradeState.payState").is("PAID")
        );
        Query query = new Query(criteria);
        List<Trade> providerTrades = mongoTemplate.find(query, Trade.class);
        List<OrderSalesRanking> orderSalesRankings = Lists.newArrayList();
        for (Trade providerTrade : providerTrades) {
            List<TradeItem> tradeItems = providerTrade.getTradeItems();
            for (TradeItem tradeItem : tradeItems) {
                String skuId = tradeItem.getSkuId();
                String spuId = tradeItem.getSpuId();
                Long cateId = tradeItem.getCateId();
                String cateName = tradeItem.getCateName();
                OrderSalesRanking build = OrderSalesRanking.builder().skuId(skuId).spuId(spuId).cateId(cateId).cateName(cateName).build();
                orderSalesRankings.add(build);
            }
        }
        return orderSalesRankings;
    }

    /**
     * 查询订单状态是已下单的近30天订单数据
     *
     * @return List<Trade>
     */
    public List<OrderSalesRankingSort> orderSort() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(30, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator(Criteria.where("tradeState.createTime").gte(justTime)
                , Criteria.where("tradeState.payState").is("PAID")
        );
        Query query = new Query(criteria);
        List<Trade> providerTrades = mongoTemplate.find(query, Trade.class);
        List<OrderSalesRankingSort> orderSalesRankings = Lists.newArrayList();
        for (Trade providerTrade : providerTrades) {
            List<TradeItem> tradeItems = providerTrade.getTradeItems();
            for (TradeItem tradeItem : tradeItems) {
                String skuId = tradeItem.getSkuId();
                String spuId = tradeItem.getSpuId();
                Long cateId = tradeItem.getCateId();
                String cateName = tradeItem.getCateName();
                OrderSalesRankingSort build = OrderSalesRankingSort.builder().skuId(skuId).spuId(spuId).cateId(cateId).cateName(cateName).build();
                orderSalesRankings.add(build);
            }
        }
        return orderSalesRankings;
    }

    /**
     * 获取客户最近支付时间
     *
     * @return
     */
    public List<Trade> getCustomerLastPayOrderTime(String customerId) {
        Criteria criteria = new Criteria();
        criteria.andOperator(Criteria.where("tradeState.payState").is("PAID"),
                Criteria.where("buyer._id").is(customerId));

        Query query = new Query(criteria);
        query.limit(1);
        query.with(Sort.by(Sort.Order.desc("tradeState.createTime")));
        List<Trade> tradeList = mongoTemplate.find(query, Trade.class);
        return tradeList;
    }


    /**
     * @return void
     * @Author lvzhenwei
     * @Description 招商回调处理，将原有逻辑迁移到order处理
     * @Date 14:56 2020/7/2
     * @Param [tradePayOnlineCallBackRequest]
     **/
    @Transactional
    @LcnTransaction
    public void cmbPayOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws IOException {
        log.info("===============招商回调开始==============");
        GatewayConfigByGatewayRequest gatewayConfigByGatewayRequest = new GatewayConfigByGatewayRequest();
        gatewayConfigByGatewayRequest.setGatewayEnum(PayGatewayEnum.CMB);
        gatewayConfigByGatewayRequest.setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
        //查询招商配置信息
        PayGatewayConfigResponse payGatewayConfigResponse =
                payQueryProvider.getGatewayConfigByGateway(gatewayConfigByGatewayRequest).getContext();

        log.info("===============================招商支付回调参数========================：" + tradePayOnlineCallBackRequest.getCmbPayCallBackResultStr());
        //招商公钥
//        String aliPayPublicKey = payGatewayConfigResponse.getPublicKey();
        boolean signVerified = false;
        CmbCallBackRequest appRequest =
                JSONObject.parseObject(tradePayOnlineCallBackRequest.getCmbPayCallBackResultStr(), CmbCallBackRequest.class);

        log.info("===============================招商支付回调参数签名数据========================：" + appRequest.getSign());
//        CmbCallBackRequest appRequest = JSONObject.parseObject(params.get("jsonRequestData"),CmbCallBackRequest.class);
        try {
            signVerified = isValidSignature(appRequest, payGatewayConfigResponse.getPublicKey()); //调用SDK验证签名
//            signVerified = true;
        } catch (Exception e) {
            log.error("招商回调签名校验异常：", e);
        }
        CmbNoticeDataRequest noticeData = appRequest.getNoticeData();
        //商户订单号
        String out_trade_no = noticeData.getOrderNo();
        if (signVerified) {
            try {
                //招商交易号
                String trade_no = noticeData.getBankSerialNo();
                //订单金额
                String total_amount = noticeData.getAmount();
                //支付终端类型
                String type = noticeData.getCardType();
                //优惠金额
                String discount_amount = noticeData.getDiscountAmount();

                boolean isMergePay = isMergePayOrder(out_trade_no);
                log.info("-------------支付回调,单号：{}，流水：{}，交易状态：{}，金额：{}，是否合并支付：{}------------",
                        out_trade_no, trade_no, total_amount, isMergePay);
                String lockName = getLockName(isMergePay, out_trade_no);
                Operator operator =
                        Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(PayGatewayEnum.CMB.name())
                                .account(PayGatewayEnum.CMB.name()).platform(Platform.THIRD).build();
                //redis锁，防止同一订单重复回调
                RLock rLock = redissonClient.getFairLock(lockName);
                rLock.lock();
                //执行
                try {

                    //查询交易记录
                    TradeRecordByOrderCodeRequest tradeRecordByOrderCodeRequest =
                            new TradeRecordByOrderCodeRequest(out_trade_no);
                    PayTradeRecordResponse recordResponse =
                            payQueryProvider.getTradeRecordByOrderCode(tradeRecordByOrderCodeRequest).getContext();
                    PayCallBackResult payCallBackResult =
                            payCallBackResultService.list(PayCallBackResultQueryRequest.builder().businessId(out_trade_no).build()).get(0);

                    //囤货单
                    if (out_trade_no.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID)) {
                        cmbPayOnlineNewPile(isMergePay, out_trade_no,
                                recordResponse, payCallBackResult, noticeData,
                                trade_no, total_amount, discount_amount,
                                type, operator, appRequest);
                    } else {
                        cmbPayOnline(isMergePay, out_trade_no,
                                recordResponse, payCallBackResult, noticeData,
                                trade_no, total_amount, discount_amount,
                                type, operator, appRequest);
                    }
                    payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.SUCCESS);
                } finally {
                    //解锁
                    rLock.unlock();
                }
            } catch (Exception e) {
                log.error("招商回调异常：", e);
                payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.FAILED);
            }
        } else {
            log.info("招商支付异步回调验证签名结果[失败].");
            //支付处理结果回写回执支付结果表
            payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.FAILED);
        }
    }

    /**
     * @param isMergePay
     * @param out_trade_no
     * @param recordResponse
     * @param payCallBackResult
     * @param noticeData
     * @param trade_no
     * @param total_amount
     * @param discount_amount
     * @param type
     * @param operator
     * @param appRequest
     */
    private void cmbPayOnlineNewPile(Boolean isMergePay, String out_trade_no,
                                     PayTradeRecordResponse recordResponse, PayCallBackResult payCallBackResult,
                                     CmbNoticeDataRequest noticeData,
                                     String trade_no, String total_amount, String discount_amount,
                                     String type, Operator operator,
                                     CmbCallBackRequest appRequest) {
        List<NewPileTrade> trades = new ArrayList<>();
        if (isMergePay) {
            /*
             * 合并支付
             * 查询订单是否已支付或过期作废
             */
            trades = newPileTradeService.detailsByParentId(out_trade_no);
            //订单合并支付场景状态采样
            boolean paid =
                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
            boolean cancel =
                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == NewPileFlowState.VOID);
            //订单的支付渠道。17、18、19是我们自己对
            //   接的支付宝渠道， 表：pay_channel_item
            if (cancel || (paid && !recordResponse.getTradeNo().equals(noticeData.getBankSerialNo()))) {
                //重复支付，直接退款
                // alipayRefundHandle(out_trade_no, total_amount);
                cmbpayRefundHandle(recordResponse, out_trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                cmbpayCallbackHandleNewPile(out_trade_no, trade_no, total_amount, discount_amount, type,
                        operator, trades, true);
            }
        } else {
            //单笔支付
            //单笔支付
            NewPileTrade trade = new NewPileTrade();
            if (isTailPayOrder(out_trade_no)) {
                trade =
                        newPileTradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
            } else {
                trade = newPileTradeService.detail(out_trade_no);
            }
            //订单合并支付场景状态采样
//            boolean paid = trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
//            boolean cancel = trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == NewPileFlowState.VOID);
            boolean paid = trade.getTradeState().getPayState() == PayState.PAID;
            boolean cancel = trade.getTradeState().getFlowState() == NewPileFlowState.VOID;
            if (cancel || (paid && !recordResponse.getTradeNo().equals(appRequest.getNoticeData().getBankSerialNo()))) {
//                            //同一批订单重复支付或过期作废，直接退款
                cmbpayRefundHandle(recordResponse, out_trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                trades.add(trade);
                cmbpayCallbackHandleNewPile(out_trade_no, trade_no, total_amount, discount_amount, type,
                        operator, trades, false);
            }
        }
    }


    /**
     * @param isMergePay
     * @param out_trade_no
     * @param recordResponse
     * @param payCallBackResult
     * @param noticeData
     * @param trade_no
     * @param total_amount
     * @param discount_amount
     * @param type
     * @param operator
     * @param appRequest
     */
    private void cmbPayOnline(Boolean isMergePay, String out_trade_no,
                              PayTradeRecordResponse recordResponse, PayCallBackResult payCallBackResult,
                              CmbNoticeDataRequest noticeData,
                              String trade_no, String total_amount, String discount_amount,
                              String type, Operator operator,
                              CmbCallBackRequest appRequest) {
        List<Trade> trades = new ArrayList<>();
        if (isMergePay) {
            /*
             * 合并支付
             * 查询订单是否已支付或过期作废
             */
            trades = tradeService.detailsByParentId(out_trade_no);
            //订单合并支付场景状态采样
            boolean paid =
                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
            boolean cancel =
                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);
            //订单的支付渠道。17、18、19是我们自己对
            //   接的支付宝渠道， 表：pay_channel_item
            if (cancel || (paid && !recordResponse.getTradeNo().equals(noticeData.getBankSerialNo()))) {
                //重复支付，直接退款
                // alipayRefundHandle(out_trade_no, total_amount);
                cmbpayRefundHandle(recordResponse, out_trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                cmbpayCallbackHandle(out_trade_no, trade_no, total_amount, discount_amount, type,
                        operator, trades, true);
            }
        } else {
            //单笔支付
            //单笔支付
            Trade trade = new Trade();
            if (isTailPayOrder(out_trade_no)) {
                trade =
                        tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
            } else {
                trade = tradeService.detail(out_trade_no);
            }
            //订单合并支付场景状态采样
//            boolean paid = trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
//            boolean cancel = trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);
            boolean paid = trade.getTradeState().getPayState() == PayState.PAID;
            boolean cancel = trade.getTradeState().getFlowState() == FlowState.VOID;
            if (cancel || (paid && !recordResponse.getTradeNo().equals(appRequest.getNoticeData().getBankSerialNo()))) {
//                            //同一批订单重复支付或过期作废，直接退款
                cmbpayRefundHandle(recordResponse, out_trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                trades.add(trade);
                cmbpayCallbackHandle(out_trade_no, trade_no, total_amount, discount_amount, type,
                        operator, trades, false);
            }
        }
    }

    /**
     * 招商退款处理
     *
     * @param out_trade_no
     * @param total_amount
     */
    private void cmbpayRefundHandle(PayTradeRecordResponse response, String out_trade_no, String total_amount) {
        CmbPayRefundDataRequest refundRequest = CmbPayRefundDataRequest.builder().build();
        refundRequest.setDate(DateUtil.format(response.getCreateTime(), DateUtil.FMT_TIME_5));
        refundRequest.setOrderNo(response.getBusinessId());
        refundRequest.setRefundSerialNo(response.getTradeNo());
        refundRequest.setAmount(total_amount);
        refundRequest.setDesc("重复支付退款");
        log.info("refundRequest ==== {}", JSONObject.toJSONString(refundRequest));
        Object object = cmbPayProvider.cmbPayRefund(refundRequest);
        if (object != null) {
            log.info("招商重复支付、超时订单退款,单号：{}", out_trade_no);
            log.info("招商重复支付、超时订单退款,返回消息：{}", JSONObject.toJSONString(object));
        } else {
            log.info("招商重复支付、超时订单退款失败，单号：{}" + out_trade_no);
        }
    }

    /**
     * @param request   待验证签名字符串strToSign
     * @param publicKey 招行通知公钥为publicKey
     * @return
     */
    private boolean isValidSignature(CmbCallBackRequest request, String publicKey) throws Exception, InvalidKeyException {
        String strSign = request.getSign();
        JSONObject joNoticeData = (JSONObject) JSONObject.toJSON(request.getNoticeData());

        //按字典顺序排序，即字母顺序与大小写无关
        List<String> keys = new ArrayList<String>(joNoticeData.keySet());
        Collections.sort(keys, new Comparator<String>() {
            public int compare(String s1, String s2) {
                int i = s1.toLowerCase().compareTo(s2.toLowerCase());
                if (i != 0) {
                    return i;
                }
                return s2.compareTo(s1);
            }
        });

        StringBuilder sb = new StringBuilder();
        for (String key : keys) {
            if (joNoticeData.getString(key) == null || joNoticeData.getString(key).equals("")) {
                sb.append(key).append("=").append("&");
            } else {
                sb.append(key).append("=").append(joNoticeData.getString(key)).append("&");
            }
        }
        String strToSign = sb.deleteCharAt(sb.length() - 1).toString();

        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        byte[] encodedKey = Base64.getDecoder().decode(publicKey);
        PublicKey pubKey = keyFactory.generatePublic(new X509EncodedKeySpec(encodedKey));

        Signature signature = Signature.getInstance("SHA1WithRSA");
        signature.initVerify(pubKey);
        signature.update(strToSign.getBytes("UTF-8"));

        boolean bverify = signature.verify(Base64.getDecoder().decode(strSign));
        return bverify;
    }

    /**
     * @return void
     * @Author lvzhenwei
     * @Description 银联回调处理，将原有逻辑迁移到order处理
     * @Date 14:56 2020/7/2
     * @Param [tradePayOnlineCallBackRequest]
     **/
    @Transactional
    @LcnTransaction
    public void cupsPayOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws IOException {
        log.info("===============银联回调开始==============");
//        GatewayConfigByGatewayRequest gatewayConfigByGatewayRequest = new GatewayConfigByGatewayRequest();
        PayGatewayEnum payGatewayEnum = tradePayOnlineCallBackRequest.getPayCallBackType() == PayCallBackType.CUPSWECHAT ? PayGatewayEnum.CUPSWECHAT : PayGatewayEnum.CUPSALI;
//        gatewayConfigByGatewayRequest.setGatewayEnum(payGatewayEnum);
//        gatewayConfigByGatewayRequest.setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
//        //查询银联配置信息
//        PayGatewayConfigResponse payGatewayConfigResponse =
//                payQueryProvider.getGatewayConfigByGateway(gatewayConfigByGatewayRequest).getContext();

        log.info("===============================银联支付回调参数========================：" + tradePayOnlineCallBackRequest.getCupsPayCallBackResultStr());
        //招商公钥
        Map<String, String> params =
                JSONObject.parseObject(tradePayOnlineCallBackRequest.getCupsPayCallBackResultStr(), Map.class);
//        CupsPaySignRequest cupsPaySignRequest = new CupsPaySignRequest();
//        cupsPaySignRequest.setCupsPayCallBackResultStr(tradePayOnlineCallBackRequest.getCupsPayCallBackResultStr());
//        cupsPaySignRequest.setSecret(payGatewayConfigResponse.getSecret());
//        cupsPaySignRequest.setApiKey(payGatewayConfigResponse.getApiKey());
//        cupsPaySignRequest.setAppId(payGatewayConfigResponse.getAppId());
//        Boolean signVerified = cupsPayProvider.cupsPaySign(cupsPaySignRequest).getContext();

//        log.info("===============================银联支付回调参数签名数据========================：" + signVerified);
        //商户订单号
        String merOrderIds = params.get("merOrderId");
        String merOrderId = merOrderIds.substring(4, merOrderIds.length());
        /* PayTradeRecordRequest recordRequest = new PayTradeRecordRequest();
        recordRequest.setPayOrderNo(merOrderId);
        PayTradeRecordResponse payOrderResponse = payQueryProvider.findByPayOrderNo(recordRequest).getContext();
        log.info("===============银联回调开始参数22222222222：=============={},{},{}", merOrderId,
                JSONObject.toJSONString(recordRequest), JSONObject.toJSONString(payOrderResponse));

        String out_trade_no = payOrderResponse.getBusinessId();*/
        String out_trade_no = tradePayOnlineCallBackRequest.getBusinessId();
        try {
            //银联交易号
            String trade_no = params.get("seqId");
            //订单金额
            String total_amount = params.get("totalAmount");
            //支付终端类型
            String type = params.get("targetSys");

            boolean isMergePay = isMergePayOrder(out_trade_no);
            log.info("-------------支付回调,单号：{}，流水：{}，交易状态：{}，金额：{}，支付单号：{}，是否合并支付：{}------------",
                    out_trade_no, trade_no, total_amount, merOrderId, isMergePay);

            String lockName = getLockName(isMergePay, out_trade_no);

            Operator operator =
                    Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(payGatewayEnum.name())
                            .account(payGatewayEnum.name()).platform(Platform.THIRD).build();
            //redis锁，防止同一订单重复回调
            RLock rLock = redissonClient.getFairLock(lockName);
            rLock.lock();
            //执行
            try {
                //查询交易记录
                TradeRecordByOrderCodeRequest tradeRecordByOrderCodeRequest =
                        new TradeRecordByOrderCodeRequest(out_trade_no);
                PayTradeRecordResponse recordResponse =
                        payQueryProvider.getTradeRecordByOrderCode(tradeRecordByOrderCodeRequest).getContext();
                PayCallBackResult payCallBackResult =
                        payCallBackResultService.list(PayCallBackResultQueryRequest.builder().businessId(out_trade_no).build()).get(0);
                //实际执行
                log.info("out_trade_no.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID)---->" + out_trade_no.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID));
                if (out_trade_no.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID)) {
                    carryOutNewPile(merOrderId,recordResponse, payCallBackResult, isMergePay, out_trade_no, trade_no, total_amount, type, operator,payGatewayEnum);
                } else {
                    //非囤货单
                    carryOut(merOrderId,recordResponse, payCallBackResult, isMergePay, out_trade_no, trade_no, total_amount, type, operator,payGatewayEnum);
                }
                payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.SUCCESS);
            } finally {
                //解锁
                rLock.unlock();
            }
        } catch (Exception e) {
            log.info("银联支付异步回调验证签名结果[失败].");
            log.error("银联回调异常：", e);
            payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.FAILED);
        }
    }

    @Transactional
    @LcnTransaction
    public void ccbPayOnlineCallBack(TradePayOnlineCallBackRequest tradePayOnlineCallBackRequest) throws IOException {

        log.info("===============================建行支付回调参数========================：{}", tradePayOnlineCallBackRequest.getCcbPayCallBackResultStr());

        JSONObject obj = JSON.parseObject(tradePayOnlineCallBackRequest.getCcbPayCallBackResultStr());

        // 主订单编号
        String mainOrdrNo = obj.getString("Main_Ordr_No");
        // 支付流水号
        String trade_no = obj.getString("Py_Trn_No");
        // 支付金额
        String total_amount = obj.getString("Ordr_Amt");
        // 订单状态代码 2成功 3失败 4失效
        String ordr_stcd = obj.getString("Ordr_Stcd");

        // 支付时间 yyyyMMddHHmmssSSS
        String pay_time = obj.getString("Pay_Time");

        String out_trade_no = tradePayOnlineCallBackRequest.getBusinessId();
        try {

            boolean isMergePay = isMergePayOrder(out_trade_no);

            log.info("==========建行支付回调，单号：{}，支付流水号：{}，订单状态：{}，支付金额：{}，支付时间：{}，是否合并支付：{}",
                    out_trade_no, trade_no, ordr_stcd, total_amount, pay_time, isMergePay);

            String lockName = getLockName(isMergePay, out_trade_no);

            PayGatewayEnum payGatewayEnum = PayGatewayEnum.CCB;

            Operator operator = Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(payGatewayEnum.name())
                            .account(payGatewayEnum.name()).platform(Platform.THIRD).build();
            //redis锁，防止同一订单重复回调
            RLock rLock = redissonClient.getFairLock(lockName);
            rLock.lock();
            //执行
            try {
                //查询交易记录
                TradeRecordByOrderCodeRequest tradeRecordByOrderCodeRequest =
                        new TradeRecordByOrderCodeRequest(out_trade_no);
                PayTradeRecordResponse recordResponse =
                        payQueryProvider.getTradeRecordByOrderCode(tradeRecordByOrderCodeRequest).getContext();
                PayCallBackResult payCallBackResult =
                        payCallBackResultService.list(PayCallBackResultQueryRequest.builder().businessId(out_trade_no).build()).get(0);
                // 实际执行
                if (out_trade_no.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID)) {
                    ccbPayOnlinePile(recordResponse, payCallBackResult, isMergePay, out_trade_no, trade_no, total_amount, operator);
                } else {
                    //非囤货单
                    ccbPayOnline(recordResponse, payCallBackResult, isMergePay, out_trade_no, trade_no, total_amount, operator);
                }
                payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.SUCCESS);
            } finally {
                //解锁
                rLock.unlock();
            }
        } catch (Exception e) {
            log.error("建行支付回调异常：", e);
            payCallBackResultService.updateStatus(out_trade_no, PayCallBackResultStatus.FAILED);
        }
    }


    public void ccbPayOnlinePile(PayTradeRecordResponse recordResponse,
                                 PayCallBackResult payCallBackResult,
                                 boolean isMergePay,
                                 String out_trade_no,
                                 String trade_no,
                                 String total_amount, Operator operator) {
        List<NewPileTrade> trades = new ArrayList<>();
        if (isMergePay) {
            /*
             * 合并支付
             * 查询订单是否已支付或过期作废
             */
            trades = newPileTradeService.detailsByParentId(out_trade_no);
            //订单合并支付场景状态采样
            boolean paid =
                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
            boolean cancel =
                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == NewPileFlowState.VOID);

            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
                //重复支付，直接退款
                ccbpayRefundHandle(out_trade_no, trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                for (NewPileTrade trade : trades) {
                    trade.setPayOrderNo(recordResponse.getPayOrderNo());
                }
                ccbpayCallbackHandleNewPile(out_trade_no, trade_no, total_amount,
                        operator, trades, true);
            }
        } else {
            //单笔支付
            //单笔支付
            NewPileTrade trade = new NewPileTrade();
            if (isTailPayOrder(out_trade_no)) {
                trade =
                        newPileTradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
            } else {
                trade = newPileTradeService.detail(out_trade_no);
            }
            //订单合并支付场景状态采样
            boolean paid = trade.getTradeState().getPayState() == PayState.PAID;
            boolean cancel = trade.getTradeState().getFlowState() == NewPileFlowState.VOID;
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
//                            //同一批订单重复支付或过期作废，直接退款
                ccbpayRefundHandle(out_trade_no, trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                trade.setPayOrderNo(recordResponse.getPayOrderNo());
                trades.add(trade);
                ccbpayCallbackHandleNewPile(out_trade_no, trade_no, total_amount,
                        operator, trades, false);
            }
        }
    }


    private void ccbpayCallbackHandleNewPile(String out_trade_no, String trade_no, String total_amount,
                                              Operator operator, List<NewPileTrade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //流水号
        payTradeRecordRequest.setTradeNo(trade_no);
        //商品订单号
        payTradeRecordRequest.setBusinessId(out_trade_no);
        payTradeRecordRequest.setResult_code("SUCCESS");
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
        // payTradeRecordRequest.setChargeId(type);
        payTradeRecordRequest.setChannelItemId(32L);
        //添加交易数据（与微信共用）
        payProvider.wxPayCallBack(payTradeRecordRequest);
        payCallbackOnlineNewPile(trades, operator, isMergePay);
        log.info("支付回调成功,单号：{}", out_trade_no);
    }

    /**
     * 建行退款处理
     *
     * @param out_trade_no
     * @param trade_no
     * @param total_amount
     */
    private void ccbpayRefundHandle(String out_trade_no, String trade_no, String total_amount) {
        CcbRefundRequest request = CcbRefundRequest.builder().payTrnNo(trade_no).custRfndTrcno("R" + out_trade_no).rfndAmt(new BigDecimal(total_amount)).build();
        log.info("refundRequest ==== {}", JSONObject.toJSONString(request));
        Object object = ccbPayProvider.ccbPayRefund(request);
        if (object != null) {
            log.info("建行重复支付、超时订单退款,单号：{}", out_trade_no);
            log.info("建行重复支付、超时订单退款,返回消息：{}", JSONObject.toJSONString(object));
        } else {
            log.info("建行重复支付、超时订单退款失败，单号：{}" + out_trade_no);
        }
    }

    public void ccbPayOnline(PayTradeRecordResponse recordResponse,
                          PayCallBackResult payCallBackResult,
                          boolean isMergePay,
                          String out_trade_no,
                          String trade_no,
                          String total_amount, Operator operator) {
        List<Trade> trades = new ArrayList<>();
        if (isMergePay) {
            /*
             * 合并支付
             * 查询订单是否已支付或过期作废
             */
            trades = tradeService.detailsByParentId(out_trade_no);
            //订单合并支付场景状态采样
            boolean paid =
                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
            boolean cancel =
                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);


            log.info("carryOut-------------->" + JSONObject.toJSONString(trades));
            //订单的支付渠道。17、18、19是我们自己对
            //   接的支付宝渠道， 表：pay_channel_item
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
                //重复支付，直接退款
                ccbpayRefundHandle(out_trade_no, trade_no,total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                for (Trade trade : trades) {
                    trade.setPayOrderNo(recordResponse.getPayOrderNo());
                }
                ccbpayCallbackHandle(out_trade_no, trade_no, total_amount,
                        operator, trades, true);
            }
        } else {
            //单笔支付
            //单笔支付
            Trade trade = new Trade();
            log.info("isMergePay--false---isTailPayOrder(out_trade_no)------->" + JSONObject.toJSONString(isTailPayOrder(out_trade_no)));
            if (isTailPayOrder(out_trade_no)) {
                trade =
                        tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
            } else {
                trade = tradeService.detail(out_trade_no);
            }
            log.info("isMergePay--false---------->" + JSONObject.toJSONString(trade));
            //订单合并支付场景状态采样
            boolean paid = trade.getTradeState().getPayState() == PayState.PAID;
            boolean cancel = trade.getTradeState().getFlowState() == FlowState.VOID;
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
//                            //同一批订单重复支付或过期作废，直接退款
                ccbpayRefundHandle(out_trade_no, trade_no, total_amount);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                trade.setPayOrderNo(recordResponse.getPayOrderNo());
                trades.add(trade);
                ccbpayCallbackHandle(out_trade_no, trade_no, total_amount,
                        operator, trades, false);
            }
        }
    }

    private void ccbpayCallbackHandle(String out_trade_no, String trade_no, String total_amount,
                                        Operator operator, List<Trade> trades, boolean isMergePay) {
        //异步回调添加交易数据
        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
        //流水号
        payTradeRecordRequest.setTradeNo(trade_no);
        //商品订单号
        payTradeRecordRequest.setBusinessId(out_trade_no);
        payTradeRecordRequest.setResult_code("SUCCESS");
        payTradeRecordRequest.setPracticalPrice(new BigDecimal(total_amount));
        // payTradeRecordRequest.setChargeId(type);
        payTradeRecordRequest.setChannelItemId(32L);
        //添加交易数据（与微信共用）
        log.info("cupspayCallbackHandle-------------->" + JSONObject.toJSONString(trades));
        payProvider.wxPayCallBack(payTradeRecordRequest);

        payCallbackOnline(trades, operator, isMergePay);
        log.info("支付回调成功,单号：{}", out_trade_no);
    }

    /**
     * @param recordResponse
     * @param payCallBackResult
     * @param isMergePay
     * @param out_trade_no
     * @param trade_no          //银联交易号
     * @param total_amount      //订单金额
     * @param type              //支付终端类型
     * @param operator
     */
    private void carryOutNewPile(String payOrderNo, PayTradeRecordResponse recordResponse,
                                 PayCallBackResult payCallBackResult,
                                 boolean isMergePay,
                                 String out_trade_no,
                                 String trade_no,
                                 String total_amount, String type, Operator operator,PayGatewayEnum payGatewayEnum) {
        List<NewPileTrade> trades = new ArrayList<>();
        if (isMergePay) {
            /*
             * 合并支付
             * 查询订单是否已支付或过期作废
             */
            trades = newPileTradeService.detailsByParentId(out_trade_no);
            //订单合并支付场景状态采样
            boolean paid =
                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
            boolean cancel =
                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == NewPileFlowState.VOID);
            //订单的支付渠道。17、18、19是我们自己对
            //   接的支付宝渠道， 表：pay_channel_item
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
                //重复支付，直接退款
                cupspayRefundHandle(out_trade_no, total_amount, payOrderNo, payGatewayEnum);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                for (NewPileTrade trade : trades) {
                    trade.setPayOrderNo(recordResponse.getPayOrderNo());
                }
                cupspayCallbackHandleNewPile(out_trade_no, trade_no, total_amount, type,
                        operator, trades, true);
            }
        } else {
            //单笔支付
            //单笔支付
            NewPileTrade trade = new NewPileTrade();
            if (isTailPayOrder(out_trade_no)) {
                trade =
                        newPileTradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
            } else {
                trade = newPileTradeService.detail(out_trade_no);
            }
            //订单合并支付场景状态采样
//            boolean paid = trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
//            boolean cancel = trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == NewPileFlowState.VOID);

            boolean paid = trade.getTradeState().getPayState() == PayState.PAID;
            boolean cancel = trade.getTradeState().getFlowState() == NewPileFlowState.VOID;
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
//                            //同一批订单重复支付或过期作废，直接退款
                cupspayRefundHandle(out_trade_no, total_amount, payOrderNo, payGatewayEnum);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                trade.setPayOrderNo(recordResponse.getPayOrderNo());
                trades.add(trade);
                cupspayCallbackHandleNewPile(out_trade_no, trade_no, total_amount, type,
                        operator, trades, false);
            }
        }
    }


    /**
     * @param recordResponse
     * @param payCallBackResult
     * @param isMergePay
     * @param out_trade_no
     * @param trade_no          //银联交易号
     * @param total_amount      //订单金额
     * @param type              //支付终端类型
     * @param operator
     */
    private void carryOut(String payOrderNo, PayTradeRecordResponse recordResponse,
                          PayCallBackResult payCallBackResult,
                          boolean isMergePay,
                          String out_trade_no,
                          String trade_no,
                          String total_amount, String type, Operator operator,PayGatewayEnum payGatewayEnum) {
        List<Trade> trades = new ArrayList<>();
        if (isMergePay) {
            /*
             * 合并支付
             * 查询订单是否已支付或过期作废
             */
            trades = tradeService.detailsByParentId(out_trade_no);
            //订单合并支付场景状态采样
            boolean paid =
                    trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
            boolean cancel =
                    trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);


            log.info("carryOut-------------->" + JSONObject.toJSONString(trades));
            //订单的支付渠道。17、18、19是我们自己对
            //   接的支付宝渠道， 表：pay_channel_item
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
                //重复支付，直接退款
                // alipayRefundHandle(out_trade_no, total_amount);
                cupspayRefundHandle(out_trade_no, total_amount,payOrderNo,payGatewayEnum);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                for (Trade trade : trades) {
                    trade.setPayOrderNo(recordResponse.getPayOrderNo());
                }
                cupspayCallbackHandle(out_trade_no, trade_no, total_amount, type,
                        operator, trades, true);
            }
        } else {
            //单笔支付
            //单笔支付
            Trade trade = new Trade();
            log.info("isMergePay--false---isTailPayOrder(out_trade_no)------->" + JSONObject.toJSONString(isTailPayOrder(out_trade_no)));
            if (isTailPayOrder(out_trade_no)) {
                trade =
                        tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
            } else {
                trade = tradeService.detail(out_trade_no);
            }
            log.info("isMergePay--false---------->" + JSONObject.toJSONString(trade));
            //订单合并支付场景状态采样
//            boolean paid = trades.stream().anyMatch(i -> i.getTradeState().getPayState() == PayState.PAID);
//            boolean cancel = trades.stream().anyMatch(i -> i.getTradeState().getFlowState() == FlowState.VOID);

            boolean paid = trade.getTradeState().getPayState() == PayState.PAID;
            boolean cancel = trade.getTradeState().getFlowState() == FlowState.VOID;
            if (cancel || (paid && !recordResponse.getTradeNo().equals(trade_no))) {
//                            //同一批订单重复支付或过期作废，直接退款
                cupspayRefundHandle(out_trade_no, total_amount, payOrderNo, payGatewayEnum);
            } else if (payCallBackResult.getResultStatus() != PayCallBackResultStatus.SUCCESS) {
                trade.setPayOrderNo(recordResponse.getPayOrderNo());
                trades.add(trade);
                cupspayCallbackHandle(out_trade_no, trade_no, total_amount, type,
                        operator, trades, false);
            }
        }
    }

    private String getLockName(Boolean isMergePay, String out_trade_no) {

        String lockName = "";
        //新版本囤货
        if (out_trade_no.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID)) {
            //非组合支付，则查出该单笔订单。
            //非组合支付，则查出该单笔订单。
            if (!isMergePay) {
                NewPileTrade trade = new NewPileTrade();
                if (isTailPayOrder(out_trade_no)) {
                    trade = newPileTradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
                } else {
                    trade = newPileTradeService.detail(out_trade_no);
                }
                // 锁资源：无论是否组合支付，都锁父单号，确保串行回调
                lockName = trade.getParentId();
            } else {
                lockName = out_trade_no;
            }
        } else {
            //非组合支付，则查出该单笔订单。
            //非组合支付，则查出该单笔订单。
            if (!isMergePay) {
                Trade trade = new Trade();
                if (isTailPayOrder(out_trade_no)) {
                    trade =
                            tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(out_trade_no).build()).get(0);
                } else {
                    trade = tradeService.detail(out_trade_no);
                }
                // 锁资源：无论是否组合支付，都锁父单号，确保串行回调
                lockName = trade.getParentId();
            } else {
                lockName = out_trade_no;
            }
        }
        return lockName;
    }

    /**
     * 银联退款处理
     *
     * @param out_trade_no
     * @param total_amount
     */
    private void cupspayRefundHandle(String out_trade_no, String total_amount,String payOrderNo,PayGatewayEnum payGatewayEnum) {

        //走银联退款接口
        GatewayConfigByGatewayRequest gatewayConfigByGatewayRequest = new GatewayConfigByGatewayRequest();
        gatewayConfigByGatewayRequest.setGatewayEnum(payGatewayEnum);
        gatewayConfigByGatewayRequest.setStoreId(Constants.BOSS_DEFAULT_STORE_ID);
        //查询银联配置信息
        PayGatewayConfigResponse payGatewayConfigResponse =
                payQueryProvider.getGatewayConfigByGateway(gatewayConfigByGatewayRequest).getContext();
        CupsPayRefundDataRequest refundRequest = CupsPayRefundDataRequest.builder().build();
        refundRequest.setOrderNo(out_trade_no);
        refundRequest.setRefundOrderId("R" + out_trade_no);
        BigDecimal tatalAmout = new BigDecimal(total_amount).divide(new BigDecimal("100"));
        refundRequest.setAmount(String.valueOf(tatalAmout));
        refundRequest.setPayOrderNo(payOrderNo);
        Long channelId = payGatewayEnum == PayGatewayEnum.CUPSWECHAT ? 30L : 29L;
        refundRequest.setChannelId(channelId);
        refundRequest.setAppId(payGatewayConfigResponse.getAppId());
        refundRequest.setApiKey(payGatewayConfigResponse.getApiKey());
        refundRequest.setDesc("重复支付退款");

        /*CupsPayRefundDataRequest refundRequest = CupsPayRefundDataRequest.builder().build();
        refundRequest.setOrderNo(out_trade_no);
        refundRequest.setRefundOrderId(response.getTradeNo());
        refundRequest.setAmount(total_amount);
        refundRequest.setChannelId(response.getChannelItemId());
        refundRequest.setDesc("重复支付退款");*/
        log.info("refundRequest ==== {}", JSONObject.toJSONString(refundRequest));
        Object object = cupsPayProvider.cupsPayRefund(refundRequest);
        if (object != null) {
            log.info("银联重复支付、超时订单退款,单号：{}", out_trade_no);
            log.info("银联重复支付、超时订单退款,返回消息：{}", JSONObject.toJSONString(object));
        } else {
            log.info("银联重复支付、超时订单退款失败，单号：{}" + out_trade_no);
        }
    }

//    /**
//     * 余额支付
//     */
//    @Transactional
//    @LcnTransaction
//    public void walletPay(WalletPayRequest request) {
//
//        CustomerWalletVO customerWalletVO = customerWalletQueryProvider.getBalanceByCustomerId(
//                WalletByCustomerIdQueryRequest
//                        .builder()
//                        .customerId(request.getCustomerId())
//                        .build()).getContext().getCustomerWalletVO();
//
//        Trade detail = tradeService.detail(request.getTid());
//
//        if (Objects.nonNull(request.getParentId())) {
//            detail = tradeService.detailByParentId(request.getParentId());
//        }
//
//        CustomerGetByIdRequest customerGetByIdRequest = new CustomerGetByIdRequest();
//        customerGetByIdRequest.setCustomerId(request.getCustomerId());
//        CustomerGetByIdResponse customer = customerQueryProvider.getCustomerById(customerGetByIdRequest).getContext();
//
//        /**账户余额不足*/
//        if (customerWalletVO == null || customerWalletVO.getBalance().compareTo(detail.getTradePrice().getTotalPrice()) == -1) {
//            throw new SbcRuntimeException("K-190001");
//        }
//        /**订单和用户对应不上*/
//        if (!request.getCustomerId().equals(detail.getBuyer().getId())) {
//            throw new SbcRuntimeException("K-050100", new Object[]{detail.getId()});
//        }
//
//        log.info("oldCustomerWalletVO {}", customerWalletVO);
//
//        /**订单相关逻辑*/
//        String businessId = Objects.isNull(detail.getParentId()) ? detail.getId() : detail.getParentId();
//        boolean isMergePay = isMergePayOrder(businessId);
//
//        PayGatewayConfigResponse payGatewayConfig = payQueryProvider.getGatewayConfigByGateway(new
//                GatewayConfigByGatewayRequest(PayGatewayEnum.BALANCE, Constants.BOSS_DEFAULT_STORE_ID)).getContext();
//
//        //分布式锁，防止同一订单重复回调
//        RLock rLock = redissonClient.getFairLock(businessId);
//        rLock.lock();
//
//        List<Trade> trades = null;
//        try {
//            trades = new ArrayList<>();
//            //查询支付记录
//            WalletRecordResponse context = walletRecordProvider.getWalletRecordByRelationOrderId(QueryWalletRecordByRelationOrderIdRequest
//                            .builder().relationOrderId(detail.getId()).build())
//                    .getContext();
//            if (isMergePay) {
//                /*
//                 * 合并支付
//                 * 查询订单是否已支付或过期作废
//                 */
//                trades = tradeService.detailsByParentId(businessId);
//                //订单合并支付场景状态采样
//                //余额扣除成功
//                if (context == null || Objects.isNull(context.getWalletRecordVO())) {
//                    /**扣除账户余额*/
//                    TradePrice tradePrice = detail.getTradePrice();
//                    if (customerWalletVO.getRechargeBalance().compareTo(tradePrice.getTotalPrice()) == Constants.yes) {
//
//                        customerWalletVO.setRechargeBalance(customerWalletVO.getRechargeBalance().subtract(tradePrice.getTotalPrice()));
//                        customerWalletVO.setBalance(customerWalletVO.getBalance().subtract(tradePrice.getTotalPrice()));
//                    } else {
//                        BigDecimal subtract = tradePrice.getTotalPrice().subtract(customerWalletVO.getRechargeBalance());
//                        //充值余额 = 下单金额
//                        if (subtract.compareTo(BigDecimal.ZERO) == 0) {
//                            customerWalletVO.setRechargeBalance(customerWalletVO.getRechargeBalance().subtract(tradePrice.getTotalPrice()));
//                            customerWalletVO.setBalance(customerWalletVO.getBalance().subtract(tradePrice.getTotalPrice()));
//                        } else {
//                            customerWalletVO.setRechargeBalance(BigDecimal.ZERO);
//                            customerWalletVO.setGiveBalance(customerWalletVO.getGiveBalance().subtract(subtract));
//                            customerWalletVO.setBalance(customerWalletVO.getBalance().subtract(tradePrice.getTotalPrice()));
//                        }
//                    }
//
//                    log.info("newCustomerWalletVO {}", customerWalletVO);
//
//                    customerWalletProvider.updateCustomerWalletByWalletId(CustomerWalletModifyRequest.builder().customerWalletVO(customerWalletVO).build());
//                    /**新增交易记录*/
//                    //交易流水号
//                    String recordNo = generatorService.generate("W");
//                    WalletRecordVO walletRecordVO = new WalletRecordVO();
//                    walletRecordVO.setRecordNo(recordNo);
//                    walletRecordVO.setTradeRemark("余额支付");
//                    walletRecordVO.setCustomerAccount(customer.getCustomerAccount());
//                    walletRecordVO.setRelationOrderId(detail.getId());
//                    //枚举
//                    walletRecordVO.setTradeType(WalletRecordTradeType.BALANCE_PAY);
//                    walletRecordVO.setBudgetType(BudgetType.EXPENDITURE);
//                    walletRecordVO.setDealPrice(tradePrice.getTotalPrice());
//                    walletRecordVO.setChargePrice(BigDecimal.ZERO);
//                    walletRecordVO.setDealTime(LocalDateTime.now());
//                    walletRecordVO.setCurrentBalance(customerWalletVO.getBalance());
//                    walletRecordVO.setTradeState(TradeStateEnum.PAID);
//
//                    walletRecordProvider.addWalletRecord(KsBeanUtil.convert(walletRecordVO, AddWalletRecordRecordRequest.class));
//                    balancePayHandle(payGatewayConfig, recordNo, businessId, trades, true, request.getChannelType());
//                }
//            } else {
//                //单笔支付
//                Trade trade = new Trade();
//                if (isTailPayOrder(businessId)) {
//                    trade =
//                            tradeService.queryAll(TradeQueryRequest.builder().tailOrderNo(businessId).build()).get(0);
//                } else {
//                    trade = tradeService.detail(businessId);
//                }
//                if (context == null || Objects.isNull(context.getWalletRecordVO())) {
//                    /**扣除账户余额*/
//                    TradePrice tradePrice = detail.getTradePrice();
//                    if (customerWalletVO.getRechargeBalance().compareTo(tradePrice.getTotalPrice()) == Constants.yes) {
//
//                        customerWalletVO.setRechargeBalance(customerWalletVO.getRechargeBalance().subtract(tradePrice.getTotalPrice()));
//                        customerWalletVO.setBalance(customerWalletVO.getBalance().subtract(tradePrice.getTotalPrice()));
//                    } else {
//                        BigDecimal subtract = tradePrice.getTotalPrice().subtract(customerWalletVO.getRechargeBalance());
//                        //充值余额 = 下单金额
//                        if (subtract.compareTo(BigDecimal.ZERO) == 0) {
//                            customerWalletVO.setRechargeBalance(customerWalletVO.getRechargeBalance().subtract(tradePrice.getTotalPrice()));
//                            customerWalletVO.setBalance(customerWalletVO.getBalance().subtract(tradePrice.getTotalPrice()));
//                        } else {
//                            customerWalletVO.setRechargeBalance(BigDecimal.ZERO);
//                            customerWalletVO.setGiveBalance(customerWalletVO.getGiveBalance().subtract(subtract));
//                            customerWalletVO.setBalance(customerWalletVO.getBalance().subtract(tradePrice.getTotalPrice()));
//                        }
//                    }
//
//                    log.info("newCustomerWalletVO {}", customerWalletVO);
//
//                    customerWalletProvider.updateCustomerWalletByWalletId(CustomerWalletModifyRequest.builder().customerWalletVO(customerWalletVO).build());
//                    /**新增交易记录*/
//                    //交易流水号
//                    String recordNo = generatorService.generate("W");
//                    WalletRecordVO walletRecordVO = new WalletRecordVO();
//                    walletRecordVO.setRecordNo(recordNo);
//                    walletRecordVO.setTradeRemark("余额支付");
//                    walletRecordVO.setCustomerAccount(customer.getCustomerAccount());
//                    walletRecordVO.setRelationOrderId(detail.getId());
//                    //枚举
//                    walletRecordVO.setTradeType(WalletRecordTradeType.BALANCE_PAY);
//                    walletRecordVO.setBudgetType(BudgetType.EXPENDITURE);
//                    walletRecordVO.setDealPrice(tradePrice.getTotalPrice());
//                    walletRecordVO.setChargePrice(BigDecimal.ZERO);
//                    walletRecordVO.setDealTime(LocalDateTime.now());
//                    walletRecordVO.setCurrentBalance(customerWalletVO.getBalance());
//                    walletRecordVO.setTradeState(TradeStateEnum.PAID);
//                    walletRecordProvider.addWalletRecord(KsBeanUtil.convert(walletRecordVO, AddWalletRecordRecordRequest.class));
//
//                    trades.add(trade);
//                    balancePayHandle(payGatewayConfig, recordNo, businessId, trades, false, request.getChannelType());
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            //解锁
//            rLock.unlock();
//        }
//    }
//
//
//    /**
//     *
//     */
//    private void balancePayHandle(PayGatewayConfigResponse payGatewayConfig, String recordNo, String businessId, List<Trade> trades, boolean isMergePay, String channelType) {
//        //异步回调添加交易数据
//        PayTradeRecordRequest payTradeRecordRequest = new PayTradeRecordRequest();
//        //流水号
//        payTradeRecordRequest.setTradeNo(recordNo);
//        //商户订单号或父单号
//        payTradeRecordRequest.setBusinessId(businessId);
//        payTradeRecordRequest.setResult_code("SUCCESS");
//        //订单金额
//        BigDecimal totalPrice = trades.stream().map(t -> t.getTradePrice()).collect(Collectors.toList())
//                .stream().map(tp -> tp.getTotalPrice()).collect(Collectors.toList())
//                .stream().reduce(BigDecimal.ZERO, BigDecimal::add);
//        log.info("totalPrice============= {}", totalPrice);
//        payTradeRecordRequest.setPracticalPrice(totalPrice);
//        ChannelItemByGatewayRequest channelItemByGatewayRequest = new ChannelItemByGatewayRequest();
//        channelItemByGatewayRequest.setGatewayName(payGatewayConfig.getPayGateway().getName());
//        PayChannelItemListResponse payChannelItemListResponse =
//                payQueryProvider.listChannelItemByGatewayName(channelItemByGatewayRequest).getContext();
//        List<PayChannelItemVO> payChannelItemVOList =
//                payChannelItemListResponse.getPayChannelItemVOList();
//        ChannelItemSaveRequest channelItemSaveRequest = new ChannelItemSaveRequest();
//        String code = "balance_pc";
//        if (("APP").equals(channelType)) {
//            code = "balance_app";
//        } else if (("H5").equals(channelType)) {
//            code = "balance_h5";
//        }
//        channelItemSaveRequest.setCode(code);
//        payChannelItemVOList.forEach(payChannelItemVO -> {
//            if (channelItemSaveRequest.getCode().equals(payChannelItemVO.getCode())) {
//                //更新支付项
//                payTradeRecordRequest.setChannelItemId(payChannelItemVO.getId());
//            }
//        });
//        //微信支付异步回调添加交易数据
////        payProvider.wxPayCallBack(payTradeRecordRequest);
//        //订单 支付单 操作信息
//        Operator operator = Operator.builder().ip(HttpUtil.getIpAddr()).adminId("-1").name(PayGatewayEnum.BALANCE.name())
//                .account(PayGatewayEnum.BALANCE.name()).platform(Platform.THIRD).build();
//        payCallbackOnline(trades, operator, isMergePay);
//    }


//    /**
//     * 组合支付金额计算
//     */
//    private void combinationOfPay(List<Trade> tradeList,String customerId){
//        if(CollectionUtils.isEmpty(tradeList)){
//            return;
//        }
//        //查询账户余额；
//        BalanceByCustomerIdResponse context = customerWalletQueryProvider.getBalanceByCustomerId(WalletByCustomerIdQueryRequest.builder().customerId(customerId).build())
//                .getContext();
//
//        if(Objects.isNull(context) || Objects.isNull(context.getCustomerWalletVO())){
//            return;
//        }
//
//        AtomicReference<BigDecimal> balance = new AtomicReference<>(context.getCustomerWalletVO().getBalance());
//
//        if(balance.get().compareTo(BigDecimal.ZERO) < 1){
//            return;
//        }
//        tradeList.forEach(t->{
//            balance.set(balance.get().subtract(t.getTradePrice().getTotalPrice()));
//            if(balance.get().compareTo(BigDecimal.ZERO) < 1){
//                //余额为0
//                if(balance.get().compareTo(BigDecimal.ZERO) == 0){
//                    t.getTradePrice().setBalancePrice(balance.get());
//                    t.getTradePrice().setOnlinePrice(t.getTradePrice().getTotalPrice().subtract(balance.get()));
//                }else{
//                    //余额为负
//                    //获取当前使用总余额
//                    BigDecimal reduce = tradeList.stream().map(tp -> tp.getTradePrice()).collect(Collectors.toList())
//                            .stream().map(p -> p.getBalancePrice()).collect(Collectors.toList()).stream().reduce(BigDecimal.ZERO, BigDecimal::add);
//                    if(context.getCustomerWalletVO().getBalance().compareTo(reduce) == 1){
//                        BigDecimal subtract = context.getCustomerWalletVO().getBalance().subtract(reduce);
//                        t.getTradePrice().setBalancePrice(subtract);
//                        t.getTradePrice().setOnlinePrice(t.getTradePrice().getTotalPrice().subtract(subtract));
//                    }else{
//                        t.getTradePrice().setBalancePrice(BigDecimal.ZERO);
//                        t.getTradePrice().setOnlinePrice(t.getTradePrice().getTotalPrice());
//                    }
//                }
//            }else{
//                //余额充足
//                t.getTradePrice().setBalancePrice(t.getTradePrice().getTotalPrice());
//                t.getTradePrice().setOnlinePrice(BigDecimal.ZERO);
//            }
//
//            log.info("tradePrice {}", t.getTradePrice());
//        });
//    }

    /**
     * 给订单加上组合支付标识
     *
     * @param request
     */
    public void addMergePay(TradeAddMergePayRequest request) {
        if (Objects.nonNull(request)) {
            logger.info("TradeService.addMergePay tId:{} isMergePay:{}", request.getTid(), request.isMergePay());
            Trade trade = detail(request.getTid());
            if (Objects.nonNull(trade)) {
                logger.info("TradeService.addMergePay addMergePay");
                trade.getPayInfo().setMergePay(request.isMergePay());
                updateTrade(trade);
            }
        }
    }

    /**
     * 配送方式：第三方物流，收货地址为外省且满30件商品时，赠送2元/箱至客户存款;
     * @param trade
     */
//    public void giveMoneyToCustomerWallet(Trade trade){
//        long buySum = trade.getTradeItems().stream().mapToLong(t -> t.getNum()).sum();
//        boolean freightCouponFlag = DeliverWay.LOGISTICS.equals(trade.getDeliverWay()) && trade.getConsignee().getProvinceId() != 430000 && 30 <= buySum;
//        log.info("开始计算第三方物流外省赠送2元每箱，buySum:{},freightCouponFlag:{}。",buySum,freightCouponFlag);
//        if(freightCouponFlag){
//            //赠送金额
//            BigDecimal givePrice = BigDecimal.valueOf(buySum).multiply(BigDecimal.valueOf(2));
//            //根据客户id获取客户钱包信息
//            CustomerWalletVO walletVO = customerWalletQueryProvider.getBalanceByCustomerId(
//                    WalletByCustomerIdQueryRequest.builder().customerId(trade.getBuyer().getId()).build()).getContext().getCustomerWalletVO();
//            //新增交易记录
//            WalletRecordVO walletRecordVO = new WalletRecordVO();
//            if(Objects.nonNull(walletVO)){
//                walletVO.setBalance(walletVO.getBalance().add(givePrice));
//                walletVO.setGiveBalance(walletVO.getGiveBalance().add(givePrice));
//                CustomerWalletModifyRequest customerWalletModifyRequest = new CustomerWalletModifyRequest();
//                customerWalletModifyRequest.setCustomerWalletVO(walletVO);
//                customerWalletProvider.updateCustomerWalletByWalletId(customerWalletModifyRequest);
//                log.info("update customer wallet givePrice success");
//
//                walletRecordVO.setCurrentBalance(walletVO.getBalance().add(givePrice));
//                walletRecordVO.setBlockGiveBalance(walletVO.getBlockBalance());
//            }else{
//                CustomerWalletVO addWallet = new CustomerWalletVO();
//                addWallet.setBalance(givePrice);
//                addWallet.setGiveBalance(givePrice);
//                addWallet.setRechargeBalance(BigDecimal.ZERO);
//                addWallet.setCustomerAccount(trade.getBuyer().getAccount());
//                addWallet.setCustomerId(trade.getBuyer().getId());
//                addWallet.setBlockBalance(BigDecimal.ZERO);
//                addWallet.setCustomerStatus(DefaultFlag.NO);
//                addWallet.setDelFlag(DefaultFlag.NO);
//                addWallet.setCustomerName(trade.getBuyer().getName());
//                addWallet.setCreateTime(LocalDateTime.now());
//                addWallet.setCreateId(trade.getBuyer().getId());
//                addWallet.setUpdateId(trade.getBuyer().getId());
//                addWallet.setUpdateTime(LocalDateTime.now());
//                addWallet.setGiveBalanceState(DefaultFlag.NO.toValue());
//                CustomerWalletModifyRequest customerWalletModifyRequest = new CustomerWalletModifyRequest();
//                customerWalletModifyRequest.setCustomerWalletVO(addWallet);
//                customerWalletProvider.updateCustomerWalletByWalletId(customerWalletModifyRequest);
//                log.info("save customer wallet givePrice success");
//
//                walletRecordVO.setCurrentBalance(givePrice);
//                walletRecordVO.setBlockGiveBalance(BigDecimal.ZERO);
//            }
//
//            //交易流水号
//            String recordNo = generatorService.generate("W");
//            walletRecordVO.setRecordNo(recordNo);
//            walletRecordVO.setTradeRemark("订单："+trade.getId()+"，购买商品件数："+buySum+"，外省第三方物流,每件赠送2元至客户存款，总计："+givePrice+"元。");
//            walletRecordVO.setCustomerAccount(trade.getBuyer().getAccount());
//            walletRecordVO.setRelationOrderId(trade.getId());
//            //订单返现
//            walletRecordVO.setTradeType(WalletRecordTradeType.ORDER_CASH_BACK);
//            walletRecordVO.setBudgetType(BudgetType.INCOME);
//            walletRecordVO.setDealPrice(givePrice);
//            walletRecordVO.setChargePrice(BigDecimal.ZERO);
//            walletRecordVO.setRemark("提货配送方式：第三方物流，收货地址为外省且满30件商品时，赠送2元/箱至客户存款。");
//            walletRecordVO.setDealTime(LocalDateTime.now());
//            //已支付
//            walletRecordVO.setTradeState(TradeStateEnum.PAID);
//            walletRecordProvider.addWalletRecord(KsBeanUtil.convert(walletRecordVO, AddWalletRecordRecordRequest.class));
//            log.info("save wallet record givePrice success");
//        }
//    }

    /**
     * 通过订单id列表查询 有效订单
     *
     * @param ids
     * @return
     */
    public List<Trade> getListByIds(List<String> ids) {
        List<Trade> listByIdIn = tradeRepository.findListByIdIn(ids);
        List<Trade> collect = listByIdIn.stream().filter(v -> {
            if (v.getTradeState().getFlowState().equals(FlowState.VOID)) {
                return false;
            } else {
                return true;
            }
        }).collect(Collectors.toList());
        return collect;
    }

    public List<Trade> getListByIdsSimplify(List<String> ids) {
        Query query = new Query();
        query.addCriteria(Criteria.where("_id").in(ids));
        query.fields().include("tradeState");
        List<Trade> trades = mongoTemplate.find(query, Trade.class);
        List<Trade> collect = trades.stream().filter(v -> {
            if (v.getTradeState().getFlowState().equals(FlowState.VOID)) {
                return false;
            } else {
                return true;
            }
        }).collect(Collectors.toList());
        return collect;
    }

    @LcnTransaction
    @Transactional
    public void newConfirmPayOrderOffline(List<OfflineSettlementVO> payOrderIds, Operator operator) {
        List<PayOrder> offlinePayOrders = null;
        if (CollectionUtils.isEmpty(payOrderIds)) {
            throw new SbcRuntimeException("K-020002");
        }
        logger.info("TradeService.confirmPayOrderOffline payOrderId：{} realPay：{}", payOrderIds.get(0).getPayOrderId(), payOrderIds.get(0).getRealPay());
        // 页面不区分线上付款还是线下付款，都会传过来，这里先过滤一遍，得到线下付款的
        List<String> offlinePayOrderId = new ArrayList<>();
        offlinePayOrderId.add(payOrderIds.get(0).getPayOrderId());
        List<PayOrder> payOrders = payOrderRepository.findByPayOrderIds(offlinePayOrderId);

        if (!CollectionUtils.isEmpty(payOrders)) {
            offlinePayOrders = payOrders.stream().filter(payOrder -> payOrder.getPayType() == PayType.OFFLINE)
                    .collect(Collectors.toList());
            List<String> payOrderIdList = offlinePayOrders.stream().map(PayOrder::getPayOrderId).collect(Collectors.toList());
            // 修改订单状态->
            Criteria criteria = Criteria.where("payOrderId").in(payOrderIdList);
            List<NewPileTrade> newPileTrades = mongoTemplate.find(Query.query(criteria), NewPileTrade.class);
            for (NewPileTrade newPileTrade : newPileTrades) {
                NewPileTradeState tradeState = newPileTrade.getTradeState();
                tradeState.setFlowState(NewPileFlowState.PILE);
                tradeState.setPayState(PayState.PAID);
                newPileTrade.setTradeState(tradeState);
                newPileTradeService.updateTrade(newPileTrade);
            }
            // 修改订单支付状态
//            payOrderRepository.updatePayOrderStatus(payOrderIdList, PayOrderStatus.PAYED);
            payOrderRepository.updatePayOrderStatusAmountRealPay(payOrderIdList.get(0), PayOrderStatus.PAYED, payOrderIds.get(0).getRealPay());
        }
        Optional.ofNullable(offlinePayOrders).ifPresent(payOrderVOS -> payOrderVOS.forEach(e -> {
            newPileTradeService.payCallBack(e.getOrderCode(), e.getPayOrderPrice(), operator, PayWay.CASH);
        }));
        //ares埋点-订单-用户线下支付订单,商家确认
        //orderAresService.dispatchFunction("offlinePayOrder", payOrders, LocalDateTime.now());
    }


    public boolean ticketsFormPushPayOrderKingdee(TicketsFormPushPayOrderKingdeeRequest ticketsFormPushPayOrderKingdee) {
        for (TicketsFormQueryVO vo : ticketsFormPushPayOrderKingdee.getTicketsForms()) {
            boolean bool = returnOrderService.ticketsFormPushPayOrderKingdee(vo, ticketsFormPushPayOrderKingdee.getPayType());
            log.info("ticketsFormPushPayOrderKingdee:{}", bool);
//            if (bool) {
//                vo.setRecordNo(vo.getRecordNo() + "1");
//                bool = returnOrderService.ticketsFormPushPayOrderKingdee(vo, "offlinepay");
//                log.info("ticketsFormPushPayOrderKingdee1:{}", bool);
//            }
        }
        return true;
    }

    public boolean balanceFormPushPayOrderKingdee(AddWalletRecordRequest addWalletRecordRequest) {
        return returnOrderService.balanceFormPushPayOrderKingdee(addWalletRecordRequest);
    }

    public Trade getById(String tid) {
        return tradeRepository.findById(tid).orElseGet(Trade::new);
    }

    public boolean checkIsPicking(String tid) {
        if (Objects.nonNull(tid)) {
            Trade trade = tradeRepository.findById(tid).orElse(null);
            if (Objects.nonNull(trade) && FlowState.AUDIT == trade.getTradeState().getFlowState()) {
                OrderPicking orderPicking = orderPickingRepository.findByTradeId(tid).orElse(null);
                return Objects.nonNull(orderPicking) && Objects.equals(1, orderPicking.getStatus());
            }
        }
        return false;
    }


    /**
     * @description  多规格启用日期查询
     * @author  shiy
     * @date    2023/5/12 9:27
     * @params  []
     * @return  java.time.LocalDateTime
     */
    public LocalDateTime getMultiSpeciStartTime(){
        LocalDateTime start_dt = LocalDateTime.of(2099,5,17,0,0,0);
        try {
            String contextValue = systemConfigQueryProvider.list(SystemConfigQueryRequest.builder().configKey("order_setting")
                    .configType("order_setting_multi_speci_start_time").delFlag(DeleteFlag.NO).build()).getContext().getSystemConfigVOList().get(0).getContext();
            start_dt = DateUtil.parse(contextValue,DateUtil.FMT_TIME_1);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return start_dt;
    }

    public List<OrderRecommendCount> recommendTypeByCustomerIdAndCompanyInfo(TradeListAllRequest tradeListAllRequest) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(30, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator( Criteria.where("tradeState.payState").is("PAID"),Criteria.where("tradeState.createTime").gte(justTime)
                ,
                Criteria.where("supplier.supplierId").is(tradeListAllRequest.getTradeQueryDTO().getSupplierId())
                ,Criteria.where("buyer._id").is(tradeListAllRequest.getTradeQueryDTO().getBuyerId())
        );
        //创建aggreation
       Aggregation aggregation = Aggregation.newAggregation(Aggregation.match(criteria),
               Aggregation.group("tradeItems.skuId").count().as("count"),
               Aggregation. sort(new Sort(Sort.Direction.DESC,"count")));
        AggregationResults<OrderRecommendCount> sd = mongoTemplate.aggregate(aggregation, "trade", OrderRecommendCount.class);
        List<OrderRecommendCount> orderSalesRankings = Lists.newArrayList(sd);
        return orderSalesRankings;



    }


    public List<OrderRecommendCount> recommendTypeGetCustomerId() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(30, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator( Criteria.where("tradeState.payState").is("PAID"),Criteria.where("tradeState.createTime").gte(justTime)
        );
        //创建aggreation
        Aggregation aggregation = Aggregation.newAggregation(Aggregation.match(criteria),
                Aggregation.group("buyer._id"));
        AggregationResults<OrderRecommendCount> sd = mongoTemplate.aggregate(aggregation, "trade", OrderRecommendCount.class);

        List<OrderRecommendCount> mappedResults = sd.getMappedResults();
        List<OrderRecommendCount> newList=new ArrayList<>();
        for (OrderRecommendCount or:mappedResults) {
            for (String s:or.get_id()) {
                or.setUserId(s);
                newList.add(or);
            }
        }
        return newList;



    }
//    /**
//     * 向金蝶push支付单
//     */
//    public Boolean ticketsFormPushPayOrderKingdee(TicketsFormQueryVO ticketsForms, String  payType) {
//        logger.info("ticketsFormPushPayOrderKingdee.pushPayOrderKingdee req {}", JSONObject.toJSONString(ticketsForms));
//        Boolean resultState = false;
//        //查询支付记录中是否有支付单
//        TradePushKingdeePayOrder tradePushKingdeePayOrder = new TradePushKingdeePayOrder();
//        tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.CREATE.toStatus());
//        Integer number = tradePushKingdeePayRepository.selectPushKingdeePayOrderNumber(ticketsForms.getRecordNo());
//        try {
//            KingdeePayOrder payOrder = new KingdeePayOrder();
//            payOrder.setFDate(DateUtil.nowDate());
//            payOrder.setOrderNumber(ticketsForms.getRecordNo());
//            Map FCustId = new HashMap();
//            FCustId.put("FNumber", ticketsForms.getCustomerWallet().getCustomerAccount());
//            payOrder.setFCustId(FCustId);
//            Map FPAYORGID = new HashMap();
//            FPAYORGID.put("FNumber", kingdeeOrganization);
//            payOrder.setFPAYORGID(FPAYORGID);//收款组织
//            //收款方式
//            payOrder.setFColType("线上");
//            List<KingdeePayOrderSettlement> freceivebillentry = new ArrayList<>();
//            KingdeePayOrderSettlement payOrderSettlement = new KingdeePayOrderSettlement();
//            Map FSETTLETYPEID = new HashMap();
//            FSETTLETYPEID.put("FNumber", payType);
//
//            /**
//             *
//             * 结算方式需要修改
//             * */
//            payOrderSettlement.setFSETTLETYPEID(FSETTLETYPEID);//结算方式
//            payOrderSettlement.setFRECTOTALAMOUNTFOR(ticketsForms.getArrivalPrice().toString());
//
//
//            //销售订单号
//            payOrderSettlement.setF_ora_YDDH(ticketsForms.getRecordNo());
//
//            //使用银行卡,先下支付不用传银行卡，是先下支付trade.getPayWay()为空
//            Map FACCOUNTID = new HashMap();
//            FACCOUNTID.put("FNumber", "103");
//            payOrderSettlement.setFACCOUNTID(FACCOUNTID);
//            //线下支付将收款银行信息推到金蝶
//            freceivebillentry.add(payOrderSettlement);
//            payOrder.setFRECEIVEBILLENTRY(freceivebillentry);
//
//            //登录财务系统
//            Map<String, Object> requestLogMap = new HashMap<>();
//            requestLogMap.put("user", kingdeeUser);
//            requestLogMap.put("pwd", kingdeePwd);
//            String loginToken = kingdeeLoginUtils.userLoginKingdee(requestLogMap, loginUrl);
//            if (StringUtils.isNotEmpty(loginToken)) {
//                //提交财务单
//                Map<String, Object> requestMap = new HashMap<>();
//                requestMap.put("Model", payOrder);
//                log.info("ticketsFormPushPayOrderKingdee收款单推金蝶---实际推送内容-->" + JSONObject.toJSONString(payOrder));
//                HttpCommonResult httpCommonResult = HttpCommonUtil.postHeader(payUrl, requestMap, loginToken);
//                KingDeeResult kingDeeResult = JSONObject.parseObject(httpCommonResult.getResultData(), KingDeeResult.class);
//                logger.info("ticketsFormPushPayOrderKingdee.pushPayOrderKingdee result1:{} code:{}", httpCommonResult.getResultData(), kingDeeResult.getCode());
//                if (Objects.nonNull(kingDeeResult) && kingDeeResult.getCode().equals("0")) {
//                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.PUSHSUCCESS.toStatus());
//                    resultState = true;
//                } else {
//                    tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
//                }
//                tradePushKingdeePayOrder.setInstructions(httpCommonResult.getResultData());
//            } else {
//                logger.error("ticketsFormPushPayOrderKingdee.pushPayOrderKingdee push kingdee error");
//                String res = "金蝶登录失败";
//                tradePushKingdeePayOrder.setInstructions(res);
//                tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
//            }
//        } catch (Exception e) {
//            logger.error("TradeService.pushPayOrderKingdee error:{}", e);
//            String res = "金蝶推送失败";
//            tradePushKingdeePayOrder.setInstructions(res);
//            tradePushKingdeePayOrder.setPushStatus(PushKingdeeStatusEnum.FAILEDPUSH.toStatus());
//        } finally {
//
//            if (number == 0) {
//                tradePushKingdeePayOrder.setPayCode(ticketsForms.getRecordNo());
//                tradePushKingdeePayOrder.setOrderCode(ticketsForms.getRecordNo());
//                tradePushKingdeePayOrder.setPayType("0");
//                tradePushKingdeePayOrder.setCreateTime(LocalDateTime.now());
//                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
//                tradePushKingdeePayOrder.setPracticalPrice(ticketsForms.getArrivalPrice());
//                tradePushKingdeePayRepository.saveAndFlush(tradePushKingdeePayOrder);
//            } else {
//                tradePushKingdeePayOrder.setUpdateTime(LocalDateTime.now());
//                tradePushKingdeePayOrder.setPayCode(ticketsForms.getRecordNo());
//                tradePushKingdeePayRepository.updatePushKingdeePayOrderState(tradePushKingdeePayOrder);
//            }
//            return resultState;
//        }
//    }

    private String getOrderNoByPayOrderNo(String payOrderNo){
        PayTradeRecordRequest recordRequest = new PayTradeRecordRequest();
        recordRequest.setPayOrderNo(payOrderNo);
        PayTradeRecordResponse payOrderResponse =  payQueryProvider.findByPayOrderNo(recordRequest).getContext();
        return payOrderResponse.getBusinessId();
    }

    private static boolean needLockStock(String tid) {
        return !(StringUtils.isNotEmpty(tid) && (
                tid.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_ID)
                        || tid.startsWith(GeneratorService._NEW_PILE_PREFIX_TRADE_PK_ID)
        )
        );
    }

    public TradeCheckResponse checkTrade(TradeCheckRequest req) {
        //商家入驻组合囤货不进检查流程
        if ((!needLockStock(req.getTid())) || (!needLockStock(req.getParentTid()))) {
            TradeCheckResponse resp = new TradeCheckResponse();
            resp.setType(0);
            resp.setCheckPure(null);
            return resp;
        }

        //获取订单信息
        List<TradeVO> tradeVOs = new ArrayList<>();
        if (StringUtils.isNotBlank(req.getTid())) {
            tradeVOs.add(tradeQueryProvider.getOrderById(TradeGetByIdRequest.builder().tid(req.getTid()).build()).getContext().getTradeVO());
        } else {
            tradeVOs = tradeQueryProvider.getOrderListByParentId(new TradeListByParentIdRequest(req.getParentTid()))
                    .getContext().getTradeVOList();
        }

        if (CollectionUtils.isEmpty(tradeVOs)) {
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "checkTrade 未查询到订单集合");
        }

        int resultCode = verifyService.verifyInvalidMarketingsByTrades(tradeVOs);
        if (resultCode > 0) {
            TradeCheckResponse resp = new TradeCheckResponse();
            resp.setType(resultCode);
            resp.setCheckPure(null);
            return resp;
        }

        List<DevanningGoodsInfoPureVO> checkPure = Lists.newArrayList();
        for (TradeVO tradeVO : tradeVOs) {//检查是否为库存锁定状态，已锁定时，无需检查
            BaseResponse<Boolean> checkLockResp = goodsInfoProvider.checkIsLocked(tradeVO.getId());
            if (checkLockResp.getContext()) {
                continue;
            }
            StockAndPureChainNodeRequeest request = new StockAndPureChainNodeRequeest();
            request.setWareId(tradeVO.getWareId());
            request.setProvinceId(tradeVO.getConsignee().getProvinceId());
            request.setCityId(tradeVO.getConsignee().getCityId());
            request.setCustomerId(tradeVO.getBuyer().getId());
            request.setIsmysql(false);
            request.setNeedCheack(false);
            request.setSubType(tradeVO.getSaleType() == SaleType.BULK ? 4 : 0);

            request.setCheckPure(convertTradeItemsToDevanningVO(tradeVO, tradeVO.getTradeItems()));
            request.setTid(tradeVO.getId());
            checkPure.addAll(purchaseService.checkStockPurchase(request).getCheckPure());
        }

        if (CollectionUtils.isNotEmpty(checkPure)) {
            TradeCheckResponse resp = new TradeCheckResponse();
            resp.setType(4);
            resp.setCheckPure(checkPure);
            return resp;
        }
        return new TradeCheckResponse();
    }

    private List<DevanningGoodsInfoMarketingVO> convertTradeItemsToDevanningVO(TradeVO tradeVO, List<TradeItemVO> tradeItems) {
        if (CollectionUtils.isEmpty(tradeItems)) {
            return Collections.emptyList();
        }

        return tradeItems.stream().map(item -> {
            DevanningGoodsInfoMarketingVO vo = new DevanningGoodsInfoMarketingVO();
            vo.setDevanningId(item.getDevanningId());
            vo.setGoodsInfoId(item.getSkuId());
            vo.setGoodsId(item.getSpuId());
            vo.setGoodsInfoName(item.getSkuName());
            vo.setGoodsInfoNo(item.getSkuNo());
            vo.setErpGoodsInfoNo(item.getErpSkuNo());
            vo.setSaleType(tradeVO.getSaleType().toValue());
//            vo.setDevanningUnit(item.getDe);
            vo.setGoodsInfoImg(item.getPic());
//            vo.setGoodsInfoBarcode("");
//            vo.setIsScatteredQuantitative(0);
//            vo.setGoodsInfoQrcode("");
//            vo.setStock(new BigDecimal("0"));
//            vo.setLockStock(new BigDecimal("0"));
//            vo.setVirtualStock(0L);
//            vo.setAllMarketPrice(new BigDecimal("0"));
//            vo.setAllVipPrice(new BigDecimal("0"));
//            vo.setMarketPrice(new BigDecimal("0"));
//            vo.setSupplyPrice(new BigDecimal("0"));
            vo.setDivisorFlag(item.getDivisorFlag());
//            vo.setRetailPrice(new BigDecimal("0"));
//            vo.setGrouponPrice(new BigDecimal("0"));
//            vo.setCostPrice(new BigDecimal("0"));
//            vo.setVipPrice(new BigDecimal("0"));
//            vo.setCreateTime(LocalDateTime.now());
//            vo.setUpdateTime(LocalDateTime.now());
//            vo.setAddedTime(LocalDateTime.now());
//            vo.setDelFlag(DeleteFlag.NO);
//            vo.setAddedFlag(0);
//            vo.setCheckedAddedFlag(0);
//            vo.setInquiryFlag(0);
//            vo.setCompanyInfoId(0L);
//            vo.setStoreId(0L);
//            vo.setStoreName("");
//            vo.setCustomFlag(0);
//            vo.setLevelDiscountFlag(0);
//            vo.setAuditStatus(CheckStatus.WAIT_CHECK);
//            vo.setCompanyType(CompanyType.PLATFORM);
//            vo.setAloneFlag(false);
//            vo.setSalePrice(new BigDecimal("0"));
//            vo.setPriceType(0);
//            vo.setMockSpecIds(Lists.newArrayList());
//            vo.setMockSpecDetailIds(Lists.newArrayList());
//            vo.setSpecDetailRelIds(Lists.newArrayList());
            vo.setBuyCount(item.getNum());
            vo.setBigBuyCount(item.getDivisorFlag().multiply(BigDecimal.valueOf(item.getNum())));
//            vo.setCount(0L);
//            vo.setMaxCount(0L);
//            vo.setIntervalPriceIds(Lists.newArrayList());
//            vo.setSpecText("");
//            vo.setIntervalMinPrice(new BigDecimal("0"));
//            vo.setIntervalMaxPrice(new BigDecimal("0"));
//            vo.setValidFlag(0);
//            vo.setCateId(0L);
//            vo.setCateName("");
//            vo.setBrandId(0L);
//            vo.setStoreCateIds(Lists.newArrayList());
//            vo.setDistributionCommission(new BigDecimal("0"));
//            vo.setCommissionRate(new BigDecimal("0"));
//            vo.setDistributionSalesCount(0);
//            vo.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
//            vo.setDistributionGoodsAuditReason("");
//            vo.setChecked(false);
//            vo.setGoodsStatus(GoodsStatus.OK);
//            vo.setGoodsUnit("");
//            vo.setMarketingLabels(Lists.newArrayList());
//            vo.setGrouponLabel(new GrouponLabelVO());
//            vo.setCouponLabels(Lists.newArrayList());
//            vo.setGoodsCubage(new BigDecimal("0"));
//            vo.setGoodsWeight(new BigDecimal("0"));
//            vo.setFreightTempId(0L);
//            vo.setSaleType(0);
//            vo.setAllowPriceSet(0);
//            vo.setSmallProgramCode("");
//            vo.setJoinDistributior(0);
//            vo.setGoodsEvaluateNum(0L);
//            vo.setGoodsCollectNum(0L);
//            vo.setGoodsSalesNum(0L);
//            vo.setGoodsFavorableCommentNum(0L);
//            vo.setEnterPrisePrice(new BigDecimal("0"));
//            vo.setEnterPriseAuditState(EnterpriseAuditState.INIT);
//            vo.setEnterPriseGoodsAuditReason("");
//            vo.setGoods(new GoodsVO());
//            vo.setProviderGoodsInfoId("");
//            vo.setProviderId(0L);
//            vo.setGoodsSource(0);
//            vo.setEnterpriseStatusXyy(0);
//            vo.setGoodsInfoBatchNo("");
//            vo.setSpecialPrice(new BigDecimal("0"));
//            vo.setGoodsWareStocks(Lists.newArrayList());
//            vo.setGoodsInfoType(0);
//            vo.setAddStep(new BigDecimal("0"));
//            vo.setKeyWords("");
//            vo.setSortNumKey(0);
//            vo.setSortNumCate(0);
//            vo.setShelflife(0L);
//            vo.setGoodsSubtitle("");
//            vo.setIsCheck(DefaultFlag.NO);
//            vo.setRoomId(0L);
//            vo.setLiveStartTime(LocalDateTime.now());
//            vo.setLiveEndTime(LocalDateTime.now());
//            vo.setTerminationFlag(BoolFlag.NO);
//            vo.setGoodsLabels(Lists.newArrayList());
//            vo.setOrigin("");
//            vo.setOriginCode(0L);
//            vo.setAllowedPurchaseArea("");
//            vo.setAllowedPurchaseAreaName("");
//            vo.setSingleOrderAssignArea("");
//            vo.setSingleOrderAssignAreaName("");
//            vo.setSingleOrderPurchaseNum(0L);
//            vo.setSingleUserPurchaseNum(new BigDecimal("0"));
//            vo.setGoodsSalesCountOfOneMonth(0L);
//            vo.setMarketingId(0L);
//            vo.setPurchaseNum(0L);
//            vo.setTheirPrice(new BigDecimal("0"));
//            vo.setTheirPriceDiscount(new BigDecimal("0"));
//            vo.setTheirPriceFullCount(new BigDecimal("0"));
//            vo.setTheirPriceFullCountForDiscount(new BigDecimal("0"));
//            vo.setIsDisable(0);
//            vo.setPilePurchaseNum(0L);
//            vo.setIsCanPile(DefaultFlag.NO);
//            vo.setHiddenFlag(0);
//            vo.setIsSuitGoods(DefaultFlag.NO);
//            vo.setChoseProductSkuId("");
//            vo.setSuitMarketingId(0L);
//            vo.setIsSuitToBuy(DefaultFlag.NO);
//            vo.setGiftList(Lists.newArrayList());
//            vo.setProductMarketPrice(new BigDecimal("0"));
//            vo.setSuitGoodsList(Lists.newArrayList());
//            vo.setIsSupermarketGoods(0);
//            vo.setIsStartBuyNum(DefaultFlag.NO);
//            vo.setStartBuyNum(0);
//            vo.setGoodsInfoSubtitle("");
//            vo.setGoodsSubtitleNew("");
//            vo.setValidSort(0);
//            vo.setParentGoodsInfoId("");
//            vo.setWareId(0L);
//            vo.setIsExit(false);
//            vo.setPerPurchaseNumOfMarketingScope(new BigDecimal("0"));
//            vo.setPurchaseNumOfMarketingScope(new BigDecimal("0"));
//            vo.setPurchaseNumOfMarketing(new BigDecimal("0"));
//            vo.setPileFlag(BoolFlag.NO);
            return vo;
        }).collect(Collectors.toList());
    }

    public void cancelPay(List<String> tids) {
        List<TradeVO> tradeVOs = KsBeanUtil.convert(tradeService.getListByIds(tids), TradeVO.class);
        if (CollectionUtils.isEmpty(tradeVOs)) {
            log.info("订单不存在或已作废，订单号={}", JSON.toJSONString(tids));
            return;
        }

        List<RLock> rLocks = new ArrayList<>();
        tids.forEach(tid -> {
            RLock rLock = redissonClient.getFairLock(tid);
            rLock.lock();
            rLocks.add(rLock);
        });

        try {
            int unlockCount = unlockStock(tradeVOs);
            if (unlockCount > 0) {
                doCancelPay(tradeVOs);
            }
        } finally {
            rLocks.forEach(Lock::unlock);
        }
    }

    private void doCancelPay(List<TradeVO> tradeVOs) {
        log.info("取消支付开始");
        if(CollectionUtils.isEmpty(tradeVOs)){
            log.info("取消支付返回：tradeVOs为空");
            return;
        }

        List<Long> cpusPayChannels = Arrays.asList(29L,30L);
        List<Long> wechatPayChannels = Arrays.asList(16L);
        for (TradeVO tradeVO : tradeVOs) {
            if (PayState.NOT_PAID != tradeVO.getTradeState().getPayState()) {
                log.info("取消支付返回：订单状态不为未支付，不再处理");
                continue;
            }
            String id = StringUtils.isNotBlank(tradeVO.getId()) ? tradeVO.getId() : tradeVO.getParentId();
            PayTradeRecordResponse payTradeRecordResp = getPayOrderNo(id);
            if(Objects.isNull(payTradeRecordResp)) {
                log.info("单据ID[{}]支付记录不存在",id);
                continue;
            }
            if (cpusPayChannels.contains(payTradeRecordResp.getChannelItemId())) {
                Map<String, String> params = new LinkedHashMap<>();
                params.put("payOrderNo", payTradeRecordResp.getPayOrderNo());
                params.put("channelId", payTradeRecordResp.getChannelItemId().toString());
                params.put("storeId", String.valueOf(Constants.BOSS_DEFAULT_STORE_ID));
                BaseResponse<String> closePayOrderResp = cupsPayProvider.closePayOrder(params);
                log.info("取消支付结果：{}", closePayOrderResp);

            } else if (wechatPayChannels.contains(payTradeRecordResp.getChannelItemId())) {
                WxPayOrderCloseForJSApiRequest weiXinCloseRequest = new WxPayOrderCloseForJSApiRequest();
                weiXinCloseRequest.setPayOrderNo(payTradeRecordResp.getPayOrderNo());
                BaseResponse<WxPayOrderCloseForJSApiResponse> closePayOrderResp = wxPayProvider.closeWxPayOrderForJSApi(weiXinCloseRequest);
                log.info("取消支付结果：{}", closePayOrderResp);
            } else {
                log.warn("不支持的支付方式：{}", tradeVO.getPayWay());
            }
        }
        log.info("取消支付结束");
    }

    private PayTradeRecordResponse getPayOrderNo(String orderCode) {
        PayTradeRecordRequest request = new PayTradeRecordRequest();
        request.setBusinessId(orderCode);
        return payQueryProvider.findByBusinessId(request).getContext();
    }

    private int unlockStock(List<TradeVO> tradeVOs) {
        fillBNum(tradeVOs);
        //收集sku购买信息
        List<GoodsInfoUnlockStockRequest> unlockStockRequests = new ArrayList<>();
        for (TradeVO tradeVO : tradeVOs) {
            if (PayState.NOT_PAID != tradeVO.getTradeState().getPayState()) {
                log.info("取消支付返回：订单状态不为未支付，不再处理");
                continue;
            }

            Map<String, BigDecimal> buyCountBySkuMap = new HashMap<>();
            tradeVO.getTradeItems().forEach(tradeItemVO -> {
                buyCountBySkuMap.put(tradeItemVO.getSkuId(), buyCountBySkuMap.getOrDefault(tradeItemVO.getSkuId(), BigDecimal.ZERO).add(tradeItemVO.getBNum()));
            });

            tradeVO.getGifts().forEach(tradeItemVO -> {
                buyCountBySkuMap.put(tradeItemVO.getSkuId(), buyCountBySkuMap.getOrDefault(tradeItemVO.getSkuId(), BigDecimal.ZERO).add(tradeItemVO.getBNum()));
            });

            GoodsInfoUnlockStockRequest request = new GoodsInfoUnlockStockRequest();
            request.setStockList(buildStockList(buyCountBySkuMap));
            request.setWareId(tradeVO.getWareId());
            request.setBusinessId(tradeVO.getId());
            unlockStockRequests.add(request);
        }

        if(CollectionUtils.isEmpty(unlockStockRequests)){
            log.info("取消支付返回：需处理的未支付订单为空，不再处理");
            return 0;
        }
        return goodsInfoProvider.unlockStock(unlockStockRequests).getContext();
    }

    private List<GoodsInfoUnlockStockDTO> buildStockList(Map<String, BigDecimal> buyCountBySkuMap) {
        if (MapUtils.isEmpty(buyCountBySkuMap)) {
            return Collections.emptyList();
        }

        return buyCountBySkuMap.entrySet().stream().map(entry -> {
            GoodsInfoUnlockStockDTO dto = new GoodsInfoUnlockStockDTO();
            dto.setStock(entry.getValue());
            dto.setGoodsInfoId(entry.getKey());
            return dto;
        }).collect(Collectors.toList());
    }

    private static void fillBNum(List<TradeVO> tradeVOs) {
        tradeVOs.forEach(tradeVO -> {
            tradeVO.getTradeItems().forEach(tradeItem -> {
                if (Objects.nonNull(tradeItem.getDivisorFlag()) && tradeItem.getDivisorFlag().compareTo(BigDecimal.ZERO) > 0) {
                    tradeItem.setBNum(tradeItem.getDivisorFlag().multiply(BigDecimal.valueOf(tradeItem.getNum())).setScale(2, RoundingMode.DOWN));
                } else {
                    tradeItem.setBNum(BigDecimal.valueOf(tradeItem.getNum()));
                }
            });
            tradeVO.getGifts().forEach(tradeItem -> {
                if (Objects.nonNull(tradeItem.getDivisorFlag()) && tradeItem.getDivisorFlag().compareTo(BigDecimal.ZERO) > 0) {
                    tradeItem.setBNum(tradeItem.getDivisorFlag().multiply(BigDecimal.valueOf(tradeItem.getNum())).setScale(2, RoundingMode.DOWN));
                } else {
                    tradeItem.setBNum(BigDecimal.valueOf(tradeItem.getNum()));
                }
            });
        });
    }

    /***
     * @desc  商城下单
     * @author shiy  2023/7/4 10:58
    */
    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> submitMallTrades(TradeCommitRequest tradeCommitRequest) {
        StopWatch stopWatch = new StopWatch();
        stopWatch.start("submitMallTrades验证用户占比");
        CustomerVO customer = verifyService.verifyCustomer(tradeCommitRequest.getOperator().getUserId());
        stopWatch.stop();
        tradeCommitRequest.setCustomer(customer);
        stopWatch.start("submitMallTrades验证用户钱包占比");
        CusWalletVO cusWalletVO = checkoutWallet(tradeCommitRequest, customer);
        stopWatch.stop();
        Long wareId = tradeCommitRequest.getWareId();
        Operator operator = tradeCommitRequest.getOperator();
        stopWatch.start("submitMallTrades查询mogo数据");
        List<TradeItemGroup> tradeItemGroups = tradeItemService.findAll(customer.getCustomerId());
        if (ChannelType.PC_MALL.equals(tradeCommitRequest.getDistributeChannel().getChannelType())) {
            tradeItemGroups.forEach(tradeItemGroup ->
                    tradeItemGroup.getTradeItems().forEach(tradeItem -> {
                        tradeItem.setDistributionGoodsAudit(DistributionGoodsAudit.COMMON_GOODS);
                    })
            );
        }
        stopWatch.stop();
        stopWatch.start("submitMallTrades检查库存和区域限购");
        checkStockAndPure(tradeCommitRequest, tradeItemGroups);
        stopWatch.stop();
        TradeGrouponCommitForm grouponForm = tradeItemGroups.get(NumberUtils.INTEGER_ZERO).getGrouponForm();
        if (Objects.nonNull(grouponForm)) {
            stopWatch.start("submitMallTrades拼团订单--验证");
            this.validGroupon(tradeCommitRequest, tradeItemGroups);
            stopWatch.stop();
        }
        stopWatch.start("submitMallTrades检查营销活动");
        verifyService.verifyInvalidMarketings(tradeCommitRequest, tradeItemGroups, customer);
        stopWatch.stop();
        stopWatch.start("submitMallTrades封装订单");
        List<Trade> trades = verifyAndWrapperTradeList(tradeCommitRequest, tradeItemGroups);
        stopWatch.stop();
        stopWatch.start("submitMallTrades校验配送到店的数量");
        checkDeliveryToStore(trades);
        stopWatch.stop();
        stopWatch.start("submitMallTrades构建优惠券信息");
        //TODO 这里的代码可以去除
        TradeGroup tradeGroup = this.wrapperTradeGroup(trades, tradeCommitRequest, grouponForm);
        stopWatch.stop();
        //满订单优惠
        stopWatch.start("submitMallTrades计算营销");
        //TODO 这里的代码可以去除
        this.orderMarketing(trades);
        stopWatch.stop();
        stopWatch.start("submitMallTrades赠品限数判断以及库存判断");
        trades.forEach(v -> {
            this.verifyGiftLimitedAndStock(v.getGifts(), tradeItemGroups);
        });
        stopWatch.stop();
        stopWatch.start("submitMallTrades计算订单运费");
        //  重新计算订单运费 //TODO 在查询快照接口其实算了运费这里可以考虑去除
        this.computers(trades, grouponForm);
        stopWatch.stop();
        // 处理积分抵扣 TODO 这里可以去除
//        this.dealPoints(trades, tradeCommitRequest);

        //计算包装费
        stopWatch.start("submitMallTrades计算包装费");
        this.calPacking(trades);
        stopWatch.stop();

        //组合支付金额计算
//        combinationOfPay(trades,customer.getCustomerId());

        stopWatch.start("submitMallTrades使用余额重新计算应付金额");
        useWalletSecondEdition(trades, tradeCommitRequest, cusWalletVO);
        stopWatch.stop();
        stopWatch.start("submitMallTrades生成订单");
        List<TradeCommitResult> successResults;
        if (tradeGroup != null) {
            successResults = this.mallCreateBatchWithGroup(trades, tradeGroup, operator);
        } else {
            successResults = this.mallCreateBatch(trades, operator);
        }
        stopWatch.stop();
        stopWatch.start("submitMallTrades删除购物车删除快照");
        deleteShopCart(tradeCommitRequest, customer, wareId, trades);
        stopWatch.stop();
        log.info("submitMallTrades总时长"+stopWatch.prettyPrint());
        return successResults;
    }

    private void checkDeliveryToStore(List<Trade> trades) {
        HashMap<String,Long> toStoreMarketNumMap = new HashMap<>(10);
        Map<Long,CompanyMallBulkMarketResponse> marketResponseMap = new HashMap<>(trades.size());
        Consignee consignee = trades.get(0).getConsignee();
        for(Trade submitingTrade: trades) {
            if (StringUtils.isBlank(submitingTrade.getSupplier().getMarketName())) {
                continue;
            }
            if(DeliverWay.DELIVERY_TO_STORE!=submitingTrade.getDeliverWay()){
                continue;
            }
            Long tradeGoodsTotalNum = getTradeSkuNumber(submitingTrade.getTradeItems(), submitingTrade.getGifts());
            CompanyMallBulkMarketResponse companyMallBulkMarketResponse = marketResponseMap.get(submitingTrade.getSupplier().getMarketId());
            if(companyMallBulkMarketResponse == null) {
                companyMallBulkMarketResponse = companyIntoPlatformQueryProvider.getByIdForMarket(CompanyMallBulkMarketQueryRequest.builder().marketId(submitingTrade.getSupplier().getMarketId()).build()).getContext();
                marketResponseMap.put(submitingTrade.getSupplier().getMarketId(),companyMallBulkMarketResponse);
            }
            if(companyMallBulkMarketResponse.getPatchFlag()==0){
                checkSubmitTradeDeliveryToStore(submitingTrade.getSupplier().getStoreName(),tradeGoodsTotalNum,consignee);
            }else {
                Long marketGoodsTotalNum = toStoreMarketNumMap.get(submitingTrade.getSupplier().getMarketName());
                if (marketGoodsTotalNum == null) {
                    marketGoodsTotalNum = 0L;
                }
                marketGoodsTotalNum = marketGoodsTotalNum + tradeGoodsTotalNum;
                toStoreMarketNumMap.put(submitingTrade.getSupplier().getMarketName(), marketGoodsTotalNum);
            }
        }
        if(toStoreMarketNumMap.size()>0){
            checkSubmitTradeDeliveryToStore(toStoreMarketNumMap, consignee);
        }
    }

    public void checkSubmitTradeDeliveryToStore(MarketTradeInfoDTO marketTradeInfoDTO){
        HashMap<String, Long> toStoreMarketNumMap = new HashMap<>(marketTradeInfoDTO.getMarketlist().size());
        Map<Long,CompanyMallBulkMarketResponse> marketResponseMap = new HashMap<>(marketTradeInfoDTO.getMarketlist().size());
        Consignee consignee = new Consignee();
        consignee.setId(marketTradeInfoDTO.getAddressId());
        marketTradeInfoDTO.getMarketlist().forEach(m->{
            if(Objects.isNull(m.getMarketId())||m.getMarketId()<1L){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"错误的批发市场ID");
            }
            CompanyMallBulkMarketResponse companyMallBulkMarketResponse = marketResponseMap.get(m.getMarketId());
            if(companyMallBulkMarketResponse==null) {
                companyMallBulkMarketResponse = companyIntoPlatformQueryProvider.getByIdForMarket(CompanyMallBulkMarketQueryRequest.builder().marketId(m.getMarketId()).build()).getContext();
                marketResponseMap.put(m.getMarketId(),companyMallBulkMarketResponse);
            }
            if(companyMallBulkMarketResponse.getPatchFlag()==0){
                if(CollectionUtils.isNotEmpty(m.getMarketStoreItems())){
                    m.getMarketStoreItems().forEach(storeItem->{
                        checkSubmitTradeDeliveryToStore(storeItem.getStoreName(),storeItem.getStoreId(),consignee);
                    });
                }else{
                    //throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"商家订单数量计算异常");
                }
            }else {
                toStoreMarketNumMap.put(companyMallBulkMarketResponse.getMarketName(), m.getTotalSkuNum());
            }
        });
        checkSubmitTradeDeliveryToStore(toStoreMarketNumMap, consignee);
    }

    private void checkSubmitTradeDeliveryToStore(HashMap<String, Long> toStoreMarketNumMap, Consignee consignee) {
        resetConsigneeById(consignee);
        FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_5 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_5);
        FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_10 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_10);
        boolean villageFlag = isToStoreVillageFlag(consignee.getCityId(),consignee.getTwonId());
        Long freightFreeNumber = villageFlag?platDeliveryToStoreCfg_10.getFreightFreeNumber():platDeliveryToStoreCfg_5.getFreightFreeNumber();
        for (Map.Entry<String, Long> marketNumEntry : toStoreMarketNumMap.entrySet()) {
            if(marketNumEntry.getValue()<freightFreeNumber){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,marketNumEntry.getKey()+"商品总数量"+marketNumEntry.getValue()+"不满足物流方式【配送到店】"+(villageFlag?"乡镇件":"")+"的启用数量"+freightFreeNumber);
            }
        }
    }

    private void checkSubmitTradeDeliveryToStore(String providerName,Long skuNums, Consignee consignee) {
        resetConsigneeById(consignee);
        FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_5 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_5);
        FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_10 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_10);
        boolean villageFlag = isToStoreVillageFlag(consignee.getCityId(),consignee.getTwonId());
        Long freightFreeNumber = villageFlag ? platDeliveryToStoreCfg_10.getFreightFreeNumber() : platDeliveryToStoreCfg_5.getFreightFreeNumber();
        if (skuNums < freightFreeNumber) {
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, providerName + "商品总数量" + providerName + "不满足物流方式【配送到店】" + (villageFlag ? "乡镇件" : "") + "的启用数量" + freightFreeNumber);
        }
    }

    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> mallCreateBatchWithGroup(List<Trade> trades, TradeGroup tradeGroup, Operator operator) {
        // 1.保存订单及订单组信息
        if (StringUtils.isEmpty(tradeGroup.getId())) {
            tradeGroup.setId(UUIDUtil.getUUID());
        }

        tradeGroupService.addTradeGroup(tradeGroup);
        trades.forEach(trade -> trade.setGroupId(tradeGroup.getId()));
        List<TradeCommitResult> resultList = this.mallCreateBatch(trades, operator);
        //todo 这里可以异步
        // 2.修改优惠券状态
        List<CouponCodeBatchModifyDTO> dtoList = new ArrayList<>();
        TradeCouponVO tradeCoupon = tradeGroup.getCommonCoupon();
        dtoList.add(CouponCodeBatchModifyDTO.builder()
                .couponCodeId(tradeCoupon.getCouponCodeId())
                .orderCode(null)
                .useStatus(DefaultFlag.YES).build());
        couponCodeProvider.batchModify(CouponCodeBatchModifyRequest.builder().modifyDTOList(dtoList).build());
        return resultList;
    }

    @Transactional
    @LcnTransaction
    public List<TradeCommitResult> mallCreateBatch(List<Trade> trades, Operator operator) {
        StopWatch stopWatch = new StopWatch("mallCreateBatch开始任务");
        List<TradeCommitResult> resultList = new ArrayList<>();
        final String parentId = generatorService.generatePoId();
        List<String> collect = trades.stream().map(Trade::getId).collect(Collectors.toList());
        boolean isMergFlag = trades.size()>1;
        trades.forEach(v -> {
            //v.setMergFlag(isMergFlag);//多个订单时，合并支付。like支付用
            v.setTids(collect);
        });
        //平台自营订单
        //Trade platFormTrade = trades.stream().filter(t -> com.wanmi.sbc.common.enums.CompanyType.PLATFORM.equals(t.getSupplier().getCompanyType())).findFirst().orElse(null);
        //第三方商家订单集合
        //List<Trade> supplierTrades = trades.stream().filter(t -> com.wanmi.sbc.common.enums.CompanyType.SUPPLIER.equals(t.getSupplier().getCompanyType())).collect(Collectors.toList());
        //存在id重复问题，不想找原因
        //去重
        log.info("trades.size()" + trades.size());
        Map<String, Trade> tradeMap = trades.stream().collect(
                Collectors.toMap(Trade::getId, Function.identity(), (a, b) -> a)
        );
        trades = tradeMap.values().stream().collect(Collectors.toList());
        log.info("trades.size()++1" + trades.size());
        AtomicReference<Boolean> flag = new AtomicReference<>(false);
        List<Trade> finalTrades = trades;
        stopWatch.start("mallCreateBatch创建trades");
        trades.forEach(trade -> {
                    //创建订单
                    createSingleTrade(operator, resultList, parentId, flag, trade);
                }
        );
        stopWatch.stop();
        stopWatch.start("mallCreateBatch批量修改优惠券状态");
        // 批量修改优惠券状态
        List<CouponCodeBatchModifyDTO> dtoList = new ArrayList<>();
        trades.forEach(trade -> {
            updateCouponState(dtoList, trade);
        });
        stopWatch.stop();
        stopWatch.start("mallCreateBatch订单生成余额扣除鲸币");
        modifyWalletBalance(trades, false);
        stopWatch.stop();
        if (dtoList.size() > 0) {
            stopWatch.start("mallCreateBatch批量修改");
            couponCodeProvider.batchModify(CouponCodeBatchModifyRequest.builder().modifyDTOList(dtoList).build());
            stopWatch.stop();
        }
        log.info("========================================= trades =========================================, {}", JSONObject.toJSONString(trades));
        if (kingdeeOpenState && false) {
            trades.stream().forEach(trade -> {
                pushSaleOrderToErp(trade);
            });
        }
        log.info("mallCreateBatch总时长"+stopWatch.prettyPrint());
        return resultList;
    }

    private void createSingleTrade(Operator operator, List<TradeCommitResult> resultList, String parentId, AtomicReference<Boolean> flag, Trade trade) {
        try {
            trade.setParentId(parentId);
            trade.setOrderType(OrderType.NORMAL_ORDER);
            Integer deliveryType = verifyService.verifyDeliveryConfig(trade);
            Boolean villageFlag = deliveryType==freightTemplateDeliveryType.AREATENDELIVER.toValue();

            Trade result = create(trade, operator, flag.get(), villageFlag);
            boolean hasImg = CollectionUtils.isNotEmpty(result.getTradeItems());
            BigDecimal bigDecimalStream = result.getTradeItems().stream()
                    .filter(tradeItem -> tradeItem.getSplitPrice() != null && tradeItem.getSplitPrice().compareTo(BigDecimal.ZERO) > 0)
                    .map(TradeItem::getSplitPrice)
                    .reduce(BigDecimal::add).orElse(BigDecimal.ZERO);
            if (Objects.nonNull(result.getTradePrice().getDeliveryPrice())) {
                bigDecimalStream = bigDecimalStream.add(result.getTradePrice().getDeliveryPrice());
            }
            if (Objects.nonNull(result.getTradePrice().getPackingPrice())) {
                bigDecimalStream = bigDecimalStream.add(result.getTradePrice().getPackingPrice());
            }
            resultList.add(new TradeCommitResult(result.getId(),
                    result.getParentId(), result.getTradeState(),
                    result.getPaymentOrder(), bigDecimalStream,
                    result.getOrderTimeOut(),
                    result.getSupplier().getStoreName(),
                    result.getSupplier().getIsSelf(),
                    hasImg ? result.getTradeItems().get(0).getPic() : null));
        } catch (Exception e) {
            log.error("commit trade error,trade={}", trade, e);
            if (e instanceof SbcRuntimeException) {
                throw e;
            } else {
                throw new SbcRuntimeException("K-020010");
            }
        }
    }

    private void updateCouponState(List<CouponCodeBatchModifyDTO> dtoList, Trade trade) {
        if (trade.getTradeCoupon() != null) {
            TradeCouponVO tradeCoupon = trade.getTradeCoupon();
            dtoList.add(CouponCodeBatchModifyDTO.builder()
                    .couponCodeId(tradeCoupon.getCouponCodeId())
                    .orderCode(trade.getId())
                    .useStatus(DefaultFlag.YES).build());
        }

        if (trade.getTradePrice().getPoints() != null && trade.getTradePrice().getPoints() > 0) {
            // 增加客户积分明细 扣除积分
            customerPointsDetailSaveProvider.add(CustomerPointsDetailAddRequest.builder()
                    .customerId(trade.getBuyer().getId())
                    .type(OperateType.DEDUCT)
                    .serviceType(PointsServiceType.ORDER_DEDUCTION)
                    .points(trade.getTradePrice().getPoints())
                    .content(JSONObject.toJSONString(Collections.singletonMap("orderNo", trade.getId())))
                    .build());
        }

        MessageMQRequest messageMQRequest = new MessageMQRequest();
        if (!AuditState.REJECTED.equals(trade.getTradeState().getAuditState())) {
            Map<String, Object> map = new HashMap<>();
            map.put("type", NodeType.ORDER_PROGRESS_RATE.toValue());
            map.put("id", trade.getId());
//                map.put("activityType",trade.getActivityType());
//                log.info("======================= activityType :{}===========================",trade.getActivityType());
            if (AuditState.CHECKED.equals(trade.getTradeState().getAuditState())) {
                messageMQRequest.setNodeCode(OrderProcessType.ORDER_COMMIT_SUCCESS.getType());
                map.put("node", OrderProcessType.ORDER_COMMIT_SUCCESS.toValue());
            } else {
                messageMQRequest.setNodeCode(OrderProcessType.ORDER_COMMIT_SUCCESS_CHECK.getType());
                map.put("node", OrderProcessType.ORDER_COMMIT_SUCCESS_CHECK.toValue());
            }
            messageMQRequest.setNodeType(NodeType.ORDER_PROGRESS_RATE.toValue());
            messageMQRequest.setParams(Lists.newArrayList(trade.getTradeItems().get(0).getSkuName()));
            messageMQRequest.setPic(trade.getTradeItems().get(0).getPic());
            messageMQRequest.setRouteParam(map);
            messageMQRequest.setCustomerId(trade.getBuyer().getId());
            messageMQRequest.setMobile(trade.getBuyer().getAccount());
            orderProducerService.sendMessage(messageMQRequest);
        }
    }

    private void deleteShopCart(TradeCommitRequest tradeCommitRequest, CustomerVO customer, Long wareId, List<Trade> trades) {
        try {
            // 4.订单提交成功，删除关联的采购单商品
            trades.forEach(
                    trade -> {
                        List<String> tradeSkuIds =
                                trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
                        if (SaleType.RETAIL.equals(trade.getSaleType())) { //零售
                            deleteRetailShopCartOrder(customer.getCustomerId(), tradeSkuIds,
                                    tradeCommitRequest.getDistributeChannel(), tradeCommitRequest.getWareId());
                        }
                        else if (SaleType.BULK.equals(trade.getSaleType())){//散批
                            deleteBulkShopCartOrder(customer.getCustomerId(), tradeSkuIds,
                                    tradeCommitRequest.getDistributeChannel(), tradeCommitRequest.getBulkWareId());
                        }

                        else { //批发
                            List<Long> tradeDevannings =
                                    trade.getTradeItems().stream().map(TradeItem::getDevanningId).collect(Collectors.toList());
                            deleteShopCartOrderdevanning(customer.getCustomerId(), tradeSkuIds, tradeDevannings,
                                    tradeCommitRequest.getDistributeChannel(), wareId);
                        }
                    }
            );
            // 5.订单提交成功，删除订单商品快照
            tradeItemService.remove(customer.getCustomerId());
        } catch (Exception e) {
            log.error("Delete the trade sku list snapshot or the purchase order exception," +
                            "trades={}," +
                            "customer={}",
                    JSONObject.toJSONString(trades),
                    customer,
                    e
            );
        }
    }

    private List<Trade> verifyAndWrapperTradeList(TradeCommitRequest tradeCommitRequest, List<TradeItemGroup> tradeItemGroups) {
        StopWatch stopWatch = new StopWatch("verifyAndWrapperTradeList封装订单方法");
        stopWatch.start("verifyAndWrapperTradeList获取订单店铺分组");
        CustomerVO customer = tradeCommitRequest.getCustomer();
        List<Trade> trades = new ArrayList<>();

        // 1.查询快照中的购物清单
        // list转map,方便获取 店铺id为key
        Map<Long, TradeItemGroup> tradeItemGroupsMap = tradeItemGroups.stream().collect(
                Collectors.toMap(g -> g.getSupplier().getStoreId(), Function.identity()));

        List<StoreVO> storeVOList = tradeCacheService.queryStoreList(new ArrayList<>(tradeItemGroupsMap.keySet()));

        Map<Long, StoreVO> storeMap = new HashMap<>();
        if (CollectionUtils.isNotEmpty(storeVOList)) {
            storeMap.putAll(storeVOList.stream().collect(Collectors.toMap(StoreVO::getStoreId, s -> s)));
        }
        stopWatch.stop();
        stopWatch.start("verifyAndWrapperTradeList获取用户等级");
        CustomerLevelMapByCustomerIdAndStoreIdsRequest request = new CustomerLevelMapByCustomerIdAndStoreIdsRequest();
        request.setCustomerId(customer.getCustomerId());
        request.setStoreIds(new ArrayList<>(tradeItemGroupsMap.keySet()));
        Map<Long, CommonLevelVO> storeLevelMap = customerLevelQueryProvider.listCustomerLevelMapByCustomerIdAndIds
                        (request)
                .getContext().getCommonLevelVOMap();
        stopWatch.stop();
        stopWatch.start("verifyAndWrapperTradeList获取快照");
        // 2.遍历各个店铺下单信息
        TradeItemSnapshot tradeItemSnapshot = tradeItemService.findTradeItemSnapshot(customer.getCustomerId());
        stopWatch.stop();
        stopWatch.start("verifyAndWrapperTradeList遍历订单封装");
        tradeCommitRequest.getStoreCommitInfoList().forEach(
                storeCommitInfoDTO -> {
                    Trade trade = getTrade(tradeCommitRequest, customer, tradeItemGroupsMap, storeMap, storeLevelMap, tradeItemSnapshot, storeCommitInfoDTO);
                    trades.add(trade);
                }
        );
        stopWatch.stop();
        log.info("verifyAndWrapperTradeList封装订单总时长"+stopWatch.prettyPrint());
        return trades;
    }

    private Trade getTrade(TradeCommitRequest tradeCommitRequest, CustomerVO customer, Map<Long, TradeItemGroup> tradeItemGroupsMap, Map<Long, StoreVO> storeMap, Map<Long, CommonLevelVO> storeLevelMap, TradeItemSnapshot tradeItemSnapshot, StoreCommitInfoDTO storeCommitInfoDTO) {
        StopWatch stopWatch = new StopWatch("getSingleTrade单独封装订单");
        TradeItemGroup group = tradeItemGroupsMap.get(storeCommitInfoDTO.getStoreId());
        // 2.1.组装发票信息(缺少联系人,联系方式), 统一入参, 方便调用公共方法
        if (storeMap.get(group.getSupplier().getStoreId()) == null) {
            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);
        }
        StoreVO storeVO = storeMap.get(group.getSupplier().getStoreId());
        //费用类型
        group.getSupplier().setFreightTemplateType(storeVO.getFreightTemplateType());
        //是否秒杀
        boolean flashSale = verifyflashSale(group);

        Trade trade = new Trade();
        Invoice invoice = getInvoice(storeCommitInfoDTO);
        TradeParams tradeParams = getTradeParams(tradeCommitRequest, customer, storeLevelMap, tradeItemSnapshot, storeCommitInfoDTO, group, invoice, flashSale);

        //判断是否为秒杀抢购商品订单
        if (Objects.nonNull(tradeParams.getIsFlashSaleGoods()) && tradeParams.getIsFlashSaleGoods()) {
            trade.setIsFlashSaleGoods(tradeParams.getIsFlashSaleGoods());
        }
        if(DeliverWay.TO_DOOR_PICK==storeCommitInfoDTO.getDeliverWay() && Objects.nonNull(storeCommitInfoDTO.getNetWorkVO()) && Objects.nonNull(storeCommitInfoDTO.getNetWorkVO().getNetworkId())){
            DoorPickConfigVO doorPickConfigVO = doorPickConfigProvider.findOneById(storeCommitInfoDTO.getNetWorkVO().getNetworkId()).getContext();
            trade.setNetWorkVO(getNetWorkVODoorPick(doorPickConfigVO));
        }
        if(DeliverWay.DELIVERY_TO_STORE==storeCommitInfoDTO.getDeliverWay() && Objects.nonNull(storeCommitInfoDTO.getNetWorkVO()) && Objects.nonNull(storeCommitInfoDTO.getNetWorkVO().getNetworkId())){
            trade.setNetWorkVO(storeCommitInfoDTO.getNetWorkVO());
        }
        stopWatch.start("getSingleTrade设置订单基本信息");
        // 2.1.设置订单基本信息(购买人,商家,代客下单操作人,收货地址,发票信息,配送方式,支付方式,备注,附件,操作人ip,订单商品,订单总价...)
        if (tradeParams.isCommitFlag()) {

            // 购买人,商家,代客下单操作人,订单项Oid,订单id,订单来源方等只有在下单的时候才设置(因为在修改订单时无法修改这些信息)
            Optional<CommonLevelVO> commonLevelVO;
            boolean flag = true;
            if (tradeParams.getStoreLevel() == null) {
                flag = false;
                commonLevelVO =
                        Optional.of(fromCustomerLevel(customerLevelQueryProvider.getDefaultCustomerLevel().getContext()));
            } else {
                commonLevelVO = Optional.of(tradeParams.getStoreLevel());
            }
            trade.setBuyer(Buyer.fromCustomer(tradeParams.getCustomer(), commonLevelVO, flag));
            trade.setSupplier(tradeParams.getSupplier());
            trade.getSupplier().setMarketId(storeCommitInfoDTO.getMarketId());
            if(Objects.nonNull(storeCommitInfoDTO.getMarketId()) && storeCommitInfoDTO.getMarketId()>0) {
                CompanyMallBulkMarketQueryRequest marketQueryRequest = new CompanyMallBulkMarketQueryRequest();
                marketQueryRequest.setMarketId(storeCommitInfoDTO.getMarketId());
                CompanyMallBulkMarketResponse response= companyIntoPlatformQueryProvider.getByIdForMarket(marketQueryRequest).getContext();
                if(response!=null){
                    trade.getSupplier().setMarketName(response.getMarketName());
                }
            }
            trade.getSupplier().setTabId(storeCommitInfoDTO.getTabId());
            if(Objects.nonNull(storeCommitInfoDTO.getTabId()) && storeCommitInfoDTO.getTabId()>0) {
                CompanyMallSupplierTabQueryRequest tabQueryRequest = new CompanyMallSupplierTabQueryRequest();
                tabQueryRequest.setId(storeCommitInfoDTO.getTabId());
                CompanyMallSupplierTabResponse response = companyIntoPlatformQueryProvider.getByIdSupplierTab(tabQueryRequest).getContext();
                if(response!=null){
                    trade.getSupplier().setTabName(response.getTabName());
                }
            }
            trade.getSupplier().setSupplierCodeNew(storeVO.getCompanyInfo().getCompanyCodeNew());
            trade.setSeller(tradeParams.getSeller());
            tradeParams.getTradeItems().forEach(t -> {
                t.setOid(generatorService.generateOid());
                if (StringUtils.isBlank(t.getAdminId())) {
                    t.setAdminId(String.format("%d", tradeParams.getSupplier().getSupplierId()));
                }
            });

            if (SaleType.RETAIL.equals(tradeParams.getSaleType())) { //零售
                //订单号设置为L开头
                trade.setId(generatorService.generateRetailTid());
                trade.setWareHouseCode("WH01");
                trade.setWareHouseNmae("长沙仓");
            }else if (SaleType.BULK.equals(tradeParams.getSaleType())){
                trade.setId(generatorService.generateBulkTid());
                trade.setWareHouseCode(tradeParams.getWareHouseCode());
            }
            else { //批发
                trade.setId(generatorService.generateTid());
                trade.setWareHouseCode(tradeParams.getWareHouseCode());
            }
            trade.setPlatform(tradeParams.getPlatform());
            trade.setOrderSource(tradeParams.getOrderSource());
            trade.setOrderType(OrderType.NORMAL_ORDER);
            trade.setShareUserId(tradeParams.getShareUserId());
            trade.setTradeWareHouse(tradeParams.getTradeWareHouse());
        }
        trade.setConsignee(wrapperConsignee(tradeParams.getConsigneeId(), tradeParams.getDetailAddress(),
                tradeParams.getConsigneeUpdateTime(), tradeParams.getConsignee()));
        //发票信息(必须在收货地址下面-因为使用临时发票收货地,却未填写的时候,将使用订单商品收货地址作为发票收货地)
        trade.setInvoice(wrapperTradeInvoice(tradeParams.getInvoice(), tradeParams.getInvoiceConsignee(),
                trade.getConsignee()));
        trade.setDeliverWay(tradeParams.getDeliverWay());
        if (tradeParams.getPayType() != null) {
            trade.setPayInfo(PayInfo.builder()
                    .payTypeId(String.format("%d", tradeParams.getPayType().toValue()))
                    .payTypeName(tradeParams.getPayType().name())
                    .desc(tradeParams.getPayType().getDesc())
                    .build());
        }
        trade.setBuyerRemark(tradeParams.getBuyerRemark());
        trade.setSellerRemark(tradeParams.getSellerRemark());
        trade.setEncloses(tradeParams.getEncloses());
        trade.setRequestIp(tradeParams.getIp());
        trade.setTradeItems(tradeParams.getTradeItems());
        trade.setTradePrice(tradeParams.getTradePrice());
        //零售店仓库id设置
        if (SaleType.RETAIL.equals(tradeParams.getSaleType())) {
            //根据零售店的店铺id获取仓库id
            Long wareId = wareHouseQueryProvider.list(WareHouseListRequest.builder()
                    .storeId(tradeParams.getSupplier().getStoreId()).build()).getContext().getWareHouseVOList().get(0).getWareId();
            trade.setWareId(wareId);
        } else {
            trade.setWareId(tradeParams.getWareId());
        }
        trade.setBookingDate(tradeParams.getBookingDate());
        if (Objects.nonNull(tradeParams.getSuitBuyCount()) && tradeParams.getSuitBuyCount() > 0) {
            trade.setSuitBuyCount(tradeParams.getSuitBuyCount());
        }
        if (Objects.nonNull(tradeParams.getMarketingId())) {
            trade.setMarketingId(tradeParams.getMarketingId());
        }
        trade.setSaleType(tradeParams.getSaleType());
        //塞入物流公司信息
        verifyLogistcsCompanyInfo(storeCommitInfoDTO,trade);
        stopWatch.stop();
        // 2.2.订单中商品信息填充(同时设置商品的客户级别价格/客户指定价salePrice)
        stopWatch.start("getSingleTrade订单中商品信息填充");
        logger.info("TradeService.validateAndWrapperTrade GoodsInfo front trade:{}", JSONObject.toJSONString(trade));
        TradeGoodsListVO skuList = getTradeGoodsListVO(trade, tradeParams);
        stopWatch.stop();
        stopWatch.start("getSingleTrade若是后端下单/修改,校验商家跟商品的关系(因为前端下单信息都是从库里读取的,无需验证)");
        // 2.3.若是后端下单/修改,校验商家跟商品的关系(因为前端下单信息都是从库里读取的,无需验证)
        verifyBackendFlag(trade, tradeParams, skuList);
        stopWatch.stop();
        stopWatch.start("getSingleTrade校验sku 和 【商品价格计算第①步】: 商品的 客户级别价格 ");
        // 2.4.校验sku 和 【商品价格计算第①步】: 商品的 客户级别价格 (完成客户级别价格/客户指定价/订货区间价计算) -> levelPrice
        verifyDevanningGoods(tradeItemSnapshot, trade, tradeParams, skuList);
        // 分销商品、开店礼包商品、拼团商品、企业购商品不验证起限定量
        verifyDistribution(trade, tradeParams, skuList);
        stopWatch.stop();
        stopWatch.start("getSingleTrade商品营销信息冗余,验证,计算,设置各营销优惠,实付金额");
        // 2.5.商品营销信息冗余,验证,计算,设置各营销优惠,实付金额
        verifyMarketing(trade, tradeParams);
        stopWatch.stop();
        stopWatch.start("getSingleTrade赠品信息校验与填充");
        // 2.6.赠品信息校验与填充
        List<String> giftIds = tradeParams.getMarketingList().stream().filter(parm -> CollectionUtils.isNotEmpty(parm.getGiftSkuIds())).flatMap(
                r -> r.getGiftSkuIds().stream()).distinct().collect(Collectors.toList());
        TradeGetGoodsResponse giftResp = this.getGoodsResponse(giftIds, trade.getWareId(), trade.getWareHouseCode());
        List<TradeItem> gifts = giftIds.stream().map(g -> TradeItem.builder().price(BigDecimal.ZERO).skuId(g)
                .build()).collect(Collectors.toList());
        verifyService.mergeGoodsInfo(gifts, giftResp);
        trade.setGifts(gifts);
        giftSet(trade);
        stopWatch.stop();
        // 2.7 校验商品 + 赠品的库存
        //verifyGoodsByWMS(trade,tradeParams);
        stopWatch.start("getSingleTrade计算满系营销、优惠券均摊价，并设置结算信息");
        //2.8.计算满系营销、优惠券均摊价，并设置结算信息
        calcMarketingPrice(trade);
        stopWatch.stop();
        stopWatch.start("getSingleTrade计算并设置订单总价(已减去营销优惠总金额)");
        // 2.9.计算并设置订单总价(已减去营销优惠总金额)
        trade.setTradePrice(calc(trade));
        stopWatch.stop();
        //统计商品总件数
        Long goodsTotalNum = getaTradeTotalNum(trade);
        trade.setGoodsTotalNum(goodsTotalNum);
        trade.setSourceChannel(tradeParams.getSourceChannel());
        log.info("getSingleTrade总时长"+stopWatch.prettyPrint());
        return trade;
    }

    private static Boolean isLogistics(DeliverWay deliverWay){
        return DeliverWay.isLogistics(deliverWay);
    }

    private static Boolean isExpress(DeliverWay deliverWay){
        return DeliverWay.isExpressToWMS(deliverWay);
    }

    private static boolean isTmsDelivery(DeliverWay deliverWay) {
        return DeliverWay.isTmsDelivery(deliverWay);
    }

    private void verifyLogistcsCompanyInfo(StoreCommitInfoDTO storeCommitInfoDTO,Trade trade) {
        LogisticsInfoDTO logisticsInfo = storeCommitInfoDTO.getLogisticsInfo();
        if (isLogistics(storeCommitInfoDTO.getDeliverWay())) {
            if(Objects.isNull(logisticsInfo)){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED,"物流信息不能为空");
            }
            if(StringUtils.isNotBlank(logisticsInfo.getId())) {
                LogisticsCompanyByIdResponse context = logisticsCompanyQueryProvider
                        .getById(LogisticsCompanyByIdRequest.builder().id(Long.valueOf(logisticsInfo.getId())).build()).getContext();
                if (Objects.isNull(context)) {
                    throw new SbcRuntimeException("K-170001");
                }
                LogisticsCompanyVO companyInfo = context.getLogisticsCompanyVO();
                logisticsInfo.setCompanyNumber(companyInfo.getCompanyNumber());
                logisticsInfo.setLogisticsAddress(companyInfo.getLogisticsAddress());
                logisticsInfo.setLogisticsCompanyName(companyInfo.getLogisticsName());
                logisticsInfo.setLogisticsCompanyPhone(companyInfo.getLogisticsPhone());
                LogisticsInfo logisticsCompanyInfo = toLogisticsInfo(logisticsInfo);
                /*if (Objects.nonNull(logisticsInfo)
                        && (StringUtils.isNotBlank(logisticsInfo.getId())
                        || (Objects.nonNull(logisticsInfo.getInsertFlag())
                        && logisticsInfo.getInsertFlag() == 1))) {
                    trade.setLogisticsCompanyInfo(logisticsCompanyInfo);
                } else if (Objects.nonNull(logisticsInfo) && StringUtils.isNotEmpty(logisticsInfo.getReceivingPoint())) {

                }*/
                trade.setLogisticsCompanyInfo(logisticsCompanyInfo);
            }
            if(Objects.nonNull(logisticsInfo.getReceivingPoint())){
                LogisticsInfo logisticsCompanyInfo = trade.getLogisticsCompanyInfo();
                if(null == logisticsCompanyInfo) {
                    logisticsCompanyInfo = new LogisticsInfo();
                    trade.setLogisticsCompanyInfo(logisticsCompanyInfo);
                }
                logisticsCompanyInfo.setReceivingPoint(StringUtils.remove(logisticsInfo.getReceivingPoint(), CharUtils.LF));
            }
        }else  if (DeliverWay.DELIVERY_TO_STORE.equals(storeCommitInfoDTO.getDeliverWay())) {

        }
    }

    private void verifyMarketing(Trade trade, TradeParams tradeParams) {
        if (tradeParams.getMarketingList().size() > 0) {
            logger.info("TradeService.validateAndWrapperTrade MarketingList:{}", JSONObject.toJSONString(tradeParams.getMarketingList()));
            tradeParams.getMarketingList().forEach(marketingDTO -> {
                List<TradeItem> items = trade.getTradeItems().stream().filter(s -> marketingDTO.getSkuIds().contains(s.getSkuId()))
                        .collect(Collectors.toList());
                items.forEach(s -> s.getMarketingIds().add(marketingDTO.getMarketingId()));
            });
        }

        // 拼团订单--处理
        if (Objects.nonNull(tradeParams.getGrouponForm())) {
            dealGroupon(trade, tradeParams);
        }
        //营销信息
        this.wrapperMarketingForCommitDevanning(trade, tradeParams, tradeParams.getCustomer());
    }

    private TradeGoodsListVO getTradeGoodsListVO(Trade trade, TradeParams tradeParams) {
        TradeGoodsListVO skuList = new TradeGoodsListVO();
        if (SaleType.RETAIL.equals(tradeParams.getSaleType())) {
            skuList = this.getRetailGoodsInfoResponse(trade);
        }else if (SaleType.BULK.equals(tradeParams.getSaleType())){
            //查询拆箱散批商品信息
            skuList = this.getBulkGoodsInfoResponse(trade);
        }
        else {
            //TODO:查询拆箱商品信息
            skuList = this.getDevanningGoodsInfoResponse(trade);
        }
        return skuList;
    }

    private static boolean verifyflashSale(TradeItemGroup group) {
        boolean flashSale = false;
        //验证是否是秒杀商品
        if (CollectionUtils.isNotEmpty(group.getTradeItems())
                && group.getTradeItems().size() == 1
                && Objects.nonNull(group.getTradeItems().get(0).getIsFlashSaleGoods())
                && group.getTradeItems().get(0).getIsFlashSaleGoods()) {
            flashSale = true;
        }
        return flashSale;
    }

    private void verifyDevanningGoods(TradeItemSnapshot tradeItemSnapshot, Trade trade, TradeParams tradeParams, TradeGoodsListVO skuList) {
        boolean throwFlag = verifyService.verifyDevanningGoodsTo(trade.getTradeItems(), tradeParams.getOldTradeItems(), skuList, trade.getSupplier()
                .getStoreId(), true);
        if (throwFlag) {
            tradeItemSnapshot.getItemGroups().forEach(param -> {
                if (param.getSupplier().getStoreId().equals(trade.getSupplier()
                        .getStoreId())) {
                    param.setTradeMarketings(trade.getTradeMarketings());
                }
            });
            tradeItemService.updateTradeItemSnapshotNoRollback(tradeItemSnapshot);
            throw new SbcRuntimeException("K-050137");
        }
    }

    private static void verifyBackendFlag(Trade trade, TradeParams tradeParams, TradeGoodsListVO skuList) {
        if (tradeParams.isBackendFlag()) {
            boolean existInvalidGoods = skuList.getGoodsInfos().parallelStream().anyMatch(goodsInfo -> !trade
                    .getSupplier().getSupplierId()
                    .equals(goodsInfo.getCompanyInfoId()));
            if (existInvalidGoods) {
                throw new SbcRuntimeException("K-030006");
            }
        }
    }

    private static void verifyDistribution(Trade trade, TradeParams tradeParams, TradeGoodsListVO skuList) {
        boolean isIepCustomer = trade.getBuyer().isIepCustomer();
        skuList.getGoodsInfos().forEach(item -> {
            if (DistributionGoodsAudit.CHECKED.equals(item.getDistributionGoodsAudit())
                    || DefaultFlag.YES.equals(trade.getStoreBagsFlag())
                    || Objects.nonNull(tradeParams.getGrouponForm())
                    || isIepCustomer) {
                item.setCount(null);
                item.setMaxCount(null);
            }
        });
        List<String> marketingSkuIds = new ArrayList();
        tradeParams.getMarketingList().stream().forEach(tradeMarketingDTO -> {
            if (CollectionUtils.isNotEmpty(tradeMarketingDTO.getSkuIds())) {
                marketingSkuIds.addAll(tradeMarketingDTO.getSkuIds());
            }
        });

        // 特价商品和大客户商品回设 ——— 特价 > 企业购 > 大客户价
        boolean isVipCustomer = trade.getBuyer().isVipCustomer();
        if (Objects.isNull(trade.getIsFlashSaleGoods()) || !trade.getIsFlashSaleGoods()) {
            trade.getTradeItems().forEach(item -> {
                if (Objects.nonNull(item.getGoodsInfoType()) && item.getGoodsInfoType() == 1 && Objects.nonNull(item.getSpecialPrice())) {
                    item.setSplitPrice(item.getSpecialPrice().multiply(new BigDecimal(item.getNum())));
                    item.setPrice(item.getSpecialPrice());
                    item.setLevelPrice(item.getSpecialPrice());
                } else if (isIepCustomer && Objects.nonNull(item.getVipPrice()) && item.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
                    //企业购会员价格不参与任何营销活动
                    if (!marketingSkuIds.contains(item.getSkuId())) {
                        item.setSplitPrice(item.getVipPrice().multiply(new BigDecimal(item.getNum())));
                        item.setPrice(item.getVipPrice());
                        item.setLevelPrice(item.getVipPrice());
                    }
                } else if (isVipCustomer && Objects.nonNull(item.getVipPrice()) && item.getVipPrice().compareTo(BigDecimal.ZERO) > 0) {
                    //vip价格不参与任何营销活动
                    if (!marketingSkuIds.contains(item.getSkuId())) {
                        item.setSplitPrice(item.getVipPrice().multiply(new BigDecimal(item.getNum())));
                        item.setPrice(item.getVipPrice());
                        item.setLevelPrice(item.getVipPrice());
                    }
                }
            });
        }
        // 2.5.处理分销
        //dealDistribution(trade, tradeParams);
    }

    /***
     * @desc  统计商品总件数
     * @author shiy  2023/7/4 14:13
    */
    private static Long getaTradeTotalNum(Trade trade) {
        Long goodsTotalNum = 0L;
        Optional<Long> _goodsTotalNum = trade.getTradeItems().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_goodsTotalNum.isPresent()) {
            goodsTotalNum += _goodsTotalNum.get();
        }
        Optional<Long> _giftNum = trade.getGifts().stream()
                .map(TradeItem::getNum).reduce((sum, item) -> {
                    sum += item;
                    return sum;
                });
        if (_giftNum.isPresent()) {
            goodsTotalNum += _giftNum.get();
        }
        return goodsTotalNum;
    }

    private Invoice getInvoice(StoreCommitInfoDTO storeCommitInfoDTO) {
        Invoice invoice = Invoice.builder()
                .generalInvoice(KsBeanUtil.convert(storeCommitInfoDTO.getGeneralInvoice(), GeneralInvoice.class))
                .specialInvoice(KsBeanUtil.convert(storeCommitInfoDTO.getSpecialInvoice(), SpecialInvoice.class))
                .address(storeCommitInfoDTO.getInvoiceAddressDetail())
                .addressId(storeCommitInfoDTO.getInvoiceAddressId())
                .projectId(storeCommitInfoDTO.getInvoiceProjectId())
                .projectName(storeCommitInfoDTO.getInvoiceProjectName())
                .projectUpdateTime(storeCommitInfoDTO.getInvoiceProjectUpdateTime())
                .type(storeCommitInfoDTO.getInvoiceType())
                .sperator(storeCommitInfoDTO.isSpecialInvoiceAddress())
                .updateTime(storeCommitInfoDTO.getInvoiceAddressUpdateTime())
                .taxNo(setInvoiceTaxNo(storeCommitInfoDTO.getInvoiceType(), storeCommitInfoDTO.getGeneralInvoice(), storeCommitInfoDTO.getSpecialInvoice()))
                .build();
        return invoice;
    }

    private TradeParams getTradeParams(TradeCommitRequest tradeCommitRequest, CustomerVO customer, Map<Long, CommonLevelVO> storeLevelMap, TradeItemSnapshot tradeItemSnapshot, StoreCommitInfoDTO storeCommitInfoDTO, TradeItemGroup group, Invoice invoice, boolean flashSale) {
        TradeParams tradeParams = TradeParams.builder()
                .backendFlag(false) //表示前端操作
                .commitFlag(true) //表示下单
                .marketingList(group.getTradeMarketingList())
                .couponCodeId(storeCommitInfoDTO.getCouponCodeId())
                .tradePrice(new TradePrice())
                .tradeItems(group.getTradeItems())
                .oldGifts(Collections.emptyList())//下单,非修改订单
                .oldTradeItems(Collections.emptyList())//下单,非修改订单
                .storeLevel(storeLevelMap.get(group.getSupplier().getStoreId()))
                .customer(customer)
                .supplier(group.getSupplier())
                .seller(null) //客户下单
                .consigneeId(tradeCommitRequest.getConsigneeId())
                .detailAddress(tradeCommitRequest.getConsigneeAddress())
                .consigneeUpdateTime(tradeCommitRequest.getConsigneeUpdateTime())
                .consignee(null) //客户下单,不可填写临时收货地址
                .invoice(invoice)
                .invoiceConsignee(null) //客户下单,不可填写发票临时收货地址
                .deliverWay(storeCommitInfoDTO.getDeliverWay())
                .payType(storeCommitInfoDTO.getPayType())
                .buyerRemark(storeCommitInfoDTO.getBuyerRemark())
                .sellerRemark(null) //客户下单,无卖家备注
                .encloses(storeCommitInfoDTO.getEncloses())
                .ip(tradeCommitRequest.getOperator().getIp())
                .platform(Platform.CUSTOMER)
                .forceCommit(tradeCommitRequest.isForceCommit())
                .orderSource(tradeCommitRequest.getOrderSource())
                .distributeChannel(tradeCommitRequest.getDistributeChannel())
                .storeBagsFlag(group.getStoreBagsFlag())
                .shopName(tradeCommitRequest.getShopName())
                .isDistributor(tradeCommitRequest.getIsDistributor())
                .storeOpenFlag(storeCommitInfoDTO.getStoreOpenFlag())
                .openFlag(tradeCommitRequest.getOpenFlag())
                .grouponForm(group.getGrouponForm())
                .shareUserId(customer.getCustomerId().equals(tradeCommitRequest.getShareUserId())
                        ? null : tradeCommitRequest.getShareUserId())
                .isFlashSaleGoods(flashSale)
                .wareHouseCode(storeCommitInfoDTO.getWareHouseCode())
                .wareId(storeCommitInfoDTO.getWareId())
                .wareName(tradeCommitRequest.getWareName())
                .tradeWareHouse(wareHouseTurnToTrade(storeCommitInfoDTO.getWareHouseVO()))
                .bookingDate(storeCommitInfoDTO.getBookingDate())
                .logisticsInfo(toLogisticsInfo(storeCommitInfoDTO.getLogisticsInfo()))
                .group(group)
                .suitBuyCount(tradeItemSnapshot.getSuitBuyCount())
                .marketingId(tradeItemSnapshot.getMarketingId())
                .sourceChannel(tradeCommitRequest.getSourceChannel())
                .saleType(group.getSaleType())
                .netWorkVO(tradeCommitRequest.getNetWorkVO())
                .build();
        return tradeParams;
    }

    public TradeDeliveryWayResponse calcTradeDeliveryWay(TradeDeliveryWayRequest request) {
        CustomerDeliveryAddressByIdResponse response = customerDeliveryAddressQueryProvider.getById(CustomerDeliveryAddressByIdRequest
                .builder().deliveryAddressId(request.getAddressId()).build()).getContext();
        if (Objects.isNull(response) || response.getDelFlag().equals(DeleteFlag.YES)) {
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "该收货地址不存在");
        }
        Consignee consignee = getBuildConsignee(request.getAddressId(), "", response);
        Long provinceId = response.getProvinceId();
        Long cityId = response.getCityId();
        TradeDeliveryWayResponse deliveryWayResponse = new TradeDeliveryWayResponse();
        List<TradeDeliveryWayResDTO> responseList = new ArrayList<>(request.getDeliveryWayDTOS().size());

        List<Long> storeIdList = request.getDeliveryWayDTOS().stream().map(tradeStore->tradeStore.getStoreId()).collect(Collectors.toList());
        CompanyMallContractRelationPageRequest companyMallContractRelationPageRequest = new CompanyMallContractRelationPageRequest();
        companyMallContractRelationPageRequest.setStoreIds(storeIdList);
        companyMallContractRelationPageRequest.setPageNum(0);
        companyMallContractRelationPageRequest.setPageSize(10000);
        companyMallContractRelationPageRequest.setDeleteFlag(DeleteFlag.NO);
        final BaseResponse<CompanyMallContractRelationPageResponse> marketResponse = companyIntoPlatformQueryProvider.pageContractRelation(companyMallContractRelationPageRequest);
        if(marketResponse == null || marketResponse.getContext() == null || marketResponse.getContext().getPage()==null || CollectionUtils.isEmpty(marketResponse.getContext().getPage().getContent())){
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商家信息错误");
        }
        List<CompanyMallContractRelationVO> relationList = marketResponse.getContext().getPage().getContent();

        final Map<String, List<CompanyMallContractRelationVO>> storeTabsMap = relationList.stream()
                .filter(o -> o.getRelationType().equals(MallContractRelationType.TAB.getValue()))
                .collect(Collectors.groupingBy(CompanyMallContractRelationVO::getRelationValue));

        List<Long> mallIdList = storeTabsMap.keySet().stream().map(id->Long.valueOf(id.trim())).collect(Collectors.toList());
        final CompanyMallSupplierTabPageRequest mallSupplierTabPageRequest = new CompanyMallSupplierTabPageRequest();
        mallSupplierTabPageRequest.setPageNum(0);
        mallSupplierTabPageRequest.setPageSize(10000);
        mallSupplierTabPageRequest.setDeleteFlag(DeleteFlag.NO);
        mallSupplierTabPageRequest.setIdList(mallIdList);
        final CompanyMallSupplierTabPageResponse mallPageContext = companyIntoPlatformQueryProvider.pageSupplierTab(mallSupplierTabPageRequest).getContext();
        if (null == mallPageContext || CollectionUtils.isEmpty(mallPageContext.getPage().getContent())) {
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商城信息错误");
        }
        List<CompanyMallSupplierTabVO> supplierTabVOList = mallPageContext.getPage().getContent();

        final Map<String, List<CompanyMallContractRelationVO>> storeMarketsMap = relationList.stream()
                .filter(o -> o.getRelationType().equals(MallContractRelationType.MARKET.getValue()))
                .collect(Collectors.groupingBy(CompanyMallContractRelationVO::getRelationValue));

        final CompanyMallBulkMarketPageRequest marketPageRequest = new CompanyMallBulkMarketPageRequest();
        marketPageRequest.setPageNum(0);
        marketPageRequest.setPageSize(10000);
        marketPageRequest.setDeleteFlag(DeleteFlag.NO);
        List<Long> marketIdList = storeMarketsMap.keySet().stream().map(id->Long.valueOf(id.trim())).collect(Collectors.toList());
        marketPageRequest.setMarketIds(marketIdList);
        final CompanyMallBulkMarketPageResponse marketPageContext = companyIntoPlatformQueryProvider.pageMarket(marketPageRequest).getContext();
        if (null == marketPageContext || CollectionUtils.isEmpty(marketPageContext.getPage().getContent())) {
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "市场信息错误");
        }
        List<CompanyMallBulkMarketVO> marketVOList = marketPageContext.getPage().getContent();
        Set<Long> calcedStoreIdSet = new HashSet<>(storeIdList.size());
        storeMarketsMap.forEach((marketId, storeList) -> {
            CompanyMallBulkMarketVO mallBulkMarketVO = marketVOList.stream().filter(market->market.getMarketId().compareTo(Long.valueOf(marketId))==0).findAny().orElse(null);
            if(mallBulkMarketVO ==null){
                throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "市场ID"+marketId+"不存在");
            }
            List<Long> marektStoreList = storeList.stream().map(CompanyMallContractRelationVO::getStoreId).collect(Collectors.toList());
            List<TradeDeliveryWayDTO> marketStoreDtoList =  request.getDeliveryWayDTOS().stream().filter(s->marektStoreList.contains(s.getStoreId())).collect(Collectors.toList());
            if(CollectionUtils.isEmpty(marketStoreDtoList)){
                logger.info("calcTradeDeliveryWay-市场ID[{}]NAME[{}]无下家",mallBulkMarketVO.getMarketId(),mallBulkMarketVO.getMarketName());
                return;
            }
            Long totalNumByMarket = marketStoreDtoList.stream().mapToLong(e->e.getTotalSkuNum()).sum();
            marketStoreDtoList.forEach(tradeStore->{
                if(calcedStoreIdSet.contains(tradeStore.getStoreId())){
                    return;
                }
                CompanyMallSupplierTabVO supplierTabVO = getSupplierTabVOByStoreId(tradeStore.getStoreId(),storeTabsMap, supplierTabVOList);
                if(supplierTabVO == null){
                    return;
                }
                List<Integer> deliveryList = supplierTabVO.getDeliveryTypeList();
                /*List<Integer> deliveryList= getDeliveryListByStoreId(tradeStore.getStoreId(),storeTabsMap, supplierTabVOList);
                if(CollectionUtils.isEmpty(deliveryList)){
                    return;
                }*/
                logger.info("calcTradeDeliveryWay-商家ID[{}]商城ID[{}]商城name[{}]市场ID[{}]市场NAME[{}]",tradeStore.getStoreId(),supplierTabVO.getId(),supplierTabVO.getTabName(),mallBulkMarketVO.getMarketId(),mallBulkMarketVO.getMarketName());
                Long tradeGoodsTotalNum = tradeStore.getTotalSkuNum();
                Long storeId = tradeStore.getStoreId();
                Long wareId = tradeStore.getWareId();
                Long varTotalNumByMarket = mallBulkMarketVO.getPatchFlag()==1?totalNumByMarket:tradeGoodsTotalNum;
                List<TradeDeliveryWayResDTO> resultList = calcTradeDeliveryWayDelieveryToStore(CalcTradeDeliveryWayParam.builder()
                        .consignee(consignee).provinceId(provinceId).cityId(cityId).tradeGoodsTotalNum(tradeGoodsTotalNum).storeId(storeId).wareId(wareId)
                        .marketGoodsTotalNum(varTotalNumByMarket).mallDeliveryTypeList(deliveryList).companyMallBulkMarketVO(mallBulkMarketVO).companyMallSupplierTabVO(supplierTabVO).build());
                if(CollectionUtils.isNotEmpty(resultList)) {
                    initDeliveryResult(tradeStore, resultList);
                    responseList.addAll(resultList);
                }
                calcedStoreIdSet.add(tradeStore.getStoreId());
                //calcTradeDeliveryWayByComanyType(consignee, provinceId, cityId, responseList, tradeStore, tradeGoodsTotalNum, storeId, wareId);
            });
        });
        deliveryWayResponse.setResDTOList(responseList);
        return deliveryWayResponse;
    }

    private List<Integer> getDeliveryListByStoreId(Long storeId, Map<String, List<CompanyMallContractRelationVO>> storeTabsMap, List<CompanyMallSupplierTabVO> supplierTabVOList) {
        for(Map.Entry<String, List<CompanyMallContractRelationVO>>  storeTabsMapEntry: storeTabsMap.entrySet()){
            String mallId = storeTabsMapEntry.getKey();
            List<CompanyMallContractRelationVO> storeList = storeTabsMapEntry.getValue();
            CompanyMallContractRelationVO relationVO = storeList.stream().filter(store->store.getStoreId().compareTo(storeId)==0).findAny().orElse(null);
            if(relationVO!=null) {
                CompanyMallSupplierTabVO supplierTabVO = supplierTabVOList.stream().filter(mall -> mall.getId().compareTo(Long.valueOf(mallId)) == 0).findAny().orElse(null);
                if (supplierTabVO == null) {
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商城ID" + mallId + "不存在");
                }
                List<Integer> deliveryTypeList = supplierTabVO.getDeliveryTypeList();
                if (CollectionUtils.isEmpty(deliveryTypeList)) {
                    logger.info("calcTradeDeliveryWay-商城ID[{}]NAME[{}]没送方", supplierTabVO.getId(), supplierTabVO.getTabName());
                    return new ArrayList<>(0);
                }
                logger.info("calcTradeDeliveryWay-商家ID[{}]商城ID[{}]商城name[{}]",storeId,supplierTabVO.getId(),supplierTabVO.getTabName());
                return deliveryTypeList;
            }
        }
        logger.info("calcTradeDeliveryWay-商家ID[{}]没有绑定商城", storeId);
        return new ArrayList<>(0);
    }

    private CompanyMallSupplierTabVO getSupplierTabVOByStoreId(Long storeId, Map<String, List<CompanyMallContractRelationVO>> storeTabsMap, List<CompanyMallSupplierTabVO> supplierTabVOList) {
        for(Map.Entry<String, List<CompanyMallContractRelationVO>>  storeTabsMapEntry: storeTabsMap.entrySet()){
            String mallId = storeTabsMapEntry.getKey();
            List<CompanyMallContractRelationVO> storeList = storeTabsMapEntry.getValue();
            CompanyMallContractRelationVO relationVO = storeList.stream().filter(store->store.getStoreId().compareTo(storeId)==0).findAny().orElse(null);
            if(relationVO!=null) {
                CompanyMallSupplierTabVO supplierTabVO = supplierTabVOList.stream().filter(mall -> mall.getId().compareTo(Long.valueOf(mallId)) == 0).findAny().orElse(null);
                if (supplierTabVO == null) {
                    throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "商城ID" + mallId + "不存在");
                }
                List<Integer> deliveryTypeList = supplierTabVO.getDeliveryTypeList();
                if (CollectionUtils.isEmpty(deliveryTypeList)) {
                    logger.info("calcTradeDeliveryWay-商城ID[{}]NAME[{}]没配方", supplierTabVO.getId(), supplierTabVO.getTabName());
                    return null;
                }
                return supplierTabVO;
            }
        }
        return null;
    }

    private void calcTradeDeliveryWayByComanyType(Consignee consignee, Long provinceId, Long cityId, List<TradeDeliveryWayResDTO> responseList, TradeDeliveryWayDTO tradeStore, Long tradeGoodsTotalNum, Long storeId, Long wareId) {
        if(tradeStore.getCompanyType()==CompanyType.PLATFORM.toValue()) {
            /*if (provinceId == 420000) {
                TradeDeliveryWayResDTO wayResponse =null;
                if (tradeGoodsTotalNum >= 5) {
                    wayResponse = TradeDeliveryWayResDTO.builder().storeId(storeId).wareId(wareId).deliverWay(DeliverWay.SITE_PICK_SELF).provinceId(provinceId).companyType(tradeStore.getCompanyType()).matchFlag(1).freightFreeNumber(5L).templateId(-1L).build();
                }else{
                    wayResponse = TradeDeliveryWayResDTO.builder().storeId(storeId).wareId(wareId).deliverWay(DeliverWay.SITE_PICK_SELF).provinceId(provinceId).companyType(tradeStore.getCompanyType()).matchFlag(0).freightFreeNumber(5L).templateId(-1L).build();
                }
                wayResponse.setCompanyType(tradeStore.getCompanyType());
                responseList.add(wayResponse);
            } else{*/
            List<TradeDeliveryWayResDTO> resultList = calcTradeDeliveryWay_PLATFORM(consignee, provinceId, cityId, tradeGoodsTotalNum, storeId, wareId);
            if(CollectionUtils.isNotEmpty(resultList)) {
                initDeliveryResult(tradeStore, resultList);
                responseList.addAll(resultList);
            }
            //}
        }else if(tradeStore.getCompanyType()==CompanyType.UNIFIED.toValue()) {
            List<TradeDeliveryWayResDTO> resultList = calcTradeDeliveryWay_UNIFIED(consignee, provinceId, cityId, tradeGoodsTotalNum, storeId, wareId);
            if(CollectionUtils.isNotEmpty(resultList)) {
                initDeliveryResult(tradeStore, resultList);
                responseList.addAll(resultList);
            }
        }else{
            List<TradeDeliveryWayResDTO> resultList = calcTradeDeliveryWay_SUPPLIER(consignee, provinceId, cityId, tradeGoodsTotalNum, storeId, wareId);
            if(CollectionUtils.isNotEmpty(resultList)) {
                initDeliveryResult(tradeStore, resultList);
                responseList.addAll(resultList);
            }
        }
    }

    private static void initDeliveryResult(TradeDeliveryWayDTO tradeStore, List<TradeDeliveryWayResDTO> resultList) {
        resultList.forEach(d->{
            d.setCompanyType(tradeStore.getCompanyType());
        });
    }

    private List<TradeDeliveryWayResDTO> calcTradeDeliveryWayDelieveryToStore(CalcTradeDeliveryWayParam param) {
        boolean isXYYStore =param.getStoreId().compareTo(123457929L) == 0;
        List<Integer> mallDeliveryTypeList = param.getMallDeliveryTypeList();
        if(isXYYStore){
            mallDeliveryTypeList.add(freightTemplateDeliveryType.CONVENTION.toValue());
            mallDeliveryTypeList.add(freightTemplateDeliveryType.AREATENDELIVER.toValue());
        }
        List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList = freightTemplateDeliveryAreaQueryProvider.queryByStoreIdAndWareIdAndOpened(FreightTemplateDeliveryAreaListRequest.builder()
                .storeId(param.getStoreId()).wareId(param.getWareId()).destinationTypeList(mallDeliveryTypeList).build()).getContext();
        LinkedList<TradeDeliveryWayResDTO> resultList = new LinkedList<TradeDeliveryWayResDTO>();
        if (CollectionUtils.isEmpty(freightTemplateDeliveryAreaVOList)) {
            return resultList;
        }
        List<freightTemplateDeliveryType> destinationTypeList = freightTemplateDeliveryAreaVOList.stream().map(FreightTemplateDeliveryAreaVO::getDestinationType).collect(Collectors.toList());
        logger.warn("calcTradeDeliveryWay-商家配送方式[{}]商城配送方式[{}]",destinationTypeList,param.getMallDeliveryTypeList());
        List<FreightTemplateDeliveryAreaVO> paidToStoreDelivery = freightTemplateDeliveryAreaVOList.stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.DELIVERYTOSTORE).collect(Collectors.toList());
        if(CollectionUtils.isNotEmpty(paidToStoreDelivery)) {
            if (param.getCompanyMallBulkMarketVO() != null && param.getCompanyMallBulkMarketVO().getProvinceId() != null && param.getProvinceId().compareTo(param.getCompanyMallBulkMarketVO().getProvinceId()) == 0) {
                buildDeliveryToStore(param, freightTemplateDeliveryAreaVOList, resultList);
            } else {
                logger.info("calcTradeDeliveryWay-店铺[{}]根据省份规则", param.getStoreId());
            }
        }
        buildThirdLogistics(param, freightTemplateDeliveryAreaVOList, resultList);
        buildSpecifyLogistics(param, freightTemplateDeliveryAreaVOList, resultList);
        //buildPaidExpress(param, freightTemplateDeliveryAreaVOList, resultList);
        //buildExpressSelfPaid(param, freightTemplateDeliveryAreaVOList, resultList);
        buildExpressArrived(param, freightTemplateDeliveryAreaVOList, resultList);
        List<FreightTemplateDeliveryAreaVO> paidExpressDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.INTRA_CITY_LOGISTICS).collect(Collectors.toList());
        if(CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            if (param.getCompanyMallBulkMarketVO() != null && param.getCompanyMallBulkMarketVO().getCityId() != null && param.getCityId().compareTo(param.getCompanyMallBulkMarketVO().getCityId()) == 0) {
                buildIntraCityLogistics(param, freightTemplateDeliveryAreaVOList, resultList);
            } else {
                logger.info("calcTradeDeliveryWay-店铺[{}]根据城市规则", param.getStoreId());
            }
        }
        buildToDoorPick(param, freightTemplateDeliveryAreaVOList, resultList);
        boolean existsToStore = null!= resultList.stream().filter(m->m.getDeliverWay()==DeliverWay.DELIVERY_TO_STORE).findAny().orElse(null);
        if(!existsToStore) {
            List<TradeDeliveryWayResDTO> resultListFreeStoreCfg = new ArrayList<>(1);
            buildFreeStoreCfg(param, freightTemplateDeliveryAreaVOList, resultListFreeStoreCfg);
            if (isXYYStore && resultListFreeStoreCfg.size() > 0) {
                if (resultListFreeStoreCfg.get(0).getMatchFlag() == 1) {
                    resultList.addFirst(resultListFreeStoreCfg.get(0));
                } else {
                    resultList.add(resultListFreeStoreCfg.get(0));
                }
            }
        }
        return resultList;
    }

    /**
     * @desc  第三方物流
     * @author shiy  2023/9/18 16:32
    */
    private void buildThirdLogistics(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> deliveryThirdLogistics = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.THIRDLOGISTICS).collect(Collectors.toList());
        FreightTemplateDeliveryAreaVO deliveryThirdLogisticsReturnVo = verifyService.veriryThirdLogistic(param.getProvinceId(), param.getCityId(), deliveryThirdLogistics);
        if (deliveryThirdLogisticsReturnVo != null) {
            if (param.getTradeGoodsTotalNum() >= deliveryThirdLogisticsReturnVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.LOGISTICS, 1, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
            }else{
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.LOGISTICS, 0, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    /**
     * @desc  指定的物流
     * @author shiy  2023/9/18 16:32
    */

    private void buildSpecifyLogistics(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> deliveryThirdLogistics = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.SPECIFY_LOGISTICS).collect(Collectors.toList());
        FreightTemplateDeliveryAreaVO deliveryThirdLogisticsReturnVo = verifyService.veriryThirdLogistic(param.getProvinceId(), param.getCityId(), deliveryThirdLogistics);
        if (deliveryThirdLogisticsReturnVo != null) {
            if (param.getTradeGoodsTotalNum() >= deliveryThirdLogisticsReturnVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.SPECIFY_LOGISTICS, 1, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
            }else{
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.SPECIFY_LOGISTICS, 0, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    private List<TradeDeliveryWayResDTO> calcTradeDeliveryWay_UNIFIED(Consignee consignee, Long provinceId, Long cityId, Long tradeGoodsTotalNum, Long storeId, Long wareId) {
        List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList = freightTemplateDeliveryAreaQueryProvider.queryByStoreIdAndWareIdAndOpened(FreightTemplateDeliveryAreaListRequest.builder()
                .storeId(storeId).wareId(wareId).build()).getContext();
        List<TradeDeliveryWayResDTO> resultList = new ArrayList<>(2);
        if (CollectionUtils.isNotEmpty(freightTemplateDeliveryAreaVOList)) {
            buildToDoorPick(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
            buildPaidExpress(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
            List<FreightTemplateDeliveryAreaVO> deliveryThirdLogistics = freightTemplateDeliveryAreaVOList.
                    stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.THIRDLOGISTICS).collect(Collectors.toList());
            FreightTemplateDeliveryAreaVO deliveryThirdLogisticsReturnVo = verifyService.veriryThirdLogistic(provinceId, cityId, deliveryThirdLogistics);
            if (deliveryThirdLogisticsReturnVo != null) {
                if (tradeGoodsTotalNum >= deliveryThirdLogisticsReturnVo.getFreightFreeNumber()) {
                    TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.LOGISTICS, 1, deliveryThirdLogisticsReturnVo);
                    resultList.add(deliveryWayResDTO);
                    return resultList;
                }
            }
            if (deliveryThirdLogisticsReturnVo != null) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.LOGISTICS, 0, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
                return resultList;
            }
        }
        return resultList;
    }

    private static void setHomeFlagByDoorPickConfigVO(TradeDeliveryWayResDTO deliveryWayResDTO, DoorPickConfigVO doorPickConfigVO) {
        NetWorkVO netWorkVO = getNetWorkVODoorPick(doorPickConfigVO);
        TradeDeliveryWayHomeFlagDTO homeFlagDTO = KsBeanUtil.copyPropertiesThird(netWorkVO,TradeDeliveryWayHomeFlagDTO.class);
        homeFlagDTO.setFlag(DefaultFlag.YES);
        deliveryWayResDTO.setHomeFlagDTO(homeFlagDTO);
    }

    private static NetWorkVO getNetWorkVODoorPick(DoorPickConfigVO doorPickConfigVO) {
        NetWorkVO homeFlagDTO = new NetWorkVO();
        homeFlagDTO.setContacts(doorPickConfigVO.getContacts());
        homeFlagDTO.setProvince(doorPickConfigVO.getProvince());
        homeFlagDTO.setProvinceName(doorPickConfigVO.getProvinceName());
        homeFlagDTO.setCity(doorPickConfigVO.getCity());
        homeFlagDTO.setCityName(doorPickConfigVO.getCityName());
        homeFlagDTO.setArea(doorPickConfigVO.getArea());
        homeFlagDTO.setAreaName(doorPickConfigVO.getAreaName());
        homeFlagDTO.setTown(doorPickConfigVO.getTown());
        homeFlagDTO.setTownName(doorPickConfigVO.getTownName());
        homeFlagDTO.setNetworkAddress(doorPickConfigVO.getNetworkAddress());
        homeFlagDTO.setPhone(Constants.EMPTY_STR);
        homeFlagDTO.setNetworkName(Constants.EMPTY_STR);
        homeFlagDTO.setNetworkId(doorPickConfigVO.getNetworkId());
        homeFlagDTO.setPickNote(getToDoorPickNote(null));
        return homeFlagDTO;
    }

    /**
     * @desc a.当天00:00:00至06:59:59下单并支付可当天07点之后提货
     *       b.当天07:00:00至23:59:59下单并支付可在次日07点之后提货
     * @author shiy  2023/9/22 11:06
    */
    private static String getToDoorPickNote(String timeRange){
        if(null==timeRange){
            timeRange="9";
            timeRange=StringUtils.leftPad(timeRange,2,"0");
        }
        int setTime =Integer.parseInt(timeRange);
        Calendar cal = Calendar.getInstance();
        //获取年
        //int year = cal.get(Calendar.YEAR);
        //获取月,范围是0-11,最后使用需+1
        int month = cal.get(Calendar.MONTH);
        month=month+1;
        //获取日
        int day = cal.get(Calendar.DAY_OF_MONTH);
        //获取小时
        int hour = cal.get(Calendar.HOUR_OF_DAY);
        //获取分钟
        //int minute = cal.get(Calendar.MINUTE);
        //获取秒
        //int second = cal.get(Calendar.SECOND);

        if(hour<setTime){
            return "可"+month+"月"+day+"日"+timeRange+"点钟后提货";
        }else {
            cal.add(Calendar.DATE, 1);
            month = cal.get(Calendar.MONTH);
            month = month + 1;
            day = cal.get(Calendar.DAY_OF_MONTH);
            return "可" + month + "月" + (day) + "日" + timeRange + "点钟后提货";
        }
    }

    private List<TradeDeliveryWayResDTO> calcTradeDeliveryWay_SUPPLIER(Consignee consignee, Long provinceId, Long cityId, Long tradeGoodsTotalNum, Long storeId, Long wareId) {
        List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList = freightTemplateDeliveryAreaQueryProvider.queryByStoreIdAndWareIdAndOpened(FreightTemplateDeliveryAreaListRequest.builder()
                .storeId(storeId).wareId(wareId).build()).getContext();
        List<TradeDeliveryWayResDTO> resultList = new ArrayList<>(2);
        if (CollectionUtils.isNotEmpty(freightTemplateDeliveryAreaVOList)) {
            FreightTemplateDeliveryAreaVO deliveryFreeStoreReturnVo = null;
            buildPaidExpress(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
            buildToDoorPick(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
            //buildDeliveryToStore(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
            List<FreightTemplateDeliveryAreaVO> deliveryFreeStoreCfg = freightTemplateDeliveryAreaVOList.
                    stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.CONVENTION).collect(Collectors.toList());
            deliveryFreeStoreReturnVo = verifyService.veriryFreeStore(provinceId, cityId, deliveryFreeStoreCfg);
            if (deliveryFreeStoreReturnVo != null) {
                if (tradeGoodsTotalNum >= deliveryFreeStoreReturnVo.getFreightFreeNumber()) {
                    List<FreightTemplateDeliveryAreaVO> deliveryVillagesCfg = freightTemplateDeliveryAreaVOList.
                            stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.AREATENDELIVER).collect(Collectors.toList());

                    FreightTemplateDeliveryAreaVO deliveryVillagesReturnVo = verifyService.veriryVillages(consignee, storeId, provinceId, cityId, deliveryVillagesCfg);
                    if (deliveryVillagesReturnVo != null) {
                        if (tradeGoodsTotalNum >= deliveryVillagesReturnVo.getFreightFreeNumber()) {
                            TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.DELIVERY_HOME, 1, deliveryVillagesReturnVo);
                            resultList.add(deliveryWayResDTO);
                            return resultList;
                        } else {
                            deliveryFreeStoreReturnVo = deliveryVillagesReturnVo;
                        }
                    } else {
                        TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.DELIVERY_HOME, 1, deliveryFreeStoreReturnVo);
                        resultList.add(deliveryWayResDTO);
                        return resultList;
                    }
                }
            }
            List<FreightTemplateDeliveryAreaVO> deliveryThirdLogistics = freightTemplateDeliveryAreaVOList.
                    stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.THIRDLOGISTICS).collect(Collectors.toList());
            FreightTemplateDeliveryAreaVO deliveryThirdLogisticsReturnVo = verifyService.veriryThirdLogistic(provinceId, cityId, deliveryThirdLogistics);
            if (deliveryThirdLogisticsReturnVo != null) {
                if (tradeGoodsTotalNum >= deliveryThirdLogisticsReturnVo.getFreightFreeNumber()) {
                    TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.LOGISTICS, 1, deliveryThirdLogisticsReturnVo);
                    resultList.add(deliveryWayResDTO);
                    return resultList;
                }
            }
            if (deliveryFreeStoreReturnVo != null) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.DELIVERY_HOME, 0, deliveryFreeStoreReturnVo);
                resultList.add(deliveryWayResDTO);
                return resultList;
            }

            if (deliveryThirdLogisticsReturnVo != null) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.LOGISTICS, 0, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
                return resultList;
            }
        }
        return resultList;
    }

    private List<TradeDeliveryWayResDTO> calcTradeDeliveryWay_PLATFORM(Consignee consignee, Long provinceId, Long cityId, Long tradeGoodsTotalNum, Long storeId, Long wareId) {
        List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList = freightTemplateDeliveryAreaQueryProvider.queryByStoreIdAndWareIdAndOpened(FreightTemplateDeliveryAreaListRequest.builder()
                .storeId(storeId).wareId(wareId).build()).getContext();
        List<TradeDeliveryWayResDTO> resultList = new ArrayList<>(2);
        if (CollectionUtils.isEmpty(freightTemplateDeliveryAreaVOList)) {
            return resultList;
        }
        buildToDoorPick(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
        buildPaidExpress(provinceId, tradeGoodsTotalNum, storeId, wareId, freightTemplateDeliveryAreaVOList, resultList);
        List<FreightTemplateDeliveryAreaVO> deliveryFreeStoreCfg = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.CONVENTION).collect(Collectors.toList());
        FreightTemplateDeliveryAreaVO deliveryFreeStoreReturnVo = verifyService.veriryFreeStore(provinceId, cityId, deliveryFreeStoreCfg);
        if (deliveryFreeStoreReturnVo != null) {
            if (tradeGoodsTotalNum >= deliveryFreeStoreReturnVo.getFreightFreeNumber()) {
                List<FreightTemplateDeliveryAreaVO> deliveryVillagesCfg = freightTemplateDeliveryAreaVOList.
                        stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.AREATENDELIVER).collect(Collectors.toList());

                FreightTemplateDeliveryAreaVO deliveryVillagesReturnVo = verifyService.veriryVillages(consignee, storeId, provinceId, cityId, deliveryVillagesCfg);
                if (deliveryVillagesReturnVo != null) {
                    if (tradeGoodsTotalNum >= deliveryVillagesReturnVo.getFreightFreeNumber()) {
                        TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.DELIVERY_HOME, 1, deliveryVillagesReturnVo);
                        resultList.add(deliveryWayResDTO);
                        return resultList;
                    } else {
                        deliveryFreeStoreReturnVo = deliveryVillagesReturnVo;
                    }
                } else {
                    TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.DELIVERY_HOME, 1, deliveryFreeStoreReturnVo);
                    resultList.add(deliveryWayResDTO);
                    return resultList;
                }
            }
        }
        List<FreightTemplateDeliveryAreaVO> deliveryThirdLogistics = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.THIRDLOGISTICS).collect(Collectors.toList());
        FreightTemplateDeliveryAreaVO deliveryThirdLogisticsReturnVo = verifyService.veriryThirdLogistic(provinceId, cityId, deliveryThirdLogistics);
        if (deliveryThirdLogisticsReturnVo != null) {
            if (tradeGoodsTotalNum >= deliveryThirdLogisticsReturnVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.LOGISTICS, 1, deliveryThirdLogisticsReturnVo);
                resultList.add(deliveryWayResDTO);
                return resultList;
            }
        }

        if (deliveryFreeStoreReturnVo != null) {
            TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.DELIVERY_HOME, 0, deliveryFreeStoreReturnVo);
            resultList.add(deliveryWayResDTO);
            return resultList;
        }

        if (deliveryThirdLogisticsReturnVo != null) {
            TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.LOGISTICS, 0, deliveryThirdLogisticsReturnVo);
            resultList.add(deliveryWayResDTO);
            return resultList;
        }
        return resultList;
    }

    private void buildFreeStoreCfg(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> deliveryFreeStoreCfg = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.CONVENTION).collect(Collectors.toList());
        FreightTemplateDeliveryAreaVO deliveryFreeStoreReturnVo = verifyService.veriryFreeStore(param.getProvinceId(), param.getCityId(), deliveryFreeStoreCfg);
        if (deliveryFreeStoreReturnVo != null) {
            if (param.getTradeGoodsTotalNum() >= deliveryFreeStoreReturnVo.getFreightFreeNumber()) {
                //使用乡镇件，必须先满足免费店配的地址和数量。如果满足乡镇件配置但不满足免费店配的配置，即不满足配送方式免费店配的规则
                List<FreightTemplateDeliveryAreaVO> deliveryVillagesCfg = freightTemplateDeliveryAreaVOList.
                        stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.AREATENDELIVER).collect(Collectors.toList());
                FreightTemplateDeliveryAreaVO deliveryVillagesReturnVo = verifyService.veriryVillages(param.getConsignee(), param.getStoreId(), param.getProvinceId(), param.getCityId(), deliveryVillagesCfg);
                if (deliveryVillagesReturnVo != null) {
                    if (param.getTradeGoodsTotalNum() >= deliveryVillagesReturnVo.getFreightFreeNumber()) {
                        TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.DELIVERY_HOME, 1, deliveryVillagesReturnVo);
                        resultList.add(deliveryWayResDTO);
                    } else {
                        TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.DELIVERY_HOME, 0, deliveryVillagesReturnVo);
                        resultList.add(deliveryWayResDTO);
                    }
                } else {
                    TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.DELIVERY_HOME, 1, deliveryFreeStoreReturnVo);
                    resultList.add(deliveryWayResDTO);
                }
            }else{
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.DELIVERY_HOME, 0, deliveryFreeStoreReturnVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    /**
     * @desc  上门自提
     * @author shiy  2023/9/19 9:19
    */
    private void buildToDoorPick(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> toDoorPickDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.TODOORPICK).collect(Collectors.toList());
        //FreightTemplateDeliveryAreaVO toDoorPickVo = verifyService.veriryToDoorPick(provinceId, cityId, deliveryThirdLogistics);
        if (CollectionUtils.isNotEmpty(toDoorPickDelivery)) {
            FreightTemplateDeliveryAreaVO toDoorPickVo = toDoorPickDelivery.get(0);
            if (param.getTradeGoodsTotalNum()>= toDoorPickVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.TO_DOOR_PICK, 1, toDoorPickVo);
                DoorPickConfigVO doorPickConfigVO = doorPickConfigProvider.findStartedInfoByStoreId(param.getStoreId()).getContext();
                if(null != doorPickConfigVO) {
                    setHomeFlagByDoorPickConfigVO(deliveryWayResDTO, doorPickConfigVO);
                    resultList.add(deliveryWayResDTO);
                }else{
                    logger.info("商家[{}]缺失启用的上门自提点信息",param.getStoreId());
                }
            }
        }
    }

    private void buildToDoorPick(Long provinceId, Long tradeGoodsTotalNum, Long storeId, Long wareId, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> toDoorPickDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.TODOORPICK).collect(Collectors.toList());
        //FreightTemplateDeliveryAreaVO toDoorPickVo = verifyService.veriryToDoorPick(provinceId, cityId, deliveryThirdLogistics);
        if (CollectionUtils.isNotEmpty(toDoorPickDelivery)) {
            FreightTemplateDeliveryAreaVO toDoorPickVo = toDoorPickDelivery.get(0);
            if (tradeGoodsTotalNum >= toDoorPickVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.TO_DOOR_PICK, 1, toDoorPickVo);
                DoorPickConfigVO doorPickConfigVO = doorPickConfigProvider.findStartedInfoByStoreId(storeId).getContext();
                if(null != doorPickConfigVO) {
                    setHomeFlagByDoorPickConfigVO(deliveryWayResDTO, doorPickConfigVO);
                    resultList.add(deliveryWayResDTO);
                }else{
                    logger.info("商家[{}]缺失启用的上门自提点信息",storeId);
                }
            }
        }
    }

    /**
     * @desc  收费快递
     * @author shiy  2023/8/11 10:14
    */
    private void buildPaidExpress(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> paidExpressDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.PAIDEXPRESS).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            FreightTemplateDeliveryAreaVO platDeliveryPaidExpress = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.PAIDEXPRESS);
            if(platDeliveryPaidExpress==null){
                log.info("boss无快递自费区域配置");
                return;
            }
            FreightTemplateDeliveryAreaVO paidExpressVo = paidExpressDelivery.get(0);
            if(null == paidExpressVo.getDestinationArea() || paidExpressVo.getDestinationArea().length==0 ){
            }else {
                paidExpressVo = verifyService.veriryFreightTemplateDeliveryAreaVO12(param.getProvinceId(), param.getCityId(), paidExpressVo);
            }
            if(paidExpressVo==null) {
                log.info("快递自费区域校验不通过");
                return;
            }
            if (param.getTradeGoodsTotalNum() >= paidExpressVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.EXPRESS, 1, paidExpressVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    private void buildExpressSelfPaid(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> paidExpressDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.EXPRESS_SELF_PAID).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            FreightTemplateDeliveryAreaVO platDeliveryPaidExpress = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.EXPRESS_SELF_PAID);
            if(platDeliveryPaidExpress==null){
                log.info("boss无快递自费区域配置");
                return;
            }
            FreightTemplateDeliveryAreaVO paidExpressVo = paidExpressDelivery.get(0);
            if(null == paidExpressVo.getDestinationArea() || paidExpressVo.getDestinationArea().length==0 ){
            }else {
                paidExpressVo = verifyService.veriryFreightTemplateDeliveryAreaVO12(param.getProvinceId(), param.getCityId(), paidExpressVo);
            }
            if(paidExpressVo==null) {
                log.info("快递自费区域校验不通过");
                return;
            }
            if (param.getTradeGoodsTotalNum() >= paidExpressVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.EXPRESS_SELF_PAID, 1, paidExpressVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    private static void buildExpressArrived(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> paidExpressDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.EXPRESS_ARRIVED).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            FreightTemplateDeliveryAreaVO paidExpressVo = paidExpressDelivery.get(0);
            if (param.getTradeGoodsTotalNum() >= paidExpressVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.EXPRESS_ARRIVED, 1, paidExpressVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    private static void buildPaidExpress(Long provinceId, Long tradeGoodsTotalNum, Long storeId, Long wareId, List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        List<FreightTemplateDeliveryAreaVO> paidExpressDelivery = freightTemplateDeliveryAreaVOList.
                stream().filter(f -> f.getDestinationType() == freightTemplateDeliveryType.PAIDEXPRESS).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            FreightTemplateDeliveryAreaVO paidExpressVo = paidExpressDelivery.get(0);
            if (tradeGoodsTotalNum >= paidExpressVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.EXPRESS, 1, paidExpressVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    /**
     * @desc  同城快递
     * @author shiy  2023/8/11 10:14
     */
    private static void buildIntraCityLogistics(CalcTradeDeliveryWayParam param, List<FreightTemplateDeliveryAreaVO> paidExpressDelivery, List<TradeDeliveryWayResDTO> resultList) {
        if (CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            FreightTemplateDeliveryAreaVO paidExpressVo = paidExpressDelivery.get(0);
            if (param.getTradeGoodsTotalNum() >= paidExpressVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.INTRA_CITY_LOGISTICS, 1, paidExpressVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    private static void buildIntraCityLogistics(Long provinceId, Long tradeGoodsTotalNum, Long storeId, Long wareId, List<FreightTemplateDeliveryAreaVO> paidExpressDelivery, List<TradeDeliveryWayResDTO> resultList) {
        if (CollectionUtils.isNotEmpty(paidExpressDelivery)) {
            FreightTemplateDeliveryAreaVO paidExpressVo = paidExpressDelivery.get(0);
            if (tradeGoodsTotalNum >= paidExpressVo.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(provinceId, storeId, wareId, DeliverWay.INTRA_CITY_LOGISTICS, 1, paidExpressVo);
                resultList.add(deliveryWayResDTO);
            }
        }
    }

    /**
     * @desc  配送到店
     * @author shiy  2023/8/16 14:31
    */
    private void buildDeliveryToStore(CalcTradeDeliveryWayParam param,List<FreightTemplateDeliveryAreaVO> freightTemplateDeliveryAreaVOList, List<TradeDeliveryWayResDTO> resultList) {
        FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_5 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_5);
        FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_10 = verifyService.getFreightTemplateDeliveryAreaVO(freightTemplateDeliveryType.DELIVERYTOSTORE_10);
        if(platDeliveryToStoreCfg_5==null||platDeliveryToStoreCfg_10==null){
            return;
        }
        platDeliveryToStoreCfg_5 = verifyService.veriryFreightTemplateDeliveryAreaVO12(param.getProvinceId(),param.getCityId(),platDeliveryToStoreCfg_5);
        if(platDeliveryToStoreCfg_5 == null){
            logger.info("收货地址[{}]省[{}]市[{}]不在",param.getConsignee().getId(),param.getProvinceId(),param.getCityId());
            return;
        }
        boolean isMatched=param.getMarketGoodsTotalNum()>=platDeliveryToStoreCfg_5.getFreightFreeNumber();
        logger.info("商家[{}],批发市场数量[{}]配送到店起送数量[{}] {}满",param.getStoreId(),param.getMarketGoodsTotalNum(),platDeliveryToStoreCfg_5.getFreightFreeNumber(),isMatched?"":"不");
        TradeDeliveryWayResDTO deliveryWayResDTO = null;
        //if(isMatched) {
        deliveryWayResDTO = calcdeliveryToStoreCfg(param, platDeliveryToStoreCfg_5, platDeliveryToStoreCfg_10);;
        /*}else{
            deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_5,0,1);
        }*/
        if(null!=deliveryWayResDTO) {
            TradeDeliveryWayHomeFlagDTO toStorePickSit = localTmsCarrierService.getToStorePickSit(param);
            deliveryWayResDTO.setToStorePickSit(toStorePickSit);
            resultList.add(deliveryWayResDTO);
        }
    }


    private TradeDeliveryWayResDTO calcdeliveryToStoreCfg(CalcTradeDeliveryWayParam param, FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_5, FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg_10) {
        logger.info("商家[{}]商品数量[{}]批发市场商品数量[{}]", param.getStoreId(), param.getTradeGoodsTotalNum(),param.getMarketGoodsTotalNum());
        Long townId = param.getConsignee().getTwonId();
        Long areaId = param.getConsignee().getCityId();
        //platDeliveryToStoreCfg_10 = verifyService.veriryFreightTemplateDeliveryAreaVO34(areaId,townId, platDeliveryToStoreCfg_10);
        boolean villageFlag = isToStoreVillageFlag(areaId,townId);
        if(platDeliveryToStoreCfg_10 !=null && villageFlag){
            if (param.getTradeGoodsTotalNum() >= platDeliveryToStoreCfg_10.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_10,1,0);
                return deliveryWayResDTO;
            }else {
                if (param.getMarketGoodsTotalNum() >= platDeliveryToStoreCfg_10.getFreightFreeNumber()) {
                    TradeDeliveryWayResDTO deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_10,1,1);
                    return deliveryWayResDTO;
                }else{
                    TradeDeliveryWayResDTO deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_10,0,1);
                    return deliveryWayResDTO;
                }
            }
        }else {
            if (param.getTradeGoodsTotalNum() >= platDeliveryToStoreCfg_5.getFreightFreeNumber()) {
                TradeDeliveryWayResDTO deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_5,1,0);
                return deliveryWayResDTO;
            }else {
                if (param.getMarketGoodsTotalNum() >= platDeliveryToStoreCfg_5.getFreightFreeNumber()) {
                    TradeDeliveryWayResDTO deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_5,1,1);
                    return deliveryWayResDTO;
                }else{
                    TradeDeliveryWayResDTO deliveryWayResDTO = getTradeDeliveryWayResToStoreDTO(param, platDeliveryToStoreCfg_5,0,1);
                    return deliveryWayResDTO;
                }
            }
        }
    }

    private TradeDeliveryWayResDTO getTradeDeliveryWayResToStoreDTO(CalcTradeDeliveryWayParam param, FreightTemplateDeliveryAreaVO platDeliveryToStoreCfg,Integer matchFlag,Integer patchFlag) {
        String patchName = patchFlag==0?"非凑件":"凑件";
        String villName = platDeliveryToStoreCfg.getDestinationType().toValue()==freightTemplateDeliveryType.DELIVERYTOSTORE_10.toValue()?"乡镇件":"";
        logger.info("商家["+param.getStoreId()+"],商品数量["+param.getTradeGoodsTotalNum()+"]批发市场总下单数据["+param.getMarketGoodsTotalNum()+"]"+(matchFlag==1?"已":"不")+"满足配送到店"+villName+"-"+patchName);
        TradeDeliveryWayResDTO deliveryWayResDTO = getRightTemplateBuild(param, DeliverWay.DELIVERY_TO_STORE, matchFlag, platDeliveryToStoreCfg);
        deliveryWayResDTO.setPatchFlag(patchFlag);
        return deliveryWayResDTO;
    }

    private static TradeDeliveryWayResDTO getRightTemplateBuild(Long provinceId, Long storeId, Long wareId,DeliverWay deliverWay,Integer matchFlag, FreightTemplateDeliveryAreaVO deliveryVillagesReturnVo) {
        return TradeDeliveryWayResDTO.builder().storeId(storeId).wareId(wareId).deliverWay(deliverWay).freightFreeNumber(deliveryVillagesReturnVo.getFreightFreeNumber()).matchFlag(matchFlag).provinceId(provinceId).templateId(deliveryVillagesReturnVo.getId()).build();
    }

    private static TradeDeliveryWayResDTO getRightTemplateBuild(CalcTradeDeliveryWayParam param,DeliverWay deliverWay,Integer matchFlag, FreightTemplateDeliveryAreaVO deliveryVillagesReturnVo) {
        return TradeDeliveryWayResDTO.builder().storeId(param.getStoreId()).wareId(param.getWareId()).deliverWay(deliverWay).
                freightFreeNumber(deliveryVillagesReturnVo.getFreightFreeNumber()).matchFlag(matchFlag).provinceId(param.getProvinceId()).
                templateId(deliveryVillagesReturnVo.getId()).mallBulkMarketId(param.getCompanyMallBulkMarketVO().getMarketId()).mallSupplierTabId(param.getCompanyMallSupplierTabVO().getId()).build();
    }

    public Integer queryKingdeePushPayStatus(String tid) {
        return tradePushKingdeePayRepository.selectPushKingdeePayStutuByOrderNo(tid);
    }

    public void initHistoryTradeInfo(Integer flag) {
        switch (flag){
            case 1:
                initHistoryTradeInfoCostPrice();
                break;
            default:
                break;
        }
    }
    /***
     * @desc 初始化订单sku成本价
     * @author shiy  2023/8/24 15:16
    */
    private void initHistoryTradeInfoCostPrice() {
        TradeQueryRequest tradeQueryRequest = new TradeQueryRequest();
        long tradeCount = countNum(tradeQueryRequest.getWhereCriteria(),tradeQueryRequest);
        int pageSize =100;
        long pages = tradeCount/pageSize+(tradeCount%pageSize>0?1:0);
        Query query = new Query(tradeQueryRequest.getWhereCriteria());
        Field findFields = query.fields();
        findFields.include("tradeItems");
        log.info("初始化历史数据，分{}批，共{}条",pages,tradeCount);
        ExecutorService executorService = Executors.newFixedThreadPool(50);
        for(long pageNO =0 ;pageNO<pages;pageNO++){
            long finalPageNO = pageNO;
            executorService.execute(new Runnable() {
                @Override
                public void run() {
                    List<Trade> trades = mongoTemplate.find(query.skip(finalPageNO *pageSize).limit(pageSize), Trade.class);
                    trades.forEach(trade->{
                        List<String> tradeSkuIds = trade.getTradeItems().stream().map(TradeItem::getSkuId).collect(Collectors.toList());
                        if(CollectionUtils.isNotEmpty(tradeSkuIds)) {
                            DevanningGoodsInfoListResponse goodsInfoListResponse = devanningGoodsInfoQueryProvider.listByCondition(DevanningGoodsInfoListByConditionRequest.builder().goodsInfoIds(tradeSkuIds).build()).getContext();
                            if (goodsInfoListResponse != null && CollectionUtils.isNotEmpty(goodsInfoListResponse.getDevanningGoodsInfoVOS())) {
                                AtomicBoolean changeed = new AtomicBoolean(false);
                                trade.getTradeItems().forEach(tradeItem -> {
                                    DevanningGoodsInfoVO devanningGoodsInfoVO = goodsInfoListResponse.getDevanningGoodsInfoVOS().stream().filter(d -> d.getGoodsInfoId().equals(tradeItem.getSkuId())).findFirst().orElse(null);
                                    if (devanningGoodsInfoVO != null && devanningGoodsInfoVO.getCostPrice() != null) {
                                        tradeItem.setCost(devanningGoodsInfoVO.getCostPrice());
                                        changeed.set(true);
                                    }
                                });
                                if (changeed.get()) {
                                    mongoTemplate.updateFirst(new Query(Criteria.where("id").is(trade.getId())), new Update().set("tradeItems", trade.getTradeItems()), Trade.class);
                                }
                            }
                        }
                    });
                }
            });
        }
        executorService.shutdown();
    }

    @LcnTransaction
    public void pushOrderToTms(String tid) {
        Trade trade = detail(tid);
        if (Objects.isNull(trade)) {
            throw new SbcRuntimeException(CommonErrorCode.SPECIFIED, "订单不存在");
        }
        createTmsOrder(Arrays.asList(trade));
    }



    public void updateTradeLogisticNO(String tid, String thirdPartyDeliveryOrderNo) {
        mongoTemplate.updateFirst(new Query(Criteria.where("id").is(tid)), new Update().set("tradeDelivers.0.logistics.logisticNo",thirdPartyDeliveryOrderNo), Trade.class);
    }

    private void updateTradeDelivers(Trade trade) {
        mongoTemplate.updateFirst(new Query(Criteria.where("id").is(trade.getId())), new Update().set("tradeDelivers", trade.getTradeDelivers()), Trade.class);
    }

    public List<TradeFreightResponse> getFreightForDeliveryToStore(List<TradeParams> convert) {
        List<TradeFreightResponse> responseList = new ArrayList<>(convert.size());
        List<TradeParams> storeConvert = convert.stream().filter(p -> DeliverWay.isDeliveryToStore(p.getDeliverWay())).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(storeConvert)) {
            List<TradeFreightResponse> storeFreightResponse = localTmsOrderService.getFreightForDelivery(convert);
            responseList.addAll(storeFreightResponse);
        }

        List<TradeParams> expressConvert = convert.stream().filter(p -> DeliverWay.isExpressSelfPaid(p.getDeliverWay())).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(expressConvert)) {
            /*List<TradeFreightResponse> expressFreightResponse =localExpressOrderService.getFreightForDelivery(convert);
            responseList.addAll(expressFreightResponse);*/
        }
        return responseList;
    }

    public void updateStatusForTradeCancel(Trade trade) {
        if(DeliverWay.isDeliveryToStore(trade.getDeliverWay())) {
            localTmsOrderService.updateStatusForTradeCancel(trade);
        }else if(DeliverWay.isExpressSelfPaid(trade.getDeliverWay())){
            //localExpressOrderService.updateStatusForTradeCancel(trade);
        }
    }

    public List<OrderRecommendCount> recommendByUserIdAndSku() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(30, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator( Criteria.where("tradeState.payState").is("PAID"),Criteria.where("tradeState.createTime").gte(justTime)

        );
        //创建aggreation
        Aggregation aggregation = Aggregation.newAggregation(Aggregation.match(criteria),
                Aggregation.group("tradeItems.skuId","buyer._id").count().as("count"),
                Aggregation. sort(new Sort(Sort.Direction.DESC,"count")));
        AggregationResults<OrderRecommendCount> sd = mongoTemplate.aggregate(aggregation, "trade", OrderRecommendCount.class);
        List<OrderRecommendCount> mappedResults = sd.getMappedResults();
        List<OrderRecommendCount> newList=new ArrayList<>();
        for (OrderRecommendCount or:mappedResults) {
            for (String s:or.get_id()) {
                or.setUserId(s);
                newList.add(or);
            }
        }
        return newList;

    }
    public List<OrderRecommendSkuCount> recommendTypeByCustomerId(TradeListAllRequest tradeListAllRequest) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(30, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator( Criteria.where("tradeState.payState").is("PAID"),
                Criteria.where("tradeState.createTime").gte(justTime) ,
                Criteria.where("buyer._id").is(tradeListAllRequest.getTradeQueryDTO().getBuyerId())
        );
        //创建aggreation
        Aggregation aggregation = Aggregation.newAggregation(Aggregation.match(criteria),
                Aggregation.group("tradeItems.skuId","supplier.supplierId","tradeState.createTime").count().as("count"),
                Aggregation. sort(new Sort(Sort.Direction.DESC,"count")));

        AggregationResults<OrderRecommendSkuCount> trade = mongoTemplate.aggregate(aggregation, "trade", OrderRecommendSkuCount.class);
        List<OrderRecommendSkuCount> mappedResults = trade.getMappedResults();

        List<OrderRecommendSkuCount> newList=new ArrayList<>();
        for (OrderRecommendSkuCount or:mappedResults) {
            for (String s:or.getSkuId()) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String format = sdf.format(Date.parse(or.getCreateTime()));
                OrderRecommendSkuCount skuCount=new OrderRecommendSkuCount();
                skuCount.setCount(or.getCount());
                skuCount.setSupplierId(or.getSupplierId());
                skuCount.setSkuIdOne(s);
                skuCount.setCreateTime(format);
                newList.add(skuCount);

            }
        }
        return newList;
    }
    public List<OrderRecommendCount> sortByUserIdAndSku() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime justTime = now.minus(15, ChronoUnit.DAYS);
        Criteria criteria = new Criteria();
        criteria.andOperator( Criteria.where("tradeState.payState").is("PAID"),Criteria.where("tradeState.createTime").gte(justTime)

        );
        //创建aggreation
        Aggregation aggregation = Aggregation.newAggregation(Aggregation.match(criteria),
                Aggregation.group("tradeItems.spuId").count().as("count"),
                Aggregation.limit(20),
                Aggregation. sort(new Sort(Sort.Direction.DESC,"count")));
        AggregationResults<OrderRecommendCount> sd = mongoTemplate.aggregate(aggregation, "trade", OrderRecommendCount.class);

        List<OrderRecommendCount> mappedResults = sd.getMappedResults();
        List<OrderRecommendCount> newList=new ArrayList<>();
        for (OrderRecommendCount or:mappedResults) {
            for (String s:or.get_id()) {
                or.setSkuId(s);
                newList.add(or);
            }
        }
        return newList;
    }
    public List<OrderRecommendSkuCount> sortByCustomerId(TradeListAllRequest tradeListAllRequest) {
        LocalDateTime now = LocalDateTime.now();
        Criteria criteria = new Criteria();
        criteria.andOperator( Criteria.where("tradeState.payState").is("PAID"),
                Criteria.where("buyer._id").is(tradeListAllRequest.getTradeQueryDTO().getBuyerId())
        );
        //创建aggreation
        Aggregation aggregation = Aggregation.newAggregation(Aggregation.match(criteria),
                Aggregation.group("tradeItems.spuId","supplier.supplierId").count().as("count"),
                Aggregation.limit(100),
                Aggregation. sort(new Sort(Sort.Direction.DESC,"count")));

        AggregationResults<OrderRecommendSkuCount> trade = mongoTemplate.aggregate(aggregation, "trade", OrderRecommendSkuCount.class);
        List<OrderRecommendSkuCount> mappedResults = trade.getMappedResults();
        List<OrderRecommendSkuCount> newList=new ArrayList<>();
        for (OrderRecommendSkuCount or:mappedResults) {
            for (String s:or.getSkuId()) {
                OrderRecommendSkuCount skuCount=new OrderRecommendSkuCount();
                skuCount.setCount(or.getCount());
                skuCount.setSupplierId(or.getSupplierId());
                skuCount.setSkuIdOne(s);
                newList.add(skuCount);

            }
        }
        return newList;
    }
}
